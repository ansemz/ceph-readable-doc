====================
 硬盘和文件系统推荐
====================

.. index:: hard drive preparation

准备硬盘
========

Ceph 注重数据安全，就是说， :term:`Ceph 客户端`\ 收到数据已写入存储器的通知时，数\
据确实已写入硬盘。使用较老的内核（版本小于 2.6.33 ）时，如果日志在原始硬盘上，就要\
禁用写缓存；较新的内核没问题。

用 ``hdparm`` 禁用硬盘的写缓冲功能。 ::

	sudo hdparm -W 0 /dev/hda 0

在生产环境，我们建议操作系统和 :term:`Ceph OSD 守护进程`\ 数据分别放到不同的硬盘。\
如果必须把数据和系统放在同一硬盘里，最好给数据分配一个单独的分区。


.. index:: filesystems

文件系统
========

Ceph 的 OSD 依赖于底层文件系统的稳定性和性能。


.. _Recommended:

推荐的
------

当前，我们推荐部署生产系统时使用 ``xfs`` 文件系统。

以前，我们推荐用 ``btrfs`` 做测试、开发和其他不太要紧的部署，\
因为它有最诱人的一系列功能，但是，现在我们计划用 BlueStore 后\
端来完全取代内核文件系统。 ``btrfs`` 仍然支持、且具有更诱人的\
一系列功能，但是要注意它的稳定性、以及你所用 Linux 发行版对它\
的支持情况。


.. _Not recommended:

不推荐的
--------

我们\ *不建议*\ 使用 ``ext4`` ，是因为它所支持的 xattr 尺寸\
不够大，由此导致的问题会影响 Ceph 对 RADOS 长对象名的处理方\
式。虽说 Ceph 集群如果只用短对象名的话（如没有长 RBD 映像名\
的 RBD 载荷），通常遇不到这些问题，但是像 RGW 这类广泛使用长\
对象名的业务就不行。

从 Jewel 版起，如果配置的最大对象名不能被安然存入 ``ext4`` ，
``ceph-osd`` 守护进程就会拒绝启动。如果集群只会用于短对象名\
的情形（如只用于 RBD ），配置好以下选项后，你可以继续使用
``ext4`` ： ::

        osd max object name len = 256
        osd max object namespace len = 64

.. note:: 如果你所用的 RGW 或其它 librados 客户端没有恰当地\
   处理、或礼貌地回应产生的 ENAMETOOLONG 错误，就可能导致\ \
   *难以排查*\ 的错误。


文件系统背景知识
================

``XFS`` 、 ``btrfs`` 和 ``ext4`` 相\ `比较`_ ``ext3`` 而言，\
在高伸缩性数据存储方面有几个优势。

``XFS`` 、 ``btrfs`` 和 ``ext4`` 都是\ `日志文件系统`_\ ，这\
使得在崩溃、断电后恢复时更健壮，因为这些文件系统在写入数据前\
会先记录所有变更。

``xfs`` 由 Silicon Graphics 开发，是一个成熟、稳定的文件系统。\
相反， ``btrfs`` 是相对年轻的文件系统，它致力于实现系统管理员\
梦寐以求的大规模数据存储基础，和其他 Linux 文件系统相比它有独\
一无二的功能和优势。

``btrfs`` 是写时复制（  `copy-on-write`_ ， cow ）文件系统，\
它支持文件创建时间戳和校验和（可校验元数据完整性）功能，所以\
它能探测到数据坏副本，并且用好副本修复。写时复制功能是说
``btrfs`` 支持可写文件系统快照。 ``btrfs`` 也支持透明压缩和其\
他功能。

``btrfs`` 也集成了多设备管理功能，据此可以在底层支持异质硬盘\
存储，和数据分配策略。未来开发社区还会提供 ``fsck`` 、去重、\
数据加密功能。


.. _copy-on-write: http://en.wikipedia.org/wiki/Copy-on-write
.. _比较: http://en.wikipedia.org/wiki/Comparison_of_file_systems
.. _日志文件系统: http://en.wikipedia.org/wiki/Journaling_file_system
