.\" Man page generated from reStructuredText.
.
.TH "CEPH" "1" "Oct 19, 2019" "dev" "Ceph"
.SH NAME
ceph \- Ceph dev
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH 提纲
.nf
\fBceph\-authtool\fP \fIkeyringfile\fP
[ \-l | \-\-list ]
[ \-p | \-\-print\-key ]
[ \-C | \-\-create\-keyring ]
[ \-g | \-\-gen\-key ]
[ \-\-gen\-print\-key ]
[ \-\-import\-keyring \fIotherkeyringfile\fP ]
[ \-n | \-\-name \fIentityname\fP ]
[ \-u | \-\-set\-uid \fIauid\fP ]
[ \-a | \-\-add\-key \fIbase64_key\fP ]
[ \-\-cap \fIsubsystem\fP \fIcapability\fP ]
[ \-\-caps \fIcapfile\fP ]
.fi
.sp
.SH 描述
.sp
\fBceph\-authtool\fP 工具用于创建、查看和修改 Ceph 密钥环文件。密钥环文件内存储着一或多个 Ceph 认证密钥、可能还有被授予的能力。每个密钥都与其类型名关联，格式为
\fB{client,mon,mds,osd}.name\fP 。
.sp
\fB警告：\fP 在私钥保护得当的前提下， Ceph 能提供认证和防中间人攻击的保护。然而，传输中的数据是未加密的，这些数据中可能就有配置密钥的消息。此系统意在运行于可信环境中。
.SH 选项
.INDENT 0.0
.TP
.B \-l, \-\-list
列出密钥环内的所有密钥及其能力
.UNINDENT
.INDENT 0.0
.TP
.B \-p, \-\-print\-key
打印指定条目的已编码密钥，它适合作为 \fBmount \-o secret=\fP
的参数
.UNINDENT
.INDENT 0.0
.TP
.B \-C, \-\-create\-keyring
创建新密钥环，覆盖已有密钥环文件
.UNINDENT
.INDENT 0.0
.TP
.B \-g, \-\-gen\-key
为指定实体名生成新私钥
.UNINDENT
.INDENT 0.0
.TP
.B \-\-gen\-print\-key
为指定条目（ entityname ）生成新密钥，不会修改密钥环文件（
keyringfile ），只打印到标准输出。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-import\-keyring *secondkeyringfile*
把此选项所指定密钥环的内容导入密钥环（ keyringfile ）
.UNINDENT
.INDENT 0.0
.TP
.B \-n, \-\-name *name*
指定要操作的条目名（ entityname ）
.UNINDENT
.INDENT 0.0
.TP
.B \-u, \-\-set\-uid *auid*
设置指定条目（ entityname ）的 auid （已认证用户的标识符）
.UNINDENT
.INDENT 0.0
.TP
.B \-a, \-\-add\-key *base64_key*
把编码好的密钥加进密钥环
.UNINDENT
.INDENT 0.0
.TP
.B \-\-cap *subsystem* *capability*
设置指定子系统的能力
.UNINDENT
.INDENT 0.0
.TP
.B \-\-caps *capsfile*
在所有子系统内设置与给定密钥相关的所有能力
.UNINDENT
.SH 能力
.sp
subsystem 代表 Ceph 子系统的名字： \fBmon\fP 、 \fBmds\fP 、或
\fBosd\fP 。
.sp
能力是一个字符串，描述了允许此用户干什么。格式为逗号分隔的允许声明列表，此声明包含一或多个 rwx （分别表示读、写、执行权限）。 \fBallow *\fP 将在指定子系统下授予完整的超级用户权限。
.sp
例如：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# 可读、写、执行对象
osd = "allow rwx"

# 可访问 MDS 服务器
mds = "allow"

# 可更改集群状态（即它是服务器守护进程）
mon = "allow rwx"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
被限定到单个存储池的 librados 用户的能力大致如此：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
mon = "allow r"

osd = "allow rw pool foo"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
一个 RBD 客户端有一个存储池的读权限和另一个存储池的读写权限：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
mon = "allow r"

osd = "allow class\-read object_prefix rbd_children, allow pool templates r class\-read, allow pool vms rwx"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
权限最小化的文件系统客户端，其能力大致如此：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
mds = "allow"

osd = "allow rw pool data"

mon = "allow r"
.ft P
.fi
.UNINDENT
.UNINDENT
.SH OSD 能力
.sp
一般来说， OSD 能力遵循以下语法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
osdcap  := grant[,grant...]
grant   := allow (match capspec | capspec match)
match   := [ pool[=]<poolname> | object_prefix <prefix>
            | namespace[=]<rados\-namespace>
            | tag <application\-name> <key>=<value> ]
capspec := * | [r][w][x] [class\-read] [class\-write]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
capspec 决定了此实体可执行哪些操作：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
r           = 可读取对象
w           = 可写入对象
x           = 可调用任何类方法（等同于 class\-read 、 class\-write ）
class\-read  = 可调用读数据的类方法
class\-write = 可调用写数据的类方法
* 或 all    = 等价于 rwx ，另外还可运行 OSD 管理命令，即 ceph osd tell ...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
匹配规则限制了授权是基于被访问存储池的，客户端满足匹配条件时授权会叠加。例如，假设客户端的 OSD 能力为： "allow r object_prefix prefix, allow w pool foo, allow x pool bar" ，那么它有 foo 存储池的读写权限（ rw ）、有 bar 存储池的读和执行权限（ rx ）、还有任意存储池中以 prefix 打头的对象的读（ r ）权限。
.SH 能力文件的格式
.sp
能力配置文件是格式化的零或多个键值对，每条一行。键和值以 \fB=\fP 分隔，且值内包含空格时必须用 \fB\(aq\fP 或 \fB"\fP 包起来。键是某个 Ceph 子系统（ \fBosd\fP 、 \fBmds\fP 、 \fBmon\fP ），值是能力字符串（见上文）。
.SH 实例
.sp
给 client.foo 生成密钥并新建密钥环：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-authtool \-C \-n client.foo \-\-gen\-key keyring
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
给此密钥关联一些能力（也就是挂载 Ceph 文件系统的能力）：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-authtool \-n client.foo \-\-cap mds \(aqallow\(aq \-\-cap osd \(aqallow rw pool=data\(aq \-\-cap mon \(aqallow r\(aq keyring
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
查看密钥环内容：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-authtool \-l keyring
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
挂载 Ceph 文件系统时，你可以用此命令获取编码好的私钥：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
mount \-t ceph serverhost:/ mountpoint \-o name=foo,secret=\(gaceph\-authtool \-p \-n client.foo keyring\(ga
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 使用范围
.sp
\fBceph\-authtool\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8)
.SH 提纲
.nf
\fBceph\-clsinfo\fP [ \fIoptions\fP ] ... \fIfilename\fP
.fi
.sp
.SH 描述
.sp
\fBceph\-clsinfo\fP 可显示某个类对象的名字、版本和体系结构信息。
.SH 选项
.INDENT 0.0
.TP
.B \-n, \-\-name
显示类名字
.UNINDENT
.INDENT 0.0
.TP
.B \-v, \-\-version
显示类版本
.UNINDENT
.INDENT 0.0
.TP
.B \-a, \-\-arch
显示类的体系结构
.UNINDENT
.SH 使用范围
.sp
\fBceph\-clsinfo\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8)
.SH 提纲
.nf
\fBceph\-conf\fP \-c \fIconffile\fP \-\-list\-all\-sections
\fBceph\-conf\fP \-c \fIconffile\fP \-L
\fBceph\-conf\fP \-c \fIconffile\fP \-l \fIprefix\fP
\fBceph\-conf\fP \fIkey\fP \-s \fIsection1\fP ...
\fBceph\-conf\fP [\-s \fIsection\fP ] [\-r] \-\-lookup \fIkey\fP
\fBceph\-conf\fP [\-s \fIsection\fP ] \fIkey\fP
.fi
.sp
.SH 描述
.sp
\fBceph\-conf\fP 是用来获取 Ceph 配置文件信息的工具。像大多数 Ceph 程序一样，你可以用 \fB\-c\fP 选项指定 Ceph 配置文件。
.SH 功能
.sp
\fBceph\-conf\fP 可执行以下功能之一：
.INDENT 0.0
.TP
.B \-L, \-\-list\-all\-sections
列举配置文件中所有的段落名字。
.UNINDENT
.INDENT 0.0
.TP
.B \-l, \-\-list\-sections *prefix*
列举包含指定前缀的所有段落。例如， \fB\-\-list\-sections mon\fP 会罗列出所有以 \fBmon\fP 打头的段落。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-lookup *key*
搜寻并打印指定的配置信息。注： \fB\-\-lookup\fP 是默认动作。如果没在命令行上指定其它动作，那就默认为查找。
.UNINDENT
.INDENT 0.0
.TP
.B \-h, \-\-help
打印用法摘要。
.UNINDENT
.SH 选项
.INDENT 0.0
.TP
.B \-c *conffile*
指定 Ceph 配置文件。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-filter\-key *key*
过滤段落列表，只留下与 \fIkey\fP 匹配的段落。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-filter\-key\-value *key* \(ga\(ga=\(ga\(ga *value*
过滤段落列表，只留下与 \fIkey\fP/\fIvalue\fP 对匹配的段落。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-name *type.id*
指定要搜寻段落的 Ceph 名字（默认为 client.admin ）。例如指定 \fB\-\-name osd.0\fP 的话，将搜寻 [osd.0] 、 [osd] 、 [global] 。
.UNINDENT
.INDENT 0.0
.TP
.B \-r, \-\-resolve\-search
从生成的、逗号分隔的搜索列表中找出第一个存在、并可以打开的文件。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-section, \-s
额外指定要搜寻的段落，这些段落优先于正常搜索范围。同样，它会返回先匹配到的条目。
.UNINDENT
.SH 实例
.sp
要查明 osd 0 的 \fBosd data\fP 选项会用什么值：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-conf \-c foo.conf \-\-name osd.0 \-\-lookup "osd data"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
要查明 mds a 的 \fBlog file\fP 选项会用什么值：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-conf \-c foo.conf \-\-name mds.a "log file"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
要罗列以 "osd" 打头的所有段落：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-conf \-c foo.conf \-l osd
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
要罗列所有段落：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-conf \-c foo.conf \-L
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
要打印 "client.0" 所使用的 "keyring" 的路径：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-conf \-\-name client.0 \-r \-l keyring
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 相关文件
.sp
\fB/etc/ceph/$cluster.conf\fP, \fB~/.ceph/$cluster.conf\fP, \fB$cluster.conf\fP
.sp
没指定的话就用这些 Ceph 配置文件。
.SH 使用范围
.sp
\fBceph\-conf\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8),
.SH 提纲
.nf
\fBceph\-create\-keys\fP [\-h] [\-v] [\-t seconds] [\-\-cluster \fIname\fP] \-\-id \fIid\fP
.fi
.sp
.SH 描述
.sp
\fBceph\-create\-keys\fP 工具用于在指定监视器可用时、生成自举引导密钥环。
.sp
它可以创建以下认证项目（或用户）：
.sp
\fBclient.admin\fP
.INDENT 0.0
.INDENT 3.5
以及用于客户端的密钥
.UNINDENT
.UNINDENT
.sp
\fBclient.bootstrap\-{osd, rgw, mds}\fP
.INDENT 0.0
.INDENT 3.5
以及用于自举引导相应服务的密钥。
.UNINDENT
.UNINDENT
.sp
要罗列此集群内的所有用户：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth ls
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 选项
.INDENT 0.0
.TP
.B \-\-cluster
集群名字，默认为 \(aqceph\(aq 。
.UNINDENT
.INDENT 0.0
.TP
.B \-t
等待监视器回应的超时时长，单位为\fB秒\fP（默认 600 ）
.UNINDENT
.INDENT 0.0
.TP
.B \-i, \-\-id
将会起来的 ceph\-mon 进程的唯一标识符，在它加入法定人数前， \fBceph\-create\-keys\fP 会一直等着。
.UNINDENT
.INDENT 0.0
.TP
.B \-v, \-\-verbose
显示得更详细些。
.UNINDENT
.SH 使用范围
.sp
\fBceph\-create\-keys\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8)
.SH 提纲
.nf
\fBceph\-debugpack\fP [ \fIoptions\fP ] \fIfilename.tar.gz\fP
.fi
.sp
.SH 描述
.sp
\fBceph\-debugpack\fP 会打包各种用于崩溃调试的信息。当调试某问题时，可把此压缩包共享给 Ceph 开发者。
.sp
此压缩包会包含 ceph\-mds 、 ceph\-osd 、 ceph\-mon 、 radosgw 的二进制文件，所有日志文件， ceph.conf 配置文件，能找到的核心转储文件，以及（若集群在运行） \(aqceph report\(aq 生成的当前集群状态转储。
.SH 选项
.INDENT 0.0
.TP
.B \-c ceph.conf, \-\-conf=ceph.conf
用 \fIceph.conf\fP 配置文件而非默认的 \fB/etc/ceph/ceph.conf\fP 来确定启动时所需的监视器地址。
.UNINDENT
.SH 使用范围
.sp
\fBceph\-debugpack\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8)
ceph\-post\-file(8)
.SH 提纲
.nf
\fBceph\-dencoder\fP [commands...]
.fi
.sp
.SH 描述
.sp
\fBceph\-dencoder\fP 工具用来编码、解码和转储 Ceph 数据结构。常用于调试或测试版本间的兼容性。
.sp
\fBceph\-dencoder\fP 只是简单地读入命令列表并依次执行。
.SH 命令
.INDENT 0.0
.TP
.B version
打印 \fBceph\-dencoder\fP 二进制程序的版本字符串。
.UNINDENT
.INDENT 0.0
.TP
.B import <file>
从指定文件读入已编码的二进制数据块。它将被放入内存驻留缓冲。
.UNINDENT
.INDENT 0.0
.TP
.B export <file>
把当前内存驻留缓冲的内容写入指定文件。
.UNINDENT
.INDENT 0.0
.TP
.B list_types
列出此 \fBceph\-dencoder\fP 程序已知的所有数据类型。
.UNINDENT
.INDENT 0.0
.TP
.B type <name>
为即将进行的 \fBencode\fP 或 \fBdecode\fP 操作指定类型。
.UNINDENT
.INDENT 0.0
.TP
.B skip <bytes>
导入的文件先找到 <bytes> 字节处再开始读数据结构，当对象中感兴趣的部分之前有前同步码或头部时可加此选项。
.UNINDENT
.INDENT 0.0
.TP
.B decode
把内存驻留缓冲中的内容解码为之前选定类型的例程。若遇到错误，则只报告。
.UNINDENT
.INDENT 0.0
.TP
.B encode
把之前选定类型的驻留内存例程编码为驻留内存缓冲。
.UNINDENT
.INDENT 0.0
.TP
.B dump_json
打印内存驻留对象 JSON 格式的描述。
.UNINDENT
.INDENT 0.0
.TP
.B count_tests
打印出之前选定类型、且 \fBceph\-dencoder\fP 支持的内建测试例程数量。
.UNINDENT
.INDENT 0.0
.TP
.B select_test <n>
用指定的内建测试例程作为同类型的内存驻留例程。
.UNINDENT
.INDENT 0.0
.TP
.B get_features
打印此版本 \fBceph\-dencoder\fP 所支持功能集的十进制值。每一位表示一个功能，它们对应于 src/include/ceph_features.h 中定义的 CEPH_FEATURE_* 。
.UNINDENT
.INDENT 0.0
.TP
.B set_features <f>
把提供给 \fBencode\fP 的功能位设置为 \fIf\fP 。设置了此选项你就能编码出旧版软件可理解的对象（它所支持的类型）。
.UNINDENT
.SH 实例
.sp
比如你想检查 \fBceph\-osd\fP 存储的一对象的一个属性，可以这样：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ cd /mnt/osd.12/current/2.b_head
$ attr \-l foo_bar_head_EFE6384B
Attribute "ceph.snapset" has a 31 byte value for foo_bar_head_EFE6384B
Attribute "ceph._" has a 195 byte value for foo_bar_head_EFE6384B
$ attr foo_bar_head_EFE6384B \-g ceph._ \-q > /tmp/a
$ ceph\-dencoder type object_info_t import /tmp/a decode dump_json
{ "oid": { "oid": "foo",
      "key": "bar",
      "snapid": \-2,
      "hash": 4024842315,
      "max": 0},
  "locator": { "pool": 2,
      "preferred": \-1,
      "key": "bar"},
  "category": "",
  "version": "9\(aq1",
  "prior_version": "0\(aq0",
  "last_reqid": "client.4116.0:1",
  "size": 1681,
  "mtime": "2012\-02\-21 08:58:23.666639",
  "lost": 0,
  "wrlock_by": "unknown.0.0:0",
  "snaps": [],
  "truncate_seq": 0,
  "truncate_size": 0,
  "watchers": {}}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
或者，你也许想转储一个内部 CephFS 元数据对象，可以这样：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ rados \-p metadata get mds_snaptable mds_snaptable.bin
$ ceph\-dencoder type SnapServer skip 8 import mds_snaptable.bin decode dump_json
{ "snapserver": { "last_snap": 1,
   "pending_noop": [],
   "snaps": [],
   "need_to_purge": {},
   "pending_create": [],
   "pending_destroy": []}}
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 使用范围
.sp
\fBceph\-dencoder\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8)
.SH 提纲
.nf
\fBceph\-deploy\fP \fBnew\fP [\fIinitial\-monitor\-node(s)\fP]
.fi
.sp
.nf
\fBceph\-deploy\fP \fBinstall\fP [\fIceph\-node\fP] [\fIceph\-node\fP\&...]
.fi
.sp
.nf
\fBceph\-deploy\fP \fBmon\fP \fIcreate\-initial\fP
.fi
.sp
.nf
\fBceph\-deploy\fP \fBosd\fP \fIprepare\fP [\fIceph\-node\fP]:[\fIdir\-path\fP]
.fi
.sp
.nf
\fBceph\-deploy\fP \fBosd\fP \fIactivate\fP [\fIceph\-node\fP]:[\fIdir\-path\fP]
.fi
.sp
.nf
\fBceph\-deploy\fP \fBosd\fP \fIcreate\fP [\fIceph\-node\fP]:[\fIdir\-path\fP]
.fi
.sp
.nf
\fBceph\-deploy\fP \fBadmin\fP [\fIadmin\-node\fP][\fIceph\-node\fP\&...]
.fi
.sp
.nf
\fBceph\-deploy\fP \fBpurgedata\fP [\fIceph\-node\fP][\fIceph\-node\fP\&...]
.fi
.sp
.nf
\fBceph\-deploy\fP \fBforgetkeys\fP
.fi
.sp
.SH 描述
.sp
\fBceph\-deploy\fP 工具可用于简单、快速地部署 Ceph 集群，而无需涉及繁杂的手动配置。它在管理节点上通过 ssh 获取其它 Ceph 节点的访问权、通过 sudo 获取其上的管理权限、通过底层 Python 脚本自动化各节点上的 Ceph 安装进程。它简单到可以运行在工作站上，不需要服务器、数据库或任何其它的自动化工具。 有了 \fBceph\-deploy\fP ，安装和拆除集群非常简单。然而它不是通用部署工具，是专为想快速安装、运行 Ceph 的人们设计的专用工具，这样的集群只包含必要的的初始配置选项，就没必要安装像 \fBChef\fP 、 \fBPuppet\fP 或 \fBJuju\fP 这样的部署工具。如果你想定制安全选项、分区或目录位置，并按照详细的手动步骤设置集群，应该选用其它工具，即 \fBChef\fP 、 \fBPuppet\fP 、 \fBJuju\fP 或 \fBCrowbar\fP 。
.sp
用 \fBceph\-deploy\fP 工具可以在远程节点上安装 Ceph 软件包、创建集群、增加监视器、收集或忘记密钥、增加 OSD 和元数据服务器、配置管理主机或拆除集群。
.SH 命令
.SS new
.sp
开始部署新集群，并写好配置文件和密钥环。它会尝试把管理节点上的 SSH 密钥复制到监视器节点以获得无密码访问权限，验证主机 IP ，新建一或多个监视器节点以组成监视器法定人数，生成新 Ceph 集群所需的配置文件、监视器密钥环和日志文件。然后把新建的集群 \fBfsid\fP 、主机名和初始监视器成员的 IP 地址组装成 Ceph 配置文件。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy new [MON][MON...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
这里的 [MON] 是初始监视器主机名（短主机名，即 \fBhostname \-s\fP ）。
.sp
此命令还可加这些选项： \fI\%\-\-no\-ssh\-copykey\fP 、 \fI\%\-\-fsid\fP 、 \fI\%\-\-cluster\-network\fP 和 \fI\%\-\-public\-network\fP 。
.sp
如果使用了多个网卡，那么必须在 Ceph 配置文件的 \fB[global]\fP 段下加 \fBpublic network\fP 选项。指定公共网子网后， \fBnew\fP 命令将选用在此子网范围内的远程主机 IP 。公共网也可以在运行时用 \fI\%\-\-public\-network\fP 选项加给前述命令。
.SS install
.sp
在远程主机上安装 Ceph 软件包。首先，它会用无密码 ssh 和 sudo 在管理节点和其它节点上安装 \fByum\-plugin\-priorities\fP ，这样来自上流软件库的 Ceph 软件包就可获得较高优先级。之后，它会探测这些主机的平台和发行版，并且，在软件库准备充分时安装兼容此发行版的软件包。加 \fB\-\-release\fP 选项后它会安装最新版。在安装前的平台和发行版探测中，如果发现 \fBdistro.init\fP 是 \fBsysvinit\fP （如 Fedora 、 CentOS/RHEL 等），那么安装时就不能定制集群名，且自动采用默认名 \fBceph\fP 。
.sp
如果用户用 \fI\%\-\-repo\-url\fP 选项显式地指定了软件库 URL 作为软件源，那么它会覆盖探测结果，并从定制软件库安装 Ceph 软件包。若有必要，也会检测并安装有效的定制存储池。从定制软件库安装时，需输入一个布尔值确定所需逻辑，然后才能继续定制软件库的安装。它所用的定制软件库安装辅助程序会查验配置、下载软件库（及其它附加软件库）并安装它。 \fBcd_conf\fP 是 \fBargparse\fP 构建的对象，它所存储的标识和信息决定了会用到配置里的哪些元数据。
.sp
用户也可以用 \fI\%\-\-repo\fP 选项做到只装软件库，而不装 Ceph 及其依赖软件包。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy install [HOST][HOST...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
这里的 [HOST] 是将被安装 Ceph 软件的主机节点。
.sp
\fB\-\-release\fP 选项可用于指定安装的版本，参数为 CODENAME ，默认为 firefly 。
.sp
此命令支持的其它选项： \fI\%\-\-testing\fP 、 \fI\%\-\-dev\fP 、 \fI\%\-\-adjust\-repos\fP 、 \fI\%\-\-no\-adjust\-repos\fP 、 \fI\%\-\-repo\fP 、 \fI\%\-\-local\-mirror\fP 、 \fI\%\-\-repo\-url\fP 和 \fI\%\-\-gpg\-url\fP 。
.SS mds
.sp
在远程主机上部署 Ceph 元数据服务器。元数据服务器对 CephFS 来说是必需的， \fBmds\fP 命令可用于在指定节点上创建它。 \fBcreate\fP
子命令就是做这个的，它首先获取目标 mds 主机的主机名和发行版信息，之后尝试读取集群的 \fBbootstrap\-mds\fP 密钥并部署到目标主机。密钥格式通常是 \fB{cluster}.bootstrap\-mds.keyring\fP ，如果它没找到此密钥环，就用 \fBgatherkeys\fP 来获取此密钥环；然后在目标主机上创建 mds （在 \fB/var/lib/ceph/mds/\fP 路径下、按 \fB/var/lib/ceph/mds/{cluster}\-{name}\fP 格式）和自举引导密钥环（在 \fB/var/lib/ceph/bootstrap\-mds/\fP 下、按 \fB/var/lib/ceph/bootstrap\-mds/{cluster}.keyring\fP 格式）；然后根据 \fBdistro.init\fP 运行相应命令来启动 \fBmds\fP 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy mds create [HOST[:DAEMON\-NAME]] [HOST[:DAEMON\-NAME]...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
[DAEMON\-NAME] 是可选项。
.SS mon
.sp
在远程主机上部署 Ceph 监视器。 \fBmon\fP 用特定子命令把 Ceph 监视器部署到其它节点。
.sp
\fBcreate\-initial\fP 子命令会部署 Ceph 配置文件中 \fB[global]\fP 段下、 \fBmon initial members\fP 定义的监视器，然后等它们形成法定人数后收集密钥，并一直报告此期间的监视器状态。如果监视器未能形成法定人数，此命令最终会超时。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy mon create\-initial
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBcreate\fP 子命令用于部署 Ceph 监视器，需明确指定想作监视器的主机。如果没指定，它将默认采用 Ceph 配置文件中 \fB[global]\fP 段下 \fBmon initial members\fP 定义的。 \fBcreate\fP 首先会探测目标主机的平台和发行版、并检查主机名是否能兼容此部署；然后采用 \fBnew\fP 命令创建的监视器密钥环、并在目标主机上部署监视器。如果运行 \fBnew\fP 命令时指定了多个主机，即 \fBmon initial members\fP 内含多个主机、且创建了多个密钥环，那么部署监视器时将使用串连过的密钥环，在此期间将用到密钥环解析器，它会在各密钥环中搜索并返回一连串 \fB[entity]\fP 段落；然后用一个辅助程序把所有密钥环集中到一个单体二进制数据块中，此数据块将随 \fI\%\-\-mkfs\fP 选项被注入远程主机上的监视器。所有要被串连的密钥环应该位于同一目录、且以 \fB\&.keyring\fP 结尾，在此过程中，此辅助程序用密钥环解析器返回的段落列表来检查实体是否已经存在于密钥环中，没有的话加上。串连起的密钥环被用于往多个主机上部署监视器。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy mon create [HOST] [HOST...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
这里的 [HOST] 是目标监视器主机的主机名。
.sp
\fBadd\fP 子命令用于向已有集群增加一监视器。它首先探测目标主机的平台和发行版、并检查主机名是否能兼容此部署；然后使用监视器密钥环、确认新监视器主机的配置、并把它加入集群。如果此监视器配置段已存在且定义了 mon addr ，那就采用此地址，否则就得先把主机名解析为 IP 地址；如果加了 \fI\%\-\-address\fP 选项，它将覆盖所有其它选项。加完监视器后会等它启动，然后检查有什么监视器错误、并检查监视器状态。监视器错误可能有：它未加入 \fBmon initial members\fP 、没在 \fBmonmap\fP 里面、 \fBpublic_addr\fP 和 \fBpublic_network\fP 关键字都没定义，这时，监视器们不能组建法定人数。监视器状态能说明此监视器是否启动且正常运行着。此状态是通过在远端运行 \fBceph daemon mon.hostname mon_status\fP 获取的，此命令的输出和布尔值状态能说明当前状况； \fBFalse\fP 意味着此监视器有问题，即使它已启动且运行着， \fBTrue\fP 意味着此监视器已启动且运行正常。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy mon add [HOST]

ceph\-deploy mon add [HOST] \-\-address [IP]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
这里的 [HOST] 是主机名、 [IP] 是目标监视器节点的 IP 地址。要注意，不像其他的 \fBmon\fP 子命令，这里一次只能指定一个节点。
.sp
\fBdestroy\fP 子命令用于从远程主机上完全删除监视器，其参数为主机名。它会停止监视器、确认 \fBceph\-mon\fP 是否确实停止了、在 \fB/var/lib/ceph/\fP 下创建存档目录 \fBmon\-remove\fP 、把监视器的旧目录按 \fB{cluster}\-{hostname}\-{stamp}\fP 格式归档进去、并运行 \fBceph remove...\fP 命令从集群删除它。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy mon destroy [HOST] [HOST...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
这里的 [HOST] 是要删除的监视器的主机名。
.SS gatherkeys
.sp
用于收集新节点所需的认证密钥，以主机名作参数。它会到监视器主机检查并取来 \fBclient.admin\fP 密钥环、监视器密钥环和 \fBbootstrap\-mds/bootstrap\-osd\fP 密钥环，向集群新增 \fBmonitors/OSDs/MDS\fP 时会用到这些认证密钥。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy gatherkeys [HOST] [HOST...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
这里的 [HOST] 是监视器主机名，密钥将从这里拉取。
.SS disk
.sp
管理远程主机上的硬盘，实际上它会调用 \fBceph\-disk\fP 工具及其子命令来管理硬盘。
.sp
\fBlist\fP 子命令罗列硬盘分区和 Ceph OSD 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy disk list [HOST:[DISK]]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
这里的 [HOST] 是节点的主机名、 [DISK] 是硬盘名称或路径。
.sp
\fBprepare\fP 子命令用于预处理 Ceph OSD 所需的目录、硬盘或驱动器。它会创建 GPT 分区、用 Ceph 的类型 UUID 标记分区、创建文件系统、把文件系统标记为可接收 Ceph 数据、使用日志硬盘的整个分区并新增一分区。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy disk prepare [HOST:[DISK]]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
这里的 [HOST] 是节点主机名， [DISK] 是硬盘名或路径。
.sp
\fBactivate\fP 子命令用于激活 Ceph OSD 。它会把卷挂载到一个临时位置、分配 OSD 惟一标识符（如有必要）、重新挂载到正确位置 \fB/var/lib/ceph/osd/$cluster\-$id\fP 并启动 \fBceph\-osd\fP 。此 OSD 可由 \fBudev\fP （当它探测到 OSD GPT 分区类型时）或 ceph 服务启动命令 \fBceph disk activate\-all\fP 激活。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy disk activate [HOST:[DISK]]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
这里的 [HOST] 是节点主机名， [DISK] 是硬盘名或路径。
.sp
\fBzap\fP 子命令可用于杀死、擦除、销毁一设备的分区表和内容。实际上它用 \fBsgdisk\fP 加 \fB\-\-zap\-all\fP 选项来销毁 GPT 和 MBR 数据结构，这样才能重新分区；然后用 \fB\-\-mbrtogpt\fP 选项把 MBR 或 BSD 格式的分区转换为 GPT 格式。现在就可以执行 \fBprepare\fP 子命令来新建 GPT 分区了。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy disk zap [HOST:[DISK]]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
这里的 [HOST] 是节点主机名， [DISK] 是硬盘名或路径。
.SS osd
.sp
用于管理 OSD ，预处理远程主机上的数据盘。 \fBosd\fP 用几个子命令管理 OSD 。
.sp
\fBprepare\fP 子命令用于预处理用作 Ceph OSD 的目录、硬盘或驱动器。它会先检查将要创建的多个 OSD 、并且在可能会超过建议值时发出警告，超过系统允许的最大 PID 数时会产生问题；然后读取集群的 bootstrap\-osd 密钥，或没找到时生成一个自举引导密钥；然后调用 \fBceph\-disk\fP 工具的 \fBprepare\fP 子命令预处理硬盘、日志并在目标主机上部署 OSD 。预处理完成后，它会给 OSD 一些时间处理自身事务，并检查任何可能错误，发现的话报告给用户。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy osd prepare HOST:DISK[:JOURNAL] [HOST:DISK[:JOURNAL]...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBactivate\fP 子命令可激活用 \fBprepare\fP 子命令预处理过的 OSD 。实际上它是基于发行版的 init 类型执行 \fBceph\-disk\fP 工具的 \fBactivate\fP 子命令来激活 OSD 的。激活后，它会给 OSD 一些时间让它启动，然后检查任何可能错误，发现的话报告给用户。它会检查预处理过的 OSD 状态、检查 OSD 树、确保这些 OSD 已启动且在运行。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy osd activate HOST:DISK[:JOURNAL] [HOST:DISK[:JOURNAL]...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBcreate\fP 子命令用 \fBprepare\fP 和 \fBactivate\fP 子命令创建 OSD 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy osd create HOST:DISK[:JOURNAL] [HOST:DISK[:JOURNAL]...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBlist\fP 子命令可罗列磁盘分区、 Ceph OSD 且打印 OSD 元数据。它要先从监视器主机获取 OSD 树、根据 \fBceph\-disk\-list\fP 的输出匹配 OSD 名字以获取挂载点、从文件读取元数据、检查是否存在日志路径、此 OSD 是否在 OSD 树里并打印 OSD 元数据。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy osd list HOST:DISK[:JOURNAL] [HOST:DISK[:JOURNAL]...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS admin
.sp
把配置和 \fBclient.admin\fP 密钥推送到远程主机，它把管理节点上的
\fB{cluster}.client.admin.keyring\fP 复制到目标节点的
\fB/etc/ceph\fP 目录下。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy admin [HOST] [HOST...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
这里的 [HOST] 是目标主机，它将被配置为 Ceph 管理主机。
.SS config
.sp
把配置文件推送到远程主机、或从远程主机拉取。它用 \fBpush\fP
子命令把管理主机上的配置文件写入远程主机的 \fB/etc/ceph\fP
目录下； \fBpull\fP 子命令则相反，也就是把远程主机 \fB/etc/ceph\fP
目录下的配置文件拉取到管理节点上。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy config push [HOST] [HOST...]

ceph\-deploy config pull [HOST] [HOST...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
这里的 [HOST] 是节点主机名，将到这里推送或拉取配置文件。
.SS uninstall
.sp
删除远程主机上的 Ceph 软件包。它会探测指定主机的平台及发行版、并卸载其上的 Ceph 软件包。然而像 \fBlibrbd1\fP 和 \fBlibrados2\fP 这样的依赖包不会被删除，因为 \fBqemu\-kvm\fP 还需要它们。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy uninstall [HOST] [HOST...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
这里的 [HOST] 是要卸载 Ceph 的节点主机名。
.SS purge
.sp
删除远程主机上的 Ceph 软件包、并清除所有数据。它会探测指定主机的平台及发行版、卸载 Ceph 软件包并清除所有数据。然而像 \fBlibrbd1\fP 和 \fBlibrados2\fP 这样的依赖包不会被删除，因为 \fBqemu\-kvm\fP 还需要它们。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy purge [HOST] [HOST...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
这里的 [HOST] 是将被清除 Ceph 痕迹的节点主机名。
.SS purgedata
.sp
清除（删除、销毁、丢弃、粉碎） \fB/var/lib/ceph\fP 之下的所有 Ceph 数据。探测到目标主机的平台及发行版后，它会先检查指定主机上是否仍装着 Ceph ，若安装了就不会清除数据；若 Ceph 已被卸载，它就会尝试卸载 \fB/var/lib/ceph\fP 下的内容。如果失败了，说明 OSD 数据盘可能还挂载着，要先卸载才能继续。它会卸载各 OSD 、再次尝试删除 \fB/var/lib/ceph\fP 下的内容、并检查报错；它也会删除 \fB/etc/ceph\fP 下的内容。所有步骤都成功完成后，指定主机上的所有 Ceph 数据就清除完了。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy purgedata [HOST] [HOST...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
这里的 [HOST] 是要清除数据的节点主机名。
.SS forgetkeys
.sp
删除本地目录中的认证密钥。它会删除此节点上的所有认证密钥，即监视器密钥环、 client.admin 密钥环、 bootstrap\-osd 和 bootstrap\-mds 密钥环。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy forgetkeys
.ft P
.fi
.UNINDENT
.UNINDENT
.SS pkg
.sp
管理远程主机上的软件包，可用于安装或删除软件包。要安装或删除的软件包名字必须加在命令行之后，对应选项分别为 \fI\%\-\-install\fP 和 \fI\%\-\-remove\fP 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy pkg \-\-install [PKGs] [HOST] [HOST...]

ceph\-deploy pkg \-\-remove [PKGs] [HOST] [HOST...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
这里的 [PKGs] 是逗号分隔的软件包名字， [HOST] 是远程节点的主机名，将在此主机安装或删除软件包。
.SS calamari
.sp
安装并配置 Calamari 节点。它首先检查 ceph\-deploy 是否支持在此发行版上安装 Calamari 。 \fBconnect\fP 参数用于安装和配置，它会检查 \fBceph\-deploy\fP 配置文件（ cd_conf ）和 Calamari 或 \fBcalamari\-minion\fP 软件库，它靠默认值安装软件库，除非另外指定，否则它不会安装 Ceph 。 \fBoptions\fP 字典也需定义，因为 \fBceph\-deploy\fP 内部会弹出各条目，如果各主机都必须有这些条目时就可能产生问题。若发行版是 Debian/Ubuntu ，它会确保对 \fBcalamari\-minion\fP 禁用了代理，之后就会安装 \fBcalamari\-minion\fP 包、并添加定制软件库文件。安装时会优先放置 minion 配置，这样在 minion 首次启动时就能使用它了；然后创建配置目录、 calamari 的初始配置、安装 salt\-minion 软件包。如果是 Redhat/CentOS 发行版，还需启动 salt\-minion 服务。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-deploy calamari {connect} [HOST] [HOST...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
这里的 [HOST] 是要安装 Calamari 的主机名。
.sp
\fB\-\-release\fP 选项可用于选定 \fBceph\-deploy\fP 配置里指定的版本，默认为 \fBcalamari\-minion\fP 。
.sp
此命令也支持 \fI\%\-\-master\fP 选项。
.SH 选项
.INDENT 0.0
.TP
.B \-\-address
将被加入集群的主机节点的 IP 地址。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-adjust\-repos
安装会修改源软件库的软件包。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ceph\-conf
采用（或重用）指定的 \fBceph.conf\fP 文件。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-cluster
集群名字。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dev
安装最前沿版本，从 Git 分支或某标签（默认为 master ）编译而来。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-cluster\-network
指定（内部的）集群网。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dmcrypt
用 \fBdm\-crypt\fP 加密 [data\-path] 和/或日志设备。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dmcrypt\-key\-dir
\fBdm\-crypt\fP 的密钥所在目录。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-install
要安装到远程主机的软件包，以逗号分隔。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-fs\-type
格式化磁盘时指定的文件系统（如 \fBxfs\fP 、 \fBbtrfs\fP 或
\fBext4\fP ）。注意，对 btrfs 和 ext4 的支持已经不再测试，也不建议再用了，请转向 xfs 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-fsid
生成 \fBceph.conf\fP 时另外指定 FSID 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-gpg\-url
指定用于定制软件库的 GPG 密钥 URL （默认为 ceph.com ）。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-keyrings
串连要放置到新监视器的多个密钥环。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-local\-mirror
抓取软件包并推送到某些主机上作为本地软件库镜像。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-master
Calamari 主服务器的域。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-mkfs
把密钥注入远程节点的监视器上。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-adjust\-repos
安装不会修改源软件库的软件包。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-ssh\-copykey
不要复制 ssh 密钥。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-overwrite\-conf
覆盖远程主机上的已有配置文件（若存在）。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-public\-network
指定集群的公共网。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-remove
要从远程主机删除的软件包，以逗号分隔。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-repo
只安装软件库文件（跳过软件包安装）。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-repo\-url
指定一个镜像或包含 Ceph 软件包的软件库 url 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-testing
安装最新开发版。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-username
连接远程主机所有的用户名。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-version
当前所安装的 \fBceph\-deploy\fP 版本。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-zap\-disk
销毁分区表和硬盘内容。
.UNINDENT
.SH 使用范围
.sp
\fBceph\-deploy\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%https://ceph.com/ceph\-deploy/docs\fP 。
.SH 参考
.sp
ceph\-mon(8),
ceph\-osd(8),
ceph\-disk(8),
ceph\-mds(8)
.SH 提纲
.nf
\fBceph\-volume\fP [\-h] [\-\-cluster CLUSTER] [\-\-log\-level LOG_LEVEL]
.in +2
[\-\-log\-path LOG_PATH]
.in -2
.fi
.sp
.nf
\fBceph\-volume\fP \fBinventory\fP
.fi
.sp
.nf
\fBceph\-volume\fP \fBlvm\fP [ \fItrigger\fP | \fIcreate\fP | \fIactivate\fP | \fIprepare\fP
\fIzap\fP | \fIlist\fP | \fIbatch\fP]
.fi
.sp
.nf
\fBceph\-volume\fP \fBsimple\fP [ \fItrigger\fP | \fIscan\fP | \fIactivate\fP ]
.fi
.sp
.SH 描述
.sp
\fBceph\-volume\fP 是一个单用途命令行工具，用于把逻辑卷部署为 OSD ，其准备、激活和创建 OSD 的 API 和 \fBceph\-disk\fP
相似。
.sp
它与  \fBceph\-disk\fP 不同的地方是，它不支持交互、或依赖于随同
Ceph 一起安装的 udev 规则。通过这些规则，系统可以自动探测之前配置好的各个设备，随后传入 \fBceph\-disk\fP 以激活它们。
.SH 子命令
.SS inventory
.sp
这个子命令可搜集到主机的物理磁盘清单，并报告它们的元数据。在这些元数据中，有与磁盘相关的数据（像型号、尺寸、是机械磁盘还是固态的）；还有与 Ceph 相关的，像是否可用于 Ceph 、或是否有逻辑卷。
.sp
实例：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-volume inventory
ceph\-volume inventory /dev/sda
ceph\-volume inventory \-\-format json\-pretty
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
可选参数：
.INDENT 0.0
.IP \(bu 2
[\-h, \-\-help]       打印帮助消息、然后退出
.IP \(bu 2
.INDENT 2.0
.TP
.B [\-\-format]         输出格式，可用值有 \fBplain\fP （默认的）、
\fBjson\fP 和 \fBjson\-pretty\fP
.UNINDENT
.UNINDENT
.SS lvm
.sp
通过 LVM 标签， \fBlvm\fP 子命令可以存储标记，且在稍后重新发现并查询与 OSD 有关的各个设备，以便稍后激活它们。
.sp
可用子命令：
.sp
\fBbatch\fP
用一串设备创建基于 \fBfilestore\fP 或 \fBbluestore\fP （默认的）的
OSD 。它会创建 OSD 正常运行所必需的卷组和逻辑卷。
.sp
加三个设备的用法实例：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-volume lvm batch \-\-bluestore /dev/sda /dev/sdb /dev/sdc
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
可选参数：
.INDENT 0.0
.IP \(bu 2
[\-h, \-\-help]          打印帮助消息、然后退出
.IP \(bu 2
[\-\-bluestore]         使用 bluestore 对象存储器（默认）
.IP \(bu 2
[\-\-filestore]         使用 filestore 对象存储器
.IP \(bu 2
[\-\-yes]               跳过报告和提示，径直开通服务
.IP \(bu 2
[\-\-prepare]           仅仅准备 OSD ，不激活
.IP \(bu 2
[\-\-dmcrypt]           为底层 OSD 设备启用加密功能
.IP \(bu 2
[\-\-crush\-device\-class] 指定分配给这个 OSD 的 CRUSH 设备类
.IP \(bu 2
[\-\-no\-systemd]        不要启用或创建任何 systemd 单元
.IP \(bu 2
.INDENT 2.0
.TP
.B [\-\-report]            报告当前输入可能产生的潜在结果（需要
传入设备）
.UNINDENT
.IP \(bu 2
.INDENT 2.0
.TP
.B [\-\-format]            报告时（和 \-\-report 一起使用）的输出格
式，可以是 pretty 或 json 之一
.UNINDENT
.IP \(bu 2
.INDENT 2.0
.TP
.B [\-\-block\-db\-size]     设置（或覆盖） bluestore_block_db_size
的值，单位是字节
.UNINDENT
.IP \(bu 2
[\-\-journal\-size]      覆盖 osd_journal_size 的值，单位是 MB
.UNINDENT
.sp
必需的位置参数：
.INDENT 0.0
.IP \(bu 2
.INDENT 2.0
.TP
.B <DEVICE>    原始设备的完整路径，如 \fB/dev/sda\fP 。可以指定
多个 \fB<DEVICE>\fP 设备路径。
.UNINDENT
.UNINDENT
.sp
\fBactivate\fP
启用写死了 OSD ID 及其 UUID （在 Ceph CLI 工具里也叫 \fBfsid\fP
）的 systemd 单元，这样，在引导时它就能知道哪个 OSD 被启用、且需挂载。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-volume lvm activate \-\-bluestore <osd id> <osd fsid>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
可选参数：
.INDENT 0.0
.IP \(bu 2
[\-h, \-\-help]    打印帮助消息、然后退出
.IP \(bu 2
[\-\-auto\-detect\-objectstore]    通过检查 OSD 来自动探测对象存储器
.IP \(bu 2
[\-\-bluestore]   对象存储器是 bluestore （默认的）
.IP \(bu 2
[\-\-filestore]   对象存储器是 filestore
.IP \(bu 2
[\-\-all]         激活系统内找到的所有 OSD
.IP \(bu 2
[\-\-no\-systemd]  不要创建、启用 systemd 单元、和启动 OSD 服务
.UNINDENT
.sp
用（ idempotent ） \fB\-\-all\fP 标记可以一次激活多个 OSD ：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-volume lvm activate \-\-all
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBprepare\fP
准备一个用作 OSD 及其日志（配置为 \fBfilestore\fP 或默认的
\fBbluestore\fP ）的逻辑卷。除了额外增加元数据之外，它不会创建或修改逻辑卷。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-volume lvm prepare \-\-filestore \-\-data <data lv> \-\-journal <journal device>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
可选参数：
.INDENT 0.0
.IP \(bu 2
[\-h, \-\-help]          打印帮助消息、然后退出
.IP \(bu 2
[\-\-journal JOURNAL]   一个逻辑组名字、逻辑卷路径、或设备路径
.IP \(bu 2
[\-\-bluestore]         使用 bluestore 对象存储器（默认的）
.IP \(bu 2
[\-\-block.wal]         bluestore block.wal 的逻辑卷或分区路径
.IP \(bu 2
[\-\-block.db]          bluestore block.db 的逻辑卷或分区路径
.IP \(bu 2
[\-\-filestore]         使用 filestore 对象存储器
.IP \(bu 2
[\-\-dmcrypt]           为底层 OSD 设备启用加密功能
.IP \(bu 2
[\-\-osd\-id OSD_ID]     重用已有的 OSD id
.IP \(bu 2
[\-\-osd\-fsid OSD_FSID] 重用已有的 OSD fsid
.IP \(bu 2
[\-\-crush\-device\-class] 指定分配给这个 OSD 的 CRUSH 设备类
.UNINDENT
.sp
必需参数：
.INDENT 0.0
.IP \(bu 2
.INDENT 2.0
.TP
.B \-\-data
一个逻辑组名字、或一个逻辑卷路径
.UNINDENT
.UNINDENT
.sp
要加密 OSD 的话，在准备时必须加上 \fB\-\-dmcrypt\fP 标志（
\fBcreate\fP 子命令里也支持）。
.sp
\fBcreate\fP
把开通新 OSD 的两步过程（先调用 \fBprepare\fP 之后 \fBactivate\fP
）包装成一步。倾向于使用 \fBprepare\fP 再 \fBactivate\fP 的原因是为了把新 OSD 们缓慢地加入集群，以避免大量数据被重新均衡。
.sp
这个单步调用过程统一了 \fBprepare\fP 和 \fBactivate\fP 所做的事情，为简便起见，它一次完成。选项和常规用法与 \fBprepare\fP 和
\fBactivate\fP 子命令的基本一样。
.sp
\fBtrigger\fP
这个子命令不是给用户直接使用的，是给 systemd 用的，它会分析
systemd 发来的输入、探测与 OSD 关联的 UUID 和 ID ，然后代理给
\fBceph\-volume lvm activate\fP 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-volume lvm trigger <SYSTEMD\-DATA>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
systemd “数据”应该按如下格式：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<OSD ID>\-<OSD UUID>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
与 OSD 关联过的逻辑卷应该预先准备好，也就是所需的标签和元数据必须已备好。
.sp
位置参数：
.INDENT 0.0
.IP \(bu 2
<SYSTEMD_DATA>  来自 systemd 单元的数据包含 OSD 的 ID 和 UUID 。
.UNINDENT
.sp
\fBlist\fP
罗列与 Ceph 关联的设备或逻辑卷，即设备是否有与 OSD 相关的信息。通过查询 LVM 的元数据，建立 OSD 与设备的关系。
.sp
与 OSD 关联的逻辑卷必须是经过 ceph\-volume 准备过的，这样它才会有所需的标签和元数据。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-volume lvm list
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
罗列一个特定的设备，报告与之相关的所有元数据：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-volume lvm list /dev/sda1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
罗列一个逻辑卷、以及它的所有元数据（ vg 是卷组、 lv 是逻辑卷名字）：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-volume lvm list {vg/lv}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
位置参数：
.INDENT 0.0
.IP \(bu 2
<DEVICE>  逻辑卷的话要按格式 \fBvg/lv\fP ；常规设备为路径
\fB/path/to/sda1\fP 或 \fB/path/to/sda\fP 。
.UNINDENT
.sp
\fBzap\fP
删除指定的逻辑卷或分区。如果指定的是逻辑卷路径，必须按 vg/lv
格式。指定逻辑卷或分区上的文件系统会被删除，所有数据都会被清除。
.sp
然而，逻辑卷或分区还会保持完整。
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
译者注：上面这句原话是：
However, the lv or partition will be kept intact.
.sp
似乎与前一段意思相反，可能是文档错误。尚未实践，不便下结论。
.UNINDENT
.UNINDENT
.sp
对于逻辑卷，用法是：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-volume lvm zap {vg/lv}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
对于分区，用法是：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-volume lvm zap /dev/sdc1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
要完全删除设备，需加 \fB\-\-destroy\fP 选项（适用于所有设备类型）：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-volume lvm zap \-\-destroy /dev/sdc1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
要删除多个设备，可指定 OSD ID 和/或 OSD FSID ：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-volume lvm zap \-\-destroy \-\-osd\-id 1
ceph\-volume lvm zap \-\-destroy \-\-osd\-id 1 \-\-osd\-fsid C9605912\-8395\-4D76\-AFC0\-7DFDAC315D59
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
位置参数：
.INDENT 0.0
.IP \(bu 2
<DEVICE>  逻辑卷的话要按格式 \fBvg/lv\fP ；常规设备为路径
\fB/path/to/sda1\fP 或 \fB/path/to/sda\fP 。
.UNINDENT
.SS simple
.sp
扫描旧 OSD 目录或数据设备，它们可能是由 ceph\-disk 创建、或手动创建的。
.sp
子命令：
.sp
\fBactivate\fP
启用写死了 OSD ID 及其 UUID （在 Ceph CLI 工具里也叫 \fBfsid\fP
）的 systemd 单元，这样，在系统引导时，通过读取之前创建并保存在
\fB/etc/ceph/osd/\fP 内的 JSON 数据，它就能知道哪个 OSD 被启用了、且需挂载。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-volume simple activate \-\-bluestore <osd id> <osd fsid>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
可选参数：
.INDENT 0.0
.IP \(bu 2
[\-h, \-\-help]  打印帮助消息，然后退出
.IP \(bu 2
[\-\-bluestore] 使用 bluestore 对象存储器（默认）
.IP \(bu 2
[\-\-filestore] 使用 filestore 对象存储器
.UNINDENT
.sp
注意： JSON 文件名格式必须是下面这样：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/etc/ceph/osd/<osd id>\-<osd fsid>.json
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBscan\fP
扫描一个运行着的 OSD 或数据设备，以收集其元数据，稍后可用于
ceph\-volume 激活和管理这个 OSD 。这个扫描命令会创建一个 JSON
文件，其内是必需的信息、还有在 OSD 目录内搜集到的其它信息。
.sp
另外， JSON 数据块也可以发到标准输出，以便进一步检查。
.sp
扫描数据设备：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-volume simple scan <data device>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
扫描运行着的 OSD 的目录：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-volume simple scan <path to osd dir>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
可选参数：
.INDENT 0.0
.IP \(bu 2
[\-h, \-\-help]          打印帮助消息，然后退出
.IP \(bu 2
[\-\-stdout]            把 JSON 数据块发到标准输出
.IP \(bu 2
[\-\-force]             如果目标 JSON 文件已存在，直接覆盖它
.UNINDENT
.sp
必需的位置参数：
.INDENT 0.0
.IP \(bu 2
<DATA DEVICE or OSD DIR>  实际的数据分区或指向在运行 OSD 的路径
.UNINDENT
.sp
\fBtrigger\fP
这个子命令不是给用户直接使用的，是给 systemd 用的，它会分析
systemd 发来的输入、探测与 OSD 关联的 UUID 和 ID ，然后代理给
\fBceph\-volume simple activate\fP 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-volume simple trigger <SYSTEMD\-DATA>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
systemd “数据”应该按如下格式：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<OSD ID>\-<OSD UUID>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
与 OSD 关联的 JSON 文件应该提前保存到位，通过扫描（或手写），以使所需元数据随时可用。
.sp
位置参数：
.INDENT 0.0
.IP \(bu 2
<SYSTEMD_DATA>  systemd 单元发来的数据，内含 OSD 的 ID 和 UUID
.UNINDENT
.SH 使用范围
.sp
\fBceph\-volume\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph\-osd(8),
.SH 提纲
.nf
\fBceph\-volume\-systemd\fP \fIsystemd instance name\fP
.fi
.sp
.SH 描述
.sp
\fBceph\-volume\-systemd\fP 是一个 systemd 辅助工具，它会持续接收来自 systemd 单元的输入（动态创建的），这样才能激活
OSD 。
.sp
它会把输入翻译为一条指向 ceph\-volume 的系统调用，只用于激活目的。
.SH 实例
.sp
其输入是 \fBsystemd instance name\fP （在 systemd 单元里用 \fB%i\fP
表示），其格式如下：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<ceph\-volume subcommand>\-<extra metadata>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
对于 \fBlvm\fP ，一个调用大概是：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/usr/bin/ceph\-volume\-systemd lvm\-0\-8715BEB4\-15C5\-49DE\-BA6F\-401086EC7B41
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
它会按如下方法依次调用 \fBceph\-volume\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-volume lvm trigger  0\-8715BEB4\-15C5\-49DE\-BA6F\-401086EC7B41
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
任何其它子命令都需要实现一个 \fBtrigger\fP 命令，以处理这种格式的其余元数据。
.SH 使用范围
.sp
\fBceph\-volume\-systemd\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph\-osd(8),
.SH 提纲
.nf
\fBceph\-fuse\fP [ \-m \fImonaddr\fP:\fIport\fP ] \fImountpoint\fP [ \fIfuse options\fP ]
.fi
.sp
.SH 描述
.sp
\fBceph\-fuse\fP 是 Ceph 分布式文件系统的 FUSE （用户空间文件系统）客户端，它会把 Ceph 文件系统（用 \-m 选项或 ceph.conf 指定）挂载到指定挂载点。
.sp
文件系统可这样卸载：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fusermount \-u mountpoint
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
或向 \fBceph\-fuse\fP 进程发送 \fBSIGINT\fP 信号。
.SH 选项
.sp
ceph\-fuse 识别不了的选项将传递给 libfuse 。
.INDENT 0.0
.TP
.B \-d
启动后将脱离终端、进入守护状态。
.UNINDENT
.INDENT 0.0
.TP
.B \-c ceph.conf, \-\-conf=ceph.conf
用指定的 \fIceph.conf\fP 而非默认的 \fB/etc/ceph/ceph.conf\fP 来查找启动时需要的监视器地址。
.UNINDENT
.INDENT 0.0
.TP
.B \-m monaddress[:port]
连接到指定监视器，而不是从 ceph.conf 里找。
.UNINDENT
.INDENT 0.0
.TP
.B \-r root_directory
把文件系统内的 root_directory 作为根挂载，而不是整个 Ceph 文件系统树。
.UNINDENT
.SH 使用范围
.sp
\fBceph\-fuse\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
fusermount(8),
ceph(8)
.SH 提纲
.nf
\fBceph\-mds\fP \-i \fIname\fP [ \-\-hot\-standby [\fIrank\fP] ]
.fi
.sp
.SH 描述
.sp
\fBceph\-mds\fP 是 Ceph 分布式文件系统的元数据服务器守护进程。一或多个 ceph\-mds 例程协作着管理文件系统的命名空间、协调到共享
OSD 集群的访问。
.sp
各 ceph\-mds 守护进程例程都应该有惟一的名字，此名用于在
ceph.conf 里标识例程。
.sp
一旦守护进程启动，监视器集群会给它分配一个逻辑机架，或把它放如一个候补存储池用于接替其它崩溃的进程。一些特定选项会导致其它行为。
.sp
如果你指定了热备，还必须在命令行加上 rank 、或在配置文件里指定
mds_standby_for_[rank|name] 之一。命令行中指定的会覆盖配置文件，指定 rank 会覆盖指定的名字。
.SH 选项
.INDENT 0.0
.TP
.B \-f, \-\-foreground
前台：启动后不要进入后台（在前台运行），不生成 pid 文件。通过 ceph\-run(8) 调用时有用。
.UNINDENT
.INDENT 0.0
.TP
.B \-d
调试模式：像 \fB\-f\fP ，但它也把所有输出日志发到了标准错误。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-setuser userorgid
启动后设置 UID 。如果指定的是用户名，会查询用户记录以获取 UID 及其 GID ，同时设置 GID ，除非还指定了 \-\-setgroup 选项。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-setgroup grouporgid
启动后设置 GID 。如果指定的是组名，会查询组记录以获取 GID 。
.UNINDENT
.INDENT 0.0
.TP
.B \-c ceph.conf, \-\-conf=ceph.conf
在启动时用 \fIceph.conf\fP 而非默认的 \fB/etc/ceph/ceph.conf\fP 来确定监视器地址。
.UNINDENT
.INDENT 0.0
.TP
.B \-m monaddress[:port]
连接到指定监视器（而非通过 \fBceph.conf\fP 查找）。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-hot\-standby <rank>
启动后作为 MDS <rank> 的热备。
.UNINDENT
.SH 使用范围
.sp
\fBceph\-mds\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8),
ceph\-mon(8),
ceph\-osd(8)
.SH 提纲
.nf
\fBceph\-mon\fP \-i \fImonid\fP [ \-\-mon\-data \fImondatapath\fP ]
.fi
.sp
.SH 描述
.sp
\fBceph\-mon\fP 是 Ceph 分布式存储集群的监视器守护进程。一或多个 \fBceph\-mon\fP 例程可形成 Paxos 兼职议员集群，它们能为集群成员、配置和状态提供非常可靠、坚实的存储。
.sp
\fImondatapath\fP 是个本地文件系统上的目录，存储着监视器数据。通常可用配置文件中的 \fBmon data\fP 选项指定。
.SH 选项
.INDENT 0.0
.TP
.B \-f, \-\-foreground
前台：启动后不要作为守护进程，仍在前台运行。不要生成 PID 文件。通过 ceph\-run(8) 运行时此选项有用。
.UNINDENT
.INDENT 0.0
.TP
.B \-d
调试模式：类似 \fB\-f\fP ，还会把所有日志发到了标准错误。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-setuser userorgid
启动后设置 UID 。如果指定的是用户名，会查询用户记录以获取 UID 及其 GID ，同时设置 GID ，除非还指定了 \-\-setgroup 选项。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-setgroup grouporgid
启动后设置 GID 。如果指定的是组名，会查询组记录以获取 GID 。
.UNINDENT
.INDENT 0.0
.TP
.B \-c ceph.conf, \-\-conf=ceph.conf
启动时用 \fIceph.conf\fP 配置文件而非默认的 \fB/etc/ceph/ceph.conf\fP 来确定启动时所需的监视器地址。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-mkfs
用种子信息初始化 \fBmon data\fP 目录，以形成并初始化 Ceph 文件系统或加入现有监视器集群。以下三个信息是必需的：
.INDENT 7.0
.IP \(bu 2
集群的 fsid 。可从 monmap （ \fB\-\-monmap <path>\fP ）中获得或直接用 \fB\-\-fsid <uuid>\fP 指定。
.IP \(bu 2
一连串监视器及其地址。这些监视器可来源于 monmap （ \fB\-\-monmap <path>\fP ）、 \fBmon host\fP 配置（在 \fIceph.conf\fP 里或通过 \fB\-m host1,host2,...\fP ）或 \fIceph.conf\fP 中的 \fBmon addr\fP 行。如果这个监视器将作为新 Ceph 集群监视器法定人数的一部分，还必须放进初始列表中。匹配地址时，可以用 \fBpublic addr\fP 或 \fBpublic subnet\fP 。
.IP \(bu 2
监视器私钥 \fBmon.\fP 。必须包含在 \fB\-\-keyring <path>\fP 所提供的密钥环内。
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-keyring
指定 \fB\-\-mkfs\fP 所需的密钥环。
.UNINDENT
.SH 使用范围
.sp
\fBceph\-mon\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8),
ceph\-mds(8),
ceph\-osd(8)
.SH 提纲
.nf
\fBceph\-osd\fP \-i \fIosdnum\fP [ \-\-osd\-data \fIdatapath\fP ] [ \-\-osd\-journal
\fIjournal\fP ] [ \-\-mkfs ] [ \-\-mkjournal ] [\-\-flush\-journal] [\-\-check\-allows\-journal] [\-\-check\-wants\-journal] [\-\-check\-needs\-journal] [ \-\-mkkey ]
.fi
.sp
.SH 描述
.sp
\fBceph\-osd\fP 是 Ceph 分布式文件系统的对象存储守护进程。它负责把对象存储到本地文件系统，并使之通过网络可访问。
.sp
\fIdatapath\fP 参数应该是 xfs 文件系统上保存对象数据的一个目录。日志是可选的，只有它位于非数据盘的低延时设备上（理想中应该是
NVRAM ）时才会达到最佳性能。
.SH 选项
.INDENT 0.0
.TP
.B \-f, \-\-foreground
前台：启动后不要作为守护进程，仍在前台运行。不要生成 PID 文件。通过 ceph\-run(8) 运行时此选项有用。
.UNINDENT
.INDENT 0.0
.TP
.B \-d
调试模式：类似 \fB\-f\fP ，还会把所有日志发到了标准错误。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-setuser userorgid
启动后设置 UID 。如果指定的是用户名，会查询用户记录以获取
UID 及其 GID ，同时设置 GID ，除非还指定了 \-\-setgroup 选项。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-setgroup grouporgid
启动后设置 GID 。如果指定的是组名，会查询组记录以获取 GID 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-osd\-data osddata
把对象存储在 \fIosddata\fP 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-osd\-journal journal
把日志更新到 \fIjournal\fP 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-check\-wants\-journal
检查下是否需要日志。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-check\-allows\-journal
检查是否允许启用日志。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-check\-needs\-journal
检查日志是否是必需的。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-mkfs
创建空的对象仓库。如果定义了日志，也同时初始化。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-mkkey
生成新的私钥。通常和 \fB\-\-mkfs\fP 一起使用，因为与 ceph\-authtool(8) 生成密钥相比此选项更便捷。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-mkjournal
创建适用于已有对象仓库的新日志文件。常用于因硬盘或文件系统故障时导致的日志设备或文件损坏。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-flush\-journal
把日志刷回永久存储，它运行于前台，这样你就能知道它何时完成。适用于你想调整日志尺寸或以其他方式销毁它时：此功能可保证不丢数据。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-get\-cluster\-fsid
打印集群的 fsid (uuid) 然后退出。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-get\-osd\-fsid
打印 OSD 的 fsid 然后退出。 OSD 的 UUID 是在创建文件系统（ \-\-mkfs ）时生成的，而且对这个特定的 OSD 例程来说是惟一的。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-get\-journal\-fsid
打印日志的 UUID 。在新建文件系统（ \-\-mkfs ）时设置了日志 fsid 以与 OSD 相配。
.UNINDENT
.INDENT 0.0
.TP
.B \-c ceph.conf, \-\-conf=ceph.conf
用 \fIceph.conf\fP 配置文件而非默认的 \fB/etc/ceph/ceph.conf\fP 来确定运行时配置。
.UNINDENT
.INDENT 0.0
.TP
.B \-m monaddress[:port]
连接到指定监视器（而非到 \fBceph.conf\fP 里找）。
.UNINDENT
.SH 使用范围
.sp
\fBceph\-osd\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8),
ceph\-mds(8),
ceph\-mon(8),
ceph\-authtool(8)
.SH 提纲
.nf
\fBceph\-post\-file\fP [\-d \fIdescription] [\-u *user\fP] \fIfile or dir\fP ...
.fi
.sp
.SH 描述
.sp
\fBceph\-post\-file\fP 可把文件或目录上传到 ceph.com 让 Ceph 开发者稍后分析。
.sp
每次调用都会把文件或目录上传到一个带惟一标签的独立目录。此标签可共享给开发者或在缺陷报告（ \fI\%http://tracker.ceph.com/\fP ）里引用。一旦上传完成，目录就被标记为不可读且不可写，以防其它用户访问或修改。
.SH 警告
.sp
上传的数据做了基本的防护措施，只对有权限访问 ceph.com 基础设施的开发者可见。然而，用户自己也要再三考虑并采取恰当的预防措施，然后再上传（潜在的）敏感数据（例如包含 Ceph 密钥的日志或数据目录）。
.SH 选项
.INDENT 0.0
.TP
.B \-d *description*, \-\-description *description*
给此次上传加个简短的描述，这是引用缺陷号码的最佳位置。无默认值。
.UNINDENT
.INDENT 0.0
.TP
.B \-u *user*
设置此上传的用户元数据。默认为 \fIwhoami\(ga@\(gahostname \-f\fP 。
.UNINDENT
.SH 实例
.sp
上传单个日志文件：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-post\-file /var/log/ceph/ceph\-mon.\(gahostname\(ga.log
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
上传几个目录：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-post\-file \-d \(aqmon data directories\(aq /var/log/ceph/mon/*
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 使用范围
.sp
\fBceph\-post\-file\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8),
ceph\-debugpack(8),
.SH 提纲
.nf
\fBceph\-rbdnamer\fP \fInum\fP
.fi
.sp
.SH 描述
.sp
\fBceph\-rbdnamer\fP 把指定 RBD 设备所属的存储池和映像名打印到标准输出，以便 udev （使用类似如下的规则）设置设备的符号链接：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
KERNEL=="rbd[0\-9]*", PROGRAM="/usr/bin/ceph\-rbdnamer %n", SYMLINK+="rbd/%c{1}/%c{2}"
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 使用范围
.sp
\fBceph\-rbdnamer\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
rbd(8),
ceph(8)
.SH 提纲
.nf
\fBceph\-run\fP \fIcommand\fP ...
.fi
.sp
.SH 描述
.sp
\fBceph\-run\fP 是个简单的壳子，它会在守护进程异常退出时重启它，异常退出时的信号（有 3, 4, 5, 6, 8, 11 ）会表明它崩溃了、并有可能产生了核心转储。
.sp
此命令会在前台运行守护进程，对于 Ceph 守护进程来说就相当于加了 \fB\-f\fP 选项。
.SH 选项
.sp
无
.SH 使用范围
.sp
\fBceph\-run\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8),
ceph\-mon(8),
ceph\-mds(8),
ceph\-osd(8)
.SH 提纲
.nf
\fBceph\-syn\fP [ \-m \fImonaddr\fP:\fIport\fP ] \-\-syn \fIcommand\fP \fI\&...\fP
.fi
.sp
.SH 描述
.sp
\fBceph\-syn\fP 是个适用于 Ceph 分布式文件系统的简单的人造载荷生成器。它通过用户空间客户端库在当前运行着的文件系统上生成简单的载荷，此文件系统不必通过 ceph\-fuse(8) 或内核客户端挂载。
.sp
一或多个 \fB\-\-syn\fP 命令参数规定特定的载荷，具体文档如下。
.SH 选项
.INDENT 0.0
.TP
.B \-d
启动后离开控制台并进入后台。
.UNINDENT
.INDENT 0.0
.TP
.B \-c ceph.conf, \-\-conf=ceph.conf
启动时用 \fIceph.conf\fP 配置文件而非默认的 \fB/etc/ceph/ceph.conf\fP 来确定监视器地址。
.UNINDENT
.INDENT 0.0
.TP
.B \-m monaddress[:port]
连接到指定监视器（而不是在 \fBceph.conf\fP 里查找）。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-num_client num
模拟 num 个不同的客户端，都位于独立的线程中。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-syn workloadspec
运行给定载荷。可以指定任意多次，通常依次被运行。
.UNINDENT
.SH 载荷
.sp
命令行中每个载荷前都要加 \fB\-\-syn\fP 。下面是个不太完整的列表。
.INDENT 0.0
.TP
\fBmknap\fP \fIpath\fP \fIsnapname\fP
在 \fIpath\fP 下创建名为 \fIsnapname\fP 的快照。
.TP
\fBrmsnap\fP \fIpath\fP \fIsnapname\fP
删除 \fIpath\fP 路径下名为 \fIsnapname\fP 的快照。
.TP
\fBrmfile\fP \fIpath\fP
删除或断链 \fIpath\fP 。
.TP
\fBwritefile\fP \fIsizeinmb\fP \fIblocksize\fP
创建一个文件，以我们的客户端 ID 命名，写入 \fIblocksize\fP 个尺寸为 \fIsizeinmb\fP MB 的数据块。
.TP
\fBreadfile\fP \fIsizeinmb\fP \fIblocksize\fP
读文件，以我们的客户端 ID 命名，写入 \fIblocksize\fP 个尺寸为 \fIsizeinmb\fP MB 的数据块。
.TP
\fBrw\fP \fIsizeinmb\fP \fIblocksize\fP
写文件，然后再读出，像上面的一样。
.TP
\fBmakedirs\fP \fInumsubdirs\fP \fInumfiles\fP \fIdepth\fP
创建深度为 \fIdepth\fP 级的分级目录，各目录有 \fInumsubdirs\fP 个子目录和 \fInumfiles\fP 个文件。
.TP
\fBwalk\fP
递归地遍历文件系统（类似 find ）。
.UNINDENT
.SH 使用范围
.sp
\fBceph\-syn\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8),
ceph\-fuse(8)
.SH 提纲
.nf
\fBceph\fP \fBauth\fP [ \fIadd\fP | \fIcaps\fP | \fIdel\fP | \fIexport\fP | \fIget\fP | \fIget\-key\fP | \fIget\-or\-create\fP | \fIget\-or\-create\-key\fP | \fIimport\fP | \fIlist\fP | \fIprint\-key\fP | \fIprint_key\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBcompact\fP
.fi
.sp
.nf
\fBceph\fP \fBconfig\-key\fP [ \fIdel\fP | \fIexists\fP | \fIget\fP | \fIlist\fP | \fIdump\fP | \fIput\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBdaemon\fP \fI<name>\fP | \fI<path>\fP \fI<command>\fP ...
.fi
.sp
.nf
\fBceph\fP \fBdaemonperf\fP \fI<name>\fP | \fI<path>\fP [ \fIinterval\fP [ \fIcount\fP ] ]
.fi
.sp
.nf
\fBceph\fP \fBdf\fP \fI{detail}\fP
.fi
.sp
.nf
\fBceph\fP \fBfs\fP [ \fIls\fP | \fInew\fP | \fIreset\fP | \fIrm\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBfsid\fP
.fi
.sp
.nf
\fBceph\fP \fBhealth\fP \fI{detail}\fP
.fi
.sp
.nf
\fBceph\fP \fBheap\fP [ \fIdump\fP | \fIstart_profiler\fP | \fIstop_profiler\fP | \fIrelease\fP | \fIstats\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBinjectargs\fP \fI<injectedargs>\fP [ \fI<injectedargs>\fP\&... ]
.fi
.sp
.nf
\fBceph\fP \fBlog\fP \fI<logtext>\fP [ \fI<logtext>\fP\&... ]
.fi
.sp
.nf
\fBceph\fP \fBmds\fP [ \fIcompat\fP | \fIdeactivate\fP | \fIfail\fP | \fIrm\fP | \fIrmfailed\fP | \fIset_state\fP | \fIstat\fP | \fItell\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBmon\fP [ \fIadd\fP | \fIdump\fP | \fIgetmap\fP | \fIremove\fP | \fIstat\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBmon_status\fP
.fi
.sp
.nf
\fBceph\fP \fBosd\fP [ \fIblacklist\fP | \fIblocked\-by\fP | \fIcreate\fP | \fInew\fP | \fIdeep\-scrub\fP | \fIdf\fP | \fIdown\fP | \fIdump\fP | \fIerasure\-code\-profile\fP | \fIfind\fP | \fIgetcrushmap\fP | \fIgetmap\fP | \fIgetmaxosd\fP | \fIin\fP | \fIls\fP | \fIlspools\fP | \fImap\fP | \fImetadata\fP | \fIok\-to\-stop\fP | \fIout\fP | \fIpause\fP | \fIperf\fP | \fIpg\-temp\fP | \fIforce\-create\-pg\fP | \fIprimary\-affinity\fP | \fIprimary\-temp\fP | \fIrepair\fP | \fIreweight\fP | \fIreweight\-by\-pg\fP | \fIrm\fP | \fIdestroy\fP | \fIpurge\fP | \fIsafe\-to\-destroy\fP | \fIscrub\fP | \fIset\fP | \fIsetcrushmap\fP | \fIsetmaxosd\fP  | \fIstat\fP | \fItree\fP | \fIunpause\fP | \fIunset\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBosd\fP \fBcrush\fP [ \fIadd\fP | \fIadd\-bucket\fP | \fIcreate\-or\-move\fP | \fIdump\fP | \fIget\-tunable\fP | \fIlink\fP | \fImove\fP | \fIremove\fP | \fIrename\-bucket\fP | \fIreweight\fP | \fIreweight\-all\fP | \fIreweight\-subtree\fP | \fIrm\fP | \fIrule\fP | \fIset\fP | \fIset\-tunable\fP | \fIshow\-tunables\fP | \fItunables\fP | \fIunlink\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBosd\fP \fBpool\fP [ \fIcreate\fP | \fIdelete\fP | \fIget\fP | \fIget\-quota\fP | \fIls\fP | \fImksnap\fP | \fIrename\fP | \fIrmsnap\fP | \fIset\fP | \fIset\-quota\fP | \fIstats\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBosd\fP \fBtier\fP [ \fIadd\fP | \fIadd\-cache\fP | \fIcache\-mode\fP | \fIremove\fP | \fIremove\-overlay\fP | \fIset\-overlay\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBpg\fP [ \fIdebug\fP | \fIdeep\-scrub\fP | \fIdump\fP | \fIdump_json\fP | \fIdump_pools_json\fP | \fIdump_stuck\fP | \fIgetmap\fP | \fIls\fP | \fIls\-by\-osd\fP | \fIls\-by\-pool\fP | \fIls\-by\-primary\fP | \fImap\fP | \fIrepair\fP | \fIscrub\fP | \fIstat\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBquorum\fP [ \fIenter\fP | \fIexit\fP ]
.fi
.sp
.nf
\fBceph\fP \fBquorum_status\fP
.fi
.sp
.nf
\fBceph\fP \fBreport\fP { \fI<tags>\fP [ \fI<tags>...\fP ] }
.fi
.sp
.nf
\fBceph\fP \fBscrub\fP
.fi
.sp
.nf
\fBceph\fP \fBstatus\fP
.fi
.sp
.nf
\fBceph\fP \fBsync\fP \fBforce\fP {\-\-yes\-i\-really\-mean\-it} {\-\-i\-know\-what\-i\-am\-doing}
.fi
.sp
.nf
\fBceph\fP \fBtell\fP \fI<name (type.id)> <args> [<args>...]\fP
.fi
.sp
.nf
\fBceph\fP \fBversion\fP
.fi
.sp
.SH 描述
.sp
\fBceph\fP 是个控制工具，可用于手动部署和维护 Ceph 集群。它提供的多种工具可用于部署监视器、 OSD 、归置组、 MDS 和维护、管理整个集群。
.SH 命令
.SS auth
.sp
管理认证密钥。用于给某个具体实体（如监视器或 OSD ）增加、删除、导出或更新认证密钥。还需额外加子命令。
.sp
子命令 \fBadd\fP 用于为特定实体增加认证信息，这些信息可从文件读入，若未在命令行指定密钥（和、或此密钥的能力）将生成随机密钥。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth add <entity> {<caps> [<caps>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBcaps\fP 把 \fBname\fP 的能力更新为命令行中指定的。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth caps <entity> <caps> [<caps>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdel\fP 删除 \fBname\fP 的所有能力。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth del <entity>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBexport\fP 把指定实体写入密钥环，若未指定则写入主密钥环。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth export {<entity>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBget\fP 把请求到的密钥写入密钥环文件。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth get <entity>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBget\-key\fP 显示所请求的密钥。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth get\-key <entity>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBget\-or\-create\fP 用于为特定实体增加认证信息，这些信息可从文件读入，若未在命令行指定密钥（和、或此密钥的能力）将生成随机密钥。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth get\-or\-create <entity> {<caps> [<caps>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBget\-or\-create\-key\fP 根据命令行指定的系统、能力对，为 \fBname\fP 获取或创建密钥。若密钥已存在，任何指定的能力必须与当前已有能力一致。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth get\-or\-create\-key <entity> {<caps> [<caps>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBimport\fP 从输入文件读入密钥环。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth import
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\fP 罗列认证状态。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth ls
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBprint\-key\fP 显示请求的密钥。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth print\-key <entity>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBprint_key\fP 显示请求的密钥。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth print_key <entity>
.ft P
.fi
.UNINDENT
.UNINDENT
.SS compact
.sp
让监视器压缩其 leveldb 存储。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph compact
.ft P
.fi
.UNINDENT
.UNINDENT
.SS config\-key
.sp
管理配置密钥。需额外指定子命令。
.sp
子命令 \fBdel\fP 用于删除配置密钥。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config\-key del <key>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBexists\fP 用于检查配置密钥是否存在。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config\-key exists <key>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBget\fP 用于获取配置密钥。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config\-key get <key>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBlist\fP 罗列配置密钥。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config\-key ls
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdump\fP 倒出配置中的所有键及其值。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config\-key dump
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\fP 上传配置密钥及其内容。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config\-key set <key> {<val>}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS df
.sp
显示集群空闲空间状态。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph df {detail}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS features
.sp
查看所有已连接守护进程、以及连入集群的各客户端的版本号及其功能，还有各功能、版本号集合对应的（守护进程、客户端）数量。
Ceph 的各个版本都有不同的功能集，以功能位掩码表示。新集群功能要求客户端也支持这些功能，否则不允许它们连接这些新功能。因为新功能或能力是系统升级后才启用的，（新集群）会阻止老客户端连接。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph features
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fs
.sp
用于管理 cephfs 文件系统，需额外加子命令。
.sp
子命令 \fBls\fP 用于罗列文件系统。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph fs ls
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBnew\fP 用指定的存储池 <metadata> 和 <data> 创建新文件系统。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph fs new <fs_name> <metadata> <data>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBreset\fP 仅适用于灾难恢复：重置成单 MDS 运行图。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph fs reset <fs_name> {\-\-yes\-i\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrm\fP 用于禁用指定文件系统。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph fs rm <fs_name> {\-\-yes\-i\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fsid
.sp
显示集群的 FSID/UUID 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph fsid
.ft P
.fi
.UNINDENT
.UNINDENT
.SS health
.sp
显示集群健康状况。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph health {detail}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS heap
.sp
显示堆栈使用信息（编译时启用了 tcmalloc 支持才可用）
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph heap dump|start_profiler|stop_profiler|release|stats
.ft P
.fi
.UNINDENT
.UNINDENT
.SS injectargs
.sp
向监视器注入配置参数。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph injectargs <injected_args> [<injected_args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS log
.sp
把指定文本记录到监视器日志中。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph log <logtext> [<logtext>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS mds
.sp
用于元数据服务器的配置和管理，需额外指定子命令。
.sp
子命令 \fBcompat\fP 管理兼容功能，需额外指定子命令。
.sp
子命令 \fBrm_compat\fP 可删除兼容功能。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds compat rm_compat <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrm_incompat\fP 可删除不兼容的功能。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds compat rm_incompat <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBshow\fP 可查看 mds 的兼容性选项。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds compat show
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdeactivate\fP 可停止 mds 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds deactivate <who>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBfail\fP 强制把 mds 状态设置为失效。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds fail <who>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrm\fP 用于删除不活跃的 mds 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds rm <int[0\-]> <name> (type.id)>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrmfailed\fP 用于删除失效的 mds 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds rmfailed <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset_state\fP 把 mds 状态从 <gid> 改为 <numeric\-state> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds set_state <int[0\-]> <int[0\-20]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBstat\fP 显示 MDS 状态。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds stat
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBtell\fP 用于向某个 mds 发送命令。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds tell <who> <args> [<args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS mon
.sp
用于监视器的配置和管理，需额外指定子命令。
.sp
子命令 \fBadd\fP 新增名为 <name> 的监视器，地址为 <addr> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mon add <name> <IPaddr[:port]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdump\fP 转储格式化的 monmap ， epoch 号可选。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mon dump {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBgetmap\fP 用于获取 monmap 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mon getmap {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBremove\fP 用于删除名为 <name> 的监视器。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mon remove <name>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBstat\fP 汇总监视器状态。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mon stat
.ft P
.fi
.UNINDENT
.UNINDENT
.SS mon_status
.sp
报告监视器状态。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mon_status
.ft P
.fi
.UNINDENT
.UNINDENT
.SS mgr
.sp
Ceph 管理器守护进程的配置和管理。
.sp
子命令 \fBdump\fP 转储最新的 MgrMap ，其中有活跃的和备用的管理器守护进程。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mgr dump
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBfail\fP 可把一个管理器守护进程标记为已失效，并把它从管理器运行图中删掉。如果它是活跃管理器，将会有一个备机顶替它。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mgr fail <name>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBmodule ls\fP 可罗列当前已启用的管理器模块（插件）。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mgr module ls
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBmodule enable\fP 可启用一个管理器模块。可用模块在
MgrMap 内，可以用 \fBmgr dump\fP 查看。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mgr module enable <module>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBmodule disable\fP 可禁用当前活跃的管理器模块。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mgr module disable <module>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBmetadata\fP 可显示所有管理器守护进程的元数据；如果指定了名字，就只显示它的。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mgr metadata [name]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBversions\fP 可显示所有在运行守护进程的版本个数。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mgr versions
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBcount\-metadata\fP 可显示任意守护进程的元数据字段个数。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mgr count\-metadata <field>
.ft P
.fi
.UNINDENT
.UNINDENT
.SS osd
.sp
用于配置和管理 OSD ，需额外指定子命令。
.sp
子命令 \fBblacklist\fP 用于管理客户端黑名单，需额外加子命令。
.sp
子命令 \fBadd\fP 用于把 <addr> 加入黑名单（可指定时间，从现在起 <expire> 秒）。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd blacklist add <EntityAddr> {<float[0.0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\fP 列出进黑名单的客户端。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd blacklist ls
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrm\fP 从黑名单里删除 <addr> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd blacklist rm <EntityAddr>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBblocked\-by\fP 用于罗列哪些 OSD 在阻塞互联。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd blocked\-by
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBcreate\fP 用于新建 OSD ， UUID 和 ID 是可选的。
.sp
从 Luminous 版起，此命令已\fB废弃\fP，未来会删除。
.sp
请改用 \fBnew\fP 子命令。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd create {<uuid>} {<id>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBnew\fP 可用来创建新 OSD 或者重新创建之前销毁的已经分配过 \fIid\fP 的 OSD ；这个新 OSD 会用指定的 \fIuuid\fP ，此命令还需指定一个 JSON 文件，其内有认证实体 \fIclient.osd.<id>\fP 的
base64 编码 cephx 密钥；还有些可选项，如访问 dm\-crypt 密码箱的
base64 编码 cephx 密钥、和一个 dm\-crypt 密钥。指定 dm\-crypt
密钥时，还必须同时指定密码箱的 cephx 密钥。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd new {<uuid>} {<id>} \-i {<params.json>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
JSON 文件内的参数是可选的，但是如果设置了，就必须遵守下面的几种格式之一：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "cephx_secret": "AQBWtwhZdBO5ExAAIDyjK2Bh16ZXylmzgYYEjg==",
    "crush_device_class": "myclass"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
或者：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "cephx_secret": "AQBWtwhZdBO5ExAAIDyjK2Bh16ZXylmzgYYEjg==",
    "cephx_lockbox_secret": "AQDNCglZuaeVCRAAYr76PzR1Anh7A0jswkODIQ==",
    "dmcrypt_key": "<dm\-crypt key>",
    "crush_device_class": "myclass"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
或者：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "crush_device_class": "myclass"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBcrush_device_class\fP 属性是可选的；指定后，它将是新 OSD 的初始 CRUSH 设备类。
.sp
子命令 \fBcrush\fP 用于 CRUSH 管理，需额外指定子命令。
.sp
子命令 \fBadd\fP 可用于新增或更新 <name> 的 crushmap 位置及权重，权重改为 <weight> 、位置为 <args> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush add <osdname (id|osd.id)> <float[0.0\-]> <args> [<args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBadd\-bucket\fP 可新增没有父级（可能是 root ）、类型为 <type> 、名为 <name> 的 crush 桶。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush add\-bucket <name> <type>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBcreate\-or\-move\fP 用于创建名为 <name> 、权重为 <weight> 的条目并放置到 <args> ，若已存在则移动到指定位置 <args> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush create\-or\-move <osdname (id|osd.id)> <float[0.0\-]>
<args> [<args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdump\fP 用于转储 crush 图。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush dump
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBget\-tunable\fP 用于获取 CRUSH 可调值 straw_calc_version 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush get\-tunable straw_calc_version
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBlink\fP 用于把已存在条目 <name> 链接到 <args> 位置下。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush link <name> <args> [<args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBmove\fP 可把已有条目 <name> 移动到 <args> 位置。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush move <name> <args> [<args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBremove\fP 把 crush 图中（任意位置，或 <ancestor> 之下的）的 <name> 删掉。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush remove <name> {<ancestor>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrename\-bucket\fP 可把桶 <srcname> 重命名为 <dstname> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rename\-bucket <srcname> <dstname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBreweight\fP 把 crush 图中 <name> 的权重改为 <weight> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush reweight <name> <float[0.0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBreweight\-all\fP 重新计算树的权重，以确保权重之和没算错。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush reweight\-all
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBreweight\-subtree\fP 用于把 CRUSH 图内 <name> 之下的所有叶子条目的权重改为 <weight> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush reweight\-subtree <name> <weight>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrm\fP 把 crush 图中（任意位置，或 <ancestor> 之下的）的 <name> 删掉。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rm <name> {<ancestor>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrule\fP 用于创建 crush 规则，需额外加子命令。
.sp
子命令 \fBcreate\-erasure\fP 可为纠删码存储池（用 <profile> 创建的））创建名为 <name> 的 crush 规则，默认为 default 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rule create\-erasure <name> {<profile>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBcreate\-simple\fP 创建从 <root> 开始、名为 <name> 的 crush 规则，副本将跨 <type> 类型进行散布，选择模式为 <firstn|indep> （默认 firstn ，indep 更适合纠删码存储池）。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rule create\-simple <name> <root> <type> {firstn|indep}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdump\fP 转储名为 <name> 的 crush 规则，默认全部转储。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rule dump {<name>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\fP 罗列 crush 规则。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rule ls
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrm\fP 删除 crush 规则 <name> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rule rm <name>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\fP 单独使用，把输入文件设置为 crush 图。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush set
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\fP 为 osdname 或 osd.id 更新 crush 图的位置和权重信息，把名为 <name> 的 OSD 权重设置为 <weight> 、位置设置为 <args> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush set <osdname (id|osd.id)> <float[0.0\-]> <args> [<args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\-tunable\fP 把可调值 <tunable> 设置为 <value> 。唯一能设置的可调值是 straw_calc_version 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush set\-tunable straw_calc_version <value>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBshow\-tunables\fP 显示当前的 crush 可调值。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush show\-tunables
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBtree\fP 用树状视图显示各 crush 桶、及各条目。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush tree
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBtunables\fP 设置 <profile> 中的 crush 可调值。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush tunables legacy|argonaut|bobtail|firefly|hammer|optimal|default
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBunlink\fP 从 crush 图中解链接出 <name> （任意位置，或 <ancestor> 之下的）。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush unlink <name> {<ancestor>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdf\fP 用于显示 OSD 利用率。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd df {plain|tree}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdeep\-scrub\fP 可启动指定 OSD 的深度洗刷。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd deep\-scrub <who>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdown\fP 把 osd(s) <id> [<id>...] 状态设置为 down 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd down <ids> [<ids>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdump\fP 打印 OSD 图汇总。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd dump {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBerasure\-code\-profile\fP 用于管理纠删码配置，需额外加子命令。
.sp
子命令 \fBget\fP 读取纠删码配置 <name> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd erasure\-code\-profile get <name>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\fP 罗列所有纠删码配置。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd erasure\-code\-profile ls
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrm\fP 删除纠删码配置 <name> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd erasure\-code\-profile rm <name>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\fP 用给定的参数 [<key[=value]> ...] 创建纠删码配置 <name> 。末尾加 \-\-force 可覆盖已有配置（慎用）。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd erasure\-code\-profile set <name> {<profile> [<profile>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBfind\fP 从 CRUSH 图中找到 osd <id> 并显示其位置。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd find <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBgetcrushmap\fP 获取 CRUSH 图。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd getcrushmap {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBgetmap\fP 获取 OSD 图。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd getmap {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBgetmaxosd\fP 显示最大 OSD 惟一标识符。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd getmaxosd
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBin\fP 把给出的 OSD <id> [<id>...] 标识为 in 状态。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd in <ids> [<ids>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBlost\fP 把 OSD 标识为永久丢失。如果没有多个副本，此命令会导致数据丢失，慎用。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd lost <int[0\-]> {\-\-yes\-i\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\fP 显示所有 OSD 的惟一标识符。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd ls {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBlspools\fP 罗列存储池。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd lspools {<int>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBmap\fP 在 <pool> 存储池中找 <object> 对象所在的归置组号码。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd map <poolname> <objectname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBmetadata\fP 为 osd <id> 取出元数据。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd metadata {int[0\-]} (default all)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBout\fP 把指定 OSD <id> [<id>...] 的状态设置为 out 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd out <ids> [<ids>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBok\-to\-stop\fP 用于检查一些 OSD 是否能停止，而不会马上让其数据不可用。也就是说，尽管在降级模式（但还活跃着）下由于某些 PG 的失效导致数据冗余性降低了，所有数据仍然可读和可写。如果可以停止这些 OSD ，它就会返回一个成功代码；如果不行或者现在对于如何描述还没头绪，就返回一个错误代码和提示性消息。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd ok\-to\-stop <id> [<ids>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBpause\fP 暂停 osd 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pause
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBperf\fP 打印 OSD 的性能统计摘要。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd perf
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBpg\-temp\fP 设置 pg_temp 映射 pgid:[<id> [<id>...]] ，适用于开发者。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pg\-temp <pgid> {<id> [<id>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBforce\-create\-pg\fP 可强行创建 pg <pgid> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd force\-create\-pg <pgid>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBpool\fP 用于管理数据存储池，需额外加子命令。
.sp
子命令 \fBcreate\fP 创建存储池。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool create <poolname> <int[0\-]> {<int[0\-]>} {replicated|erasure}
{<erasure_code_profile>} {<ruleset>} {<int>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdelete\fP 删除存储池。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool delete <poolname> {<poolname>} {\-\-yes\-i\-really\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBget\fP 获取存储池参数 <var> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool get <poolname> size|min_size|pg_num|
pgp_num|crush_ruleset|auid|write_fadvise_dontneed
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
以下命令只适用于分层存储池：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool get <poolname> hit_set_type|hit_set_period|hit_set_count|hit_set_fpp|
target_max_objects|target_max_bytes|cache_target_dirty_ratio|cache_target_dirty_high_ratio|
cache_target_full_ratio|cache_min_flush_age|cache_min_evict_age|
min_read_recency_for_promote|hit_set_grade_decay_rate|hit_set_search_last_n
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
以下命令只适用于纠删码存储池：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool get <poolname> erasure_code_profile
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBget\-quota\fP 获取存储池的对象或字节数限额。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool get\-quota <poolname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\fP 用于罗列存储池。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool ls {detail}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBmksnap\fP 拍下存储池 <pool> 的快照 <snap> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool mksnap <poolname> <snap>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrename\fP 把存储池 <srcpool> 重命名为 <destpool> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool rename <poolname> <poolname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrmsnap\fP 删除存储池 <pool> 的快照 <snap> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool rmsnap <poolname> <snap>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\fP 把存储池参数 <var> 的值设置为 <val> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool set <poolname> size|min_size|pg_num|
pgp_num|crush_ruleset|hashpspool|nodelete|nopgchange|nosizechange|
hit_set_type|hit_set_period|hit_set_count|hit_set_fpp|debug_fake_ec_pool|
target_max_bytes|target_max_objects|cache_target_dirty_ratio|
cache_target_dirty_high_ratio|
cache_target_full_ratio|cache_min_flush_age|cache_min_evict_age|auid|
min_read_recency_for_promote|write_fadvise_dontneed|hit_set_grade_decay_rate|
hit_set_search_last_n
<val> {\-\-yes\-i\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\-quota\fP 设置存储池的对象或字节数限额。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool set\-quota <poolname> max_objects|max_bytes <val>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBstats\fP 获取所有或指定存储池的统计信息。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool stats {<name>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBprimary\-affinity\fP 设置主 OSD 亲和性，有效值范围 0.0 <= <weight> <= 1.0
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd primary\-affinity <osdname (id|osd.id)> <float[0.0\-1.0]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBprimary\-temp\fP 设置 primary_temp 映射 pgid:<id>|\-1 ，适用于开发者。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd primary\-temp <pgid> <id>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrepair\fP 让指定 OSD 开始修复。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd repair <who>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBreweight\fP 把 OSD 权重改为 0.0 < <weight> < 1.0 之间的值。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
osd reweight <int[0\-]> <float[0.0\-1.0]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBreweight\-by\-pg\fP 按归置组分布情况调整 OSD 的权重（考虑的过载百分比，默认 120 ）。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd reweight\-by\-pg {<int[100\-]>} {<poolname> [<poolname...]}
{\-\-no\-increasing}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBreweight\-by\-utilization\fP 按利用率调整 OSD 的权重，还需考虑负载比率，默认 120 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd reweight\-by\-utilization {<int[100\-]>}
{\-\-no\-increasing}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrm\fP 删除 OSD 运行图中的 OSD ，其编号为 <id> [<id>...] 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd rm <ids> [<ids>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdestroy\fP 把 OSD \fIid\fP 标记为 \fIdestroyed （已销毁）\fP，并删除与之对应的的 cephx 密钥、以及 dm\-crypt 配置、和守护进程私有的配置条目。
.sp
此命令不会从 crush 中删除这个 OSD ，也不会从 OSD 运行图中删除它；而是，一旦此命令正确无误地执行完，这个 OSD 的状态就是被标记为 \fIdestroyed\fP 。
.sp
要把一个 OSD 标记为已销毁，它必须先被标记为
\fBlost （丢失）\fP。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd destroy <id> {\-\-yes\-i\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBpurge\fP 执行的是 \fBosd destroy\fP 、 \fBosd rm\fP 和
\fBosd crush remove\fP 命令的合体。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd purge <id> {\-\-yes\-i\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBsafe\-to\-destroy\fP 会检查在不降低整体数据冗余度或持久性的前提下，删除或销毁一个 OSD 是否安全。如果绝对安全，它会返回成功码；如果不是、或者现在还不能断定，它会返回错误码和提示消息。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd safe\-to\-destroy <id> [<ids>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBscrub\fP 让指定 OSD 开始洗刷。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd scrub <who>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\fP 设置关键字 <key> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd set full|pause|noup|nodown|noout|noin|nobackfill|
norebalance|norecover|noscrub|nodeep\-scrub|notieragent
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBsetcrushmap\fP 把输入文件设置为 CRUSH 图。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd setcrushmap
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBsetmaxosd\fP 设置最大 OSD 数值。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd setmaxosd <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\-require\-min\-compat\-client\fP 强制集群向后兼容，使之与指定的客户端版本相兼容。用这个子命令无需做破坏当前配置的更改（如 crush 可调值、或使用新功能）。请注意，如果存在与指定版本 <version> 的功能不兼容的已连接守护进程或客户端，这个子命令会失败。要查看已连入集群的所有客户端的功能和版本，请看 \fI\%ceph features\fP 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd set\-require\-min\-compat\-client <version>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBstat\fP 打印 OSD 图摘要。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd stat
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBtier\fP 用于管理（存储池）分级，需额外加子命令。
.sp
子命令 \fBadd\fP 把 <tierpool> （第二个）加到基础存储池 <pool>
（第一个）之前。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tier add <poolname> <poolname> {\-\-force\-nonempty}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBadd\-cache\fP 把尺寸为 <size> 的缓存存储池 <tierpool>
（第二个）加到现有存储池 <pool> （第一个）之前。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tier add\-cache <poolname> <poolname> <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBcache\-mode\fP 设置缓存存储池 <pool> 的缓存模式。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tier cache\-mode <poolname> none|writeback|forward|readonly|
readforward|readproxy
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBremove\fP 删掉基础存储池 <pool> （第一个）的马甲存储池
<tierpool> （第二个）。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tier remove <poolname> <poolname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBremove\-overlay\fP 删除基础存储池 <pool> 的马甲存储池。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tier remove\-overlay <poolname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\-overlay\fP 把 <overlaypool> 设置为基础存储池 <pool>
的马甲存储池。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tier set\-overlay <poolname> <poolname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBtree\fP 打印 OSD 树。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tree {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBunpause\fP 取消 osd 暂停。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd unpause
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBunset\fP 取消设置的关键字 <key> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd unset full|pause|noup|nodown|noout|noin|nobackfill|
norebalance|norecover|noscrub|nodeep\-scrub|notieragent
.ft P
.fi
.UNINDENT
.UNINDENT
.SS pg
.sp
用于管理 OSD 内的归置组，需额外加子命令。
.sp
子命令 \fBdebug\fP 可显示归置组的调试信息。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg debug unfound_objects_exist|degraded_pgs_exist
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdeep\-scrub\fP 开始深度洗刷归置组 <pgid> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg deep\-scrub <pgid>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdump\fP 可显示归置组图的人类可读版本（显示为纯文本时只有 \(aqall\(aq 合法）。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg dump {all|summary|sum|delta|pools|osds|pgs|pgs_brief} [{all|summary|sum|delta|pools|osds|pgs|pgs_brief...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdump_json\fP 只以 json 格式显示归置组图的人类可读版本。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg dump_json {all|summary|sum|delta|pools|osds|pgs|pgs_brief} [{all|summary|sum|delta|pools|osds|pgs|pgs_brief...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdump_pools_json\fP 只以 json 格式显示归置组存储池信息［译者：存疑］。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg dump_pools_json
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdump_stuck\fP 显示卡顿归置组的信息。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg dump_stuck {inactive|unclean|stale|undersized|degraded [inactive|unclean|stale|undersized|degraded...]}
{<int>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBgetmap\fP 获取二进制归置组图，保存到 \-o/stdout 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg getmap
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\fP 可根据指定存储池、 OSD 、状态罗列对应的归置组。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg ls {<int>} {active|clean|down|replay|splitting|
scrubbing|scrubq|degraded|inconsistent|peering|repair|
recovery|backfill_wait|incomplete|stale| remapped|
deep_scrub|backfill|backfill_toofull|recovery_wait|
undersized [active|clean|down|replay|splitting|
scrubbing|scrubq|degraded|inconsistent|peering|repair|
recovery|backfill_wait|incomplete|stale|remapped|
deep_scrub|backfill|backfill_toofull|recovery_wait|
undersized...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\-by\-osd\fP 用于罗列指定 OSD 上的归置组。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg ls\-by\-osd <osdname (id|osd.id)> {<int>}
{active|clean|down|replay|splitting|
scrubbing|scrubq|degraded|inconsistent|peering|repair|
recovery|backfill_wait|incomplete|stale| remapped|
deep_scrub|backfill|backfill_toofull|recovery_wait|
undersized [active|clean|down|replay|splitting|
scrubbing|scrubq|degraded|inconsistent|peering|repair|
recovery|backfill_wait|incomplete|stale|remapped|
deep_scrub|backfill|backfill_toofull|recovery_wait|
undersized...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\-by\-pool\fP 用于罗列存储池 [poolname] 内的归置组。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg ls\-by\-pool <poolstr> {<int>} {active|
clean|down|replay|splitting|
scrubbing|scrubq|degraded|inconsistent|peering|repair|
recovery|backfill_wait|incomplete|stale| remapped|
deep_scrub|backfill|backfill_toofull|recovery_wait|
undersized [active|clean|down|replay|splitting|
scrubbing|scrubq|degraded|inconsistent|peering|repair|
recovery|backfill_wait|incomplete|stale|remapped|
deep_scrub|backfill|backfill_toofull|recovery_wait|
undersized...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\-by\-primary\fP 可罗列主 OSD 为 [osd] 的归置组。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg ls\-by\-primary <osdname (id|osd.id)> {<int>}
{active|clean|down|replay|splitting|
scrubbing|scrubq|degraded|inconsistent|peering|repair|
recovery|backfill_wait|incomplete|stale| remapped|
deep_scrub|backfill|backfill_toofull|recovery_wait|
undersized [active|clean|down|replay|splitting|
scrubbing|scrubq|degraded|inconsistent|peering|repair|
recovery|backfill_wait|incomplete|stale|remapped|
deep_scrub|backfill|backfill_toofull|recovery_wait|
undersized...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBmap\fP 显示归置组到 OSD 的映射关系。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg map <pgid>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrepair\fP 开始修复归置组 <pgid> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg repair <pgid>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBscrub\fP 开始洗刷归置组 <pgid> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg scrub <pgid>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBstat\fP 显示归置组状态。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg stat
.ft P
.fi
.UNINDENT
.UNINDENT
.SS quorum
.sp
让监视器加入或退出法定人数。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph quorum enter|exit
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
注：此命令只对 \fBceph\fP 命令能连接上的监视器管用。如果你想让某个具体的监视器加入或退出法定人数，可以用下面这个命令：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph tell mon.<id> quorum enter|exit
.ft P
.fi
.UNINDENT
.UNINDENT
.SS quorum_status
.sp
报告监视器法定人数状态。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph quorum_status
.ft P
.fi
.UNINDENT
.UNINDENT
.SS report
.sp
报告集群的全部状态，标签字符串可选。
Reports full status of cluster, optional title tag strings.
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph report {<tags> [<tags>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS scrub
.sp
洗刷监视器的存储。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph scrub
.ft P
.fi
.UNINDENT
.UNINDENT
.SS status
.sp
显示集群状态。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph status
.ft P
.fi
.UNINDENT
.UNINDENT
.SS sync force
.sp
强制监视器进行同步、并清除存储。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph sync force {\-\-yes\-i\-really\-mean\-it} {\-\-i\-know\-what\-i\-am\-doing}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tell
.sp
发命令给指定守护进程。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph tell <name (type.id)> <args> [<args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
罗列所有可用的命令。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph tell <name (type.id)> help
.ft P
.fi
.UNINDENT
.UNINDENT
.SS version
.sp
显示监视器守护进程的版本。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph version
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 选项
.INDENT 0.0
.TP
.B \-i infile
指定一个输入文件，它将作为载荷与命令一起传递给监视器集群。仅用于某些特定的监视器命令。
.UNINDENT
.INDENT 0.0
.TP
.B \-o outfile
把响应中监视器集群返回的载荷写入 outfile 文件。只有某些特定的监视器命令（如 psd getmap ）会返回载荷。
.UNINDENT
.INDENT 0.0
.TP
.B \-c ceph.conf, \-\-conf=ceph.conf
用 ceph.conf 配置文件而非默认的 \fB/etc/ceph/ceph.conf\fP 来确定启动时所用的监视器地址。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-id CLIENT_ID, \-\-user CLIENT_ID
用于认证的客户端 ID 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-name CLIENT_NAME, \-n CLIENT_NAME
用于认证的客户端名字。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-cluster CLUSTER
Ceph 集群名字。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-admin\-daemon ADMIN_SOCKET, daemon DAEMON_NAME
提交管理套接字命令。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-admin\-socket ADMIN_SOCKET_NOPE
你也许想要的是 \-\-admin\-daemon 。
.UNINDENT
.INDENT 0.0
.TP
.B \-s, \-\-status
显示集群状态。
.UNINDENT
.INDENT 0.0
.TP
.B \-w, \-\-watch
盯着集群的实时状态变更。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-watch\-debug
盯着调试事件。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-watch\-info
盯着一般信息事件。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-watch\-sec
盯着安全事件。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-watch\-warn
盯着告警事件。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-watch\-error
盯着错误事件。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-version, \-v
显示版本号。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-verbose
使输出更详细。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-concise
使输出简洁些。
.UNINDENT
.INDENT 0.0
.TP
.B \-f {json,json\-pretty,xml,xml\-pretty,plain}, \-\-format
输出格式。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-connect\-timeout CLUSTER_TIMEOUT
设置连接集群的超时值。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-increasing
\fB\-\-no\-increasing\fP 默认是关闭的，所以 \fBreweight\-by\-utilization\fP
或 \fBtest\-reweight\-by\-utilization\fP 命令可以增加 osd 权重。如果运行这些命令时加上这个选项，即使 osd 利用率偏低它也不会增加 osd 权重。
.UNINDENT
.SH 使用范围
.sp
\fBceph\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph\-mon(8),
ceph\-osd(8),
ceph\-mds(8)
.SH 提纲
.nf
\fBcrushtool\fP ( \-d \fImap\fP | \-c \fImap.txt\fP | \-\-build \-\-num_osds \fInumosds\fP
\fIlayer1\fP \fI\&...\fP | \-\-test ) [ \-o \fIoutfile\fP ]
.fi
.sp
.SH 描述
.sp
\fBcrushtool\fP 是 CRUSH 图处理工具，它允许你创建、编译、反编译和测试 CRUSH 图。
.sp
CRUSH 是个伪随机数据分布算法，它能高效地把输入值（它在 Ceph 上下文中对应归置组）映射到异构、结构化的分级设备图中。此算法最初是在下面的论文（虽说已改进过了）中详细描述的：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
http://www.ssrc.ucsc.edu/Papers/weil\-sc06.pdf
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
此工具有四种操作模式。
.INDENT 0.0
.TP
.B \-\-compile|\-c map.txt
把纯文本 map.txt 编译为二进制图文件。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-decompile|\-d map
接受已编译的图，并把它反编译为适合编辑的纯文本源文件。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-build \-\-num_osds {num\-osds} layer1 ...
将用指定分级结构创建图。详细解释见下文。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-test
运行 CRUSH 模拟映射，参数是一系列输入值 \fB[\-\-min\-x,\-\-max\-x]\fP
（默认是 \fB[0,1023]\fP ），这个参数可当作是模拟的归置组。详细解释见下文。
.UNINDENT
.sp
不像其它 Ceph 工具， \fBcrushtool\fP 不接受命令行输入的像
\fB\-\-debug\-crush\fP 这样的通用选项；却可以通过 CEPH_ARGS 环境变量提供。例如，可以这样压制 CRUSH 子系统的所有输出：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
CEPH_ARGS="\-\-debug\-crush 0" crushtool ...
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 用 --TEST 进行测试
.sp
测试模式会采用输入 crush 图（用 \fB\-i map\fP 指定的），并模拟
CRUSH 映射或随机放置（若设置了 \fB\-\-simulate\fP ）。完成后可创建两种报告：
1) \fB\-\-show\-...\fP 选项会把人类可读的信息输出到标准错误；
2) \fB\-\-output\-csv\fP 选项会创建 CSV 文件，具体文档可在
\fB\-\-help\-output\fP 选项中见到。
.sp
注：每个归置组（ PG ）都有一个整数 ID ，可用 \fBceph pg dump\fP 获取（例如 PG 2.2f 意思是存储池 id 为 2 ， PG id 为 32）。存储池和 PG 的 ID 用一个函数连结成一个值，然后传递给 CRUSH 就可以映射到一组 OSD 。 crushtool 不知道什么是 PG 或存储池，它只是对
\fB[\-\-min\-x,\-\-max\-x]\fP 范围内的取值进行模拟映射。
.INDENT 0.0
.TP
.B \-\-show\-statistics
显示分布情况的摘要，例如：
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
rule 1 (metadata) num_rep 5 result size == 5:    1024/1024
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
在如上输出中，规则 \fB1\fP 名字为 \fBmetadata\fP ，在试图把
\fB1024\fP 个值映射为 \fBnum_rep 5\fP 个副本时，最终成功地映射到了 \fBresult size == 5\fP 个设备。如果它最终没能输出映射，假设还需提高\fB尝试\fP次数），就会显示失败情况。比如：
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
rule 1 (metadata) num_rep 10 result size == 8:   4/1024
rule 1 (metadata) num_rep 10 result size == 9:   93/1024
rule 1 (metadata) num_rep 10 result size == 10:  927/1024
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
以上表明，虽然要求的副本数是 \fBnum_rep 10\fP ，但是 \fB1024\fP
个值中只有 \fB4\fP 个（ \fB4/1024\fP ）映射到了 \fBresult size == 8\fP
个设备。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-show\-mappings
显示 \fB[\-\-min\-x,\-\-max\-x]\fP 范围内每个值的映射，例如：
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
CRUSH rule 1 x 24 [11,6]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
显示了值 \fB24\fP 被规则 \fB1\fP 映射到了设备 \fB[11,6]\fP 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-show\-bad\-mappings
查看哪个值的映射数量没达到要求，例如：
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
bad mapping rule 1 x 781 num_rep 7 result [8,10,2,11,6,9]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
表明规则 \fB1\fP 要求映射到 \fB7\fP 个设备，实际上只映射了六个：
\fB[8,10,2,11,6,9]\fP 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-show\-utilization
显示每个设备的期望和实际利用率，各种数量的副本也计算在内。例如：
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
device 0: stored : 951      expected : 853.333
device 1: stored : 963      expected : 853.333
\&...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
表明设备 \fB0\fP 实际存储了 \fB951\fP 个值，本来期望存储 \fB853\fP
个。隐含了 \fB\-\-show\-statistics\fP 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-show\-utilization\-all
显示结果与 \fB\-\-show\-utilization\fP 相同，只是不剔除权重为 0 的设备。隐含了 \fB\-\-show\-statistics\fP 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-show\-choose\-tries
显示要尝试多少次才能映射到设备。例如：
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
0:     95224
1:      3745
2:      2225
\&..
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
表明有 \fB95224\fP 次映射没重试就成功了， \fB3745\fP 次映射尝试一次后成功，等等。显示的最大行数与 \fB\-\-set\-choose\-total\-tries\fP
选项相同。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-output\-csv
在当前目录内创建 CSV 文件用于保存输出信息，具体请参考 \fB\-\-help\-output\fP 。文件被命名为收集统计信息时涉及的规则，比如使用了 metadata 规则时， CSV 文件将会是：
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
metadata\-absolute_weights.csv
metadata\-device_utilization.csv
\&...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
文件的首行是本列的简单描述，例如：
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
metadata\-absolute_weights.csv
Device ID, Absolute Weight
0,1
\&...
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-output\-name NAME
指定了 \fB\-\-output\-csv\fP 选项时生成的文件名要加 \fBNAME\fP 前缀，例如 \fB\-\-output\-name FOO\fP 将创建这些文件：
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
FOO\-metadata\-absolute_weights.csv
FOO\-metadata\-device_utilization.csv
\&...
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
用 \fB\-\-set\-...\fP 选项可修改指定 crush 图内的可调值，在内存中修改。例如：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ crushtool \-i mymap \-\-test \-\-show\-bad\-mappings
bad mapping rule 1 x 781 num_rep 7 result [8,10,2,11,6,9]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
上面的问题可通过增加 \fBchoose\-total\-tries\fP 来修正，如：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ crushtool \-i mymap \-\-test \e
    \-\-show\-bad\-mappings \e
    \-\-set\-choose\-total\-tries 500
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 用 --BUILD 构建新图
.sp
构建模式可生成一个分级图。第一个参数指定了 CRUSH 分级结构中的设备（叶子）数量。每一层都要描述如何分组前一层（或设备）。
.sp
各层都由如下要素组成：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
bucket ( uniform | list | tree | straw ) size
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
这里的 \fBbucket\fP 是本层桶的类型（如 "rack" ）。构建时各桶名
\fBbucket\fP 后将追加一个惟一的数字（如 "rack0" 、 "rack1" ……）。
.sp
第二个组件是桶类型：大多用 \fBstraw\fP 。
.sp
第三个组件是此桶的最大尺寸，为零时表示容量无限。
.SH 实例
.sp
假设我们有 2 行、每行有 2 个机架、每机架有 20 个节点、每个节点有 4 个存储设备用于 OSD 守护进程，这样的配置允许部署 320 个 OSD
守护进程。这里按照机架高 42U ，节点都是 2U 高的，另外空余 2U 装机架交换机。
.sp
要如实展现我们的设备、节点、机架、行构成的分级结构，用此命令：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ crushtool \-o crushmap \-\-build \-\-num_osds 320 \e
       node straw 4 \e
       rack straw 20 \e
       row straw 2 \e
       root straw 0
# id        weight  type name       reweight
\-87 320     root root
\-85 160             row row0
\-81 80                      rack rack0
\-1  4                               node node0
0   1                                       osd.0   1
1   1                                       osd.1   1
2   1                                       osd.2   1
3   1                                       osd.3   1
\-2  4                               node node1
4   1                                       osd.4   1
5   1                                       osd.5   1
\&...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
这样就创建了 CRUSH 规则集，以便测试。此规则集与创建集群时默认创建的规则集相同，可用下面的方法编辑它们：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# 反编译
crushtool \-d crushmap \-o map.txt

# 编辑
emacs map.txt

# 重新编译
crushtool \-c map.txt \-o crushmap
.ft P
.fi
.UNINDENT
.UNINDENT
.SH --TEST 的输出实例
.sp
请到 \fI\%https://github.com/ceph/ceph/blob/master/src/test/cli/crushtool/set\-choose.t\fP
查看 \fBcrushtool \-\-test\fP 命令实例，及其输出。
.SH 使用范围
.sp
\fBcrushtool\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8),
osdmaptool(8),
.SH 作者
.sp
John Wilkins, Sage Weil, Loic Dachary
.SH 提纲
.nf
\fBlibrados\-config\fP [ \-\-version ] [ \-\-vernum ]
.fi
.sp
.SH 描述
.sp
\fBlibrados\-config\fP 工具可查看已安装 \fBlibrados\fP 的相关信息。
.SH 选项
.INDENT 0.0
.TP
.B \-\-version
显示 \fBlibrados\fP 版本号
.UNINDENT
.INDENT 0.0
.TP
.B \-\-vernum
显示 \fBlibrados\fP 版本代码
.UNINDENT
.SH 使用范围
.sp
\fBlibrados\-config\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8),
rados(8)
.SH 提纲
.nf
\fBmonmaptool\fP \fImapfilename\fP [ \-\-clobber ] [ \-\-print ] [ \-\-create ]
[ \-\-add \fIip\fP:\fIport\fP \fI\&...\fP ] [ \-\-rm \fIip\fP:\fIport\fP \fI\&...\fP ]
.fi
.sp
.SH 描述
.sp
\fBmonmaptool\fP 工具用于创建、查看、修改用于 Ceph 分布式存储系统的监视器集群运行图。监视器图只是在 Ceph 分布式系统中定义了几个固定的地址，其他所有守护进程绑定到任意地址、并注册到监视器。
.sp
用 \-\-create 选项创建新图时，会创建新的随机 UUID ，此选项后还应加一或多个监视器地址。
.sp
Ceph 监视器的默认端口是 6789 。
.SH 选项
.INDENT 0.0
.TP
.B \-\-print
在所有修改完成后，打印一份监视器图的纯文本转储。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-clobber
更改时允许 monmaptool 覆盖 mapfilename 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-create
新建一监视器图，它有新的 UUID （用它可创建个新的空 Ceph 文件系统）。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-generate
基于命令行参数或配置文件中的配置生成新 monmap ，配置来源优先级如下：
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP 1. 3
\fB\-\-monmap filename\fP 指定要载入的 monmap
.IP 2. 3
\fB\-\-mon\-host \(aqhost1,ip2\(aq\fP 指定一系列主机或 IP 地址
.IP 3. 3
配置文件中包含 \fBmon addr\fP 选项的 \fB[mon.foo]\fP 段落
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-filter\-initial\-members
用 \fBmon initial members\fP 选项的设置过滤初始 monmap ，不在此列表内的监视器将被删除、没在图内的初始成员将用假地址加入。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-add name ip:port
把指定 ip:port 的监视器加入图中。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rm name
从图中删除 ip:port 监视器。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-fsid uuid
把 fsid 设置为指定的 uuid ，如果 \-\-create 时没指定，将会随机生成一个。
.UNINDENT
.SH 实例
.sp
新建一个有三个监视器的新图（为新的 Ceph 文件系统）：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
monmaptool  \-\-create  \-\-add  mon.a 192.168.0.10:6789 \e
  \-\-add mon.b 192.168.0.11:6789 \e
  \-\-add mon.c 192.168.0.12:6789 \-\-clobber monmap
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
显示监视器图内容：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
monmaptool \-\-print monmap
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
替换一个监视器：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
monmaptool \-\-rm mon.a \-\-add mon.a 192.168.0.9:6789 \-\-clobber monmap
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 使用范围
.sp
\fBmonmaptool\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8),
crushtool(8),
.SH 提纲
.nf
\fBmount.ceph\fP \fImonaddr1\fP[,\fImonaddr2\fP,...]:/[\fIsubdir\fP] \fIdir\fP [
\-o \fIoptions\fP ]
.fi
.sp
.SH 描述
.sp
\fBmount.ceph\fP 是在 Linux 主机上挂载 Ceph 文件系统的简单助手。它只负责把监视器主机名解析为 IP 地址、从硬盘读取认证密钥，大多数实际工作由 Linux 内核客户端组件完成。事实上，无需认证的 Ceph 文件系统无需 mount.ceph 也能挂载，只要指定监视器 IP 地址即可：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
mount \-t ceph 1.2.3.4:/ mountpoint
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
各监视器地址 monaddr 的格式为 host[:port] ，如果端口未指定，就用默认的 6789 。
.sp
多个监视器地址用逗号分隔。要成功地挂载只需一个监视器即可，客户端将从某个能响应的监视器获知其它监视器。然而最好指定多个监视器，以免挂载时正好赶上那个监视器挂了。
.sp
如果要挂载文件系统的一子集，可指定一个子目录 subdir 。
.sp
mount 助手程序的惯例是前两个选项分别为要挂载的设备和目标路径，其它选项必须位于这些固定参数之后。
.SH 选项
.INDENT 0.0
.TP
\fBwsize\fP
整数（字节数），最大写尺寸。默认：无（回写用较小的 wsize 和条带单元）
.TP
\fBrsize\fP
整数（字节数），最大读尺寸。默认：无
.TP
\fBrasize\fP
整数（字节数），最大预读尺寸， 1024 的倍数，默认： 8388608
(8192*1024)
.TP
\fBosdtimeout\fP
整数（秒）。默认：60
.TP
\fBosdkeepalive\fP
整数。默认：5
.TP
\fBmount_timeout\fP
整数（秒）。默认：60
.TP
\fBosd_idle_ttl\fP
整数（秒）。默认：60
.TP
\fBcaps_wanted_delay_min\fP
整数，能力释放延迟时间。默认：5
.TP
\fBcaps_wanted_delay_max\fP
整数，能力释放延迟时间。默认：60
.TP
\fBcap_release_safety\fP
整数。默认：自行计算
.TP
\fBreaddir_max_entries\fP
整数。默认： 1024
.TP
\fBreaddir_max_bytes\fP
整数。默认： 524288 （ 512*1024 ）
.TP
\fBwrite_congestion_kb\fP
整数（ kb ），运行中的最大回写量，随可用内存变化。默认：根据可用内存计算
.TP
\fBsnapdirname\fP
字符串，为快照的隐藏目录设置个名字。默认： .snap
.TP
\fBname\fP
使用 cephx 认证时的 RADOS 用户名。默认： guest
.TP
\fBsecret\fP
用于 cephx 的密钥。这个选项不安全，因为它把密钥暴露在了命令行，用 secretfile 选项可避免此问题。
.TP
\fBsecretfile\fP
用于 cephx 的密钥文件路径。
.TP
\fBip\fP
本机 IP
.TP
\fBnoshare\fP
创建新客户端例程，而不是和挂载同一集群的例程共享资源。
.TP
\fBdirstat\fP
用 \fIcat dirname\fP 读取文件信息。默认： off
.TP
\fBnodirstat\fP
不用 \fIcat dirname\fP 读取文件信息
.TP
\fBrbytes\fP
目录的 st_size 报告产生于目录内容的递归尺寸。默认： on
.TP
\fBnorbytes\fP
目录的 st_size 无需通过递归目录内容来获取。
.TP
\fBnocrc\fP
写入时不做 crc 校验
.TP
\fBnoasyncreaddir\fP
读目录时不经过 dcache
.UNINDENT
.SH 实例
.sp
挂载整个文件系统：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
mount.ceph monhost:/ /mnt/foo
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
如果有多个监视器：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
mount.ceph monhost1,monhost2,monhost3:/ /mnt/foo
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
如果 ceph\-mon(8) 运行于非默认端口：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
mount.ceph monhost1:7000,monhost2:7000,monhost3:7000:/ /mnt/foo
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
只挂载文件系统命名空间的一部分：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
mount.ceph monhost1:/some/small/thing /mnt/thing
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
假设 mount.ceph(8) 安装正确， mount(8) 应该能自动调用它：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
mount \-t ceph monhost:/ /mnt/foo
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 使用范围
.sp
\fBmount.ceph\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph\-fuse(8),
ceph(8)
.SH 提纲
.nf
\fBosdmaptool\fP \fImapfilename\fP [\-\-print] [\-\-createsimple \fInumosd\fP
[\-\-pgbits \fIbitsperosd\fP ] ] [\-\-clobber]
.fi
.sp
.SH 描述
.sp
\fBosdmaptool\fP 工具可用于创建、查看、修改 Ceph 分布式存储系统的
OSD 集群运行图。很显然，它可用于提取内嵌的 CRUSH 图，或者导入新
CRUSH 图。
.SH 选项
.INDENT 0.0
.TP
.B \-\-print
修改完成后，打印此图的一份纯文本转储。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-clobber
修改时允许 osdmaptool 覆盖 mapfilename 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-import\-crush mapfile
从 mapfile 载入 CRUSH 图并把它嵌入 OSD 图。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-export\-crush mapfile
从 OSD 图提取出 CRUSH 图并写入 mapfile 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-createsimple numosd [\-\-pgbits bitsperosd]
创建有 numosd 个设备的相对通用的 OSD 图。若指定了 \-\-pgbits
选项，每个 OSD 的归置组数量将是 bitsperosd 个位偏移。也就是
pg_num 属性将被设置为 numosd 数值再右移 bitsperosd 位。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-test\-map\-pgs [\-\-pool poolid]
打印出归置组到 OSD 的映射关系。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-test\-map\-pgs\-dump [\-\-pool poolid]
打印出所有归置组及其与 OSD 映射关系的汇总。
.UNINDENT
.SH 实例
.sp
要创建个有 16 个设备的简易图：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
osdmaptool \-\-createsimple 16 osdmap \-\-clobber
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
查看结果：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
osdmaptool \-\-print osdmap
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
要查看存储池 0 的归置组映射情况：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
osdmaptool \-\-test\-map\-pgs\-dump rbd \-\-pool 0

pool 0 pg_num 8
0.0     [0,2,1] 0
0.1     [2,0,1] 2
0.2     [0,1,2] 0
0.3     [2,0,1] 2
0.4     [0,2,1] 0
0.5     [0,2,1] 0
0.6     [0,1,2] 0
0.7     [1,0,2] 1
#osd    count   first   primary c wt    wt
osd.0   8       5       5       1       1
osd.1   8       1       1       1       1
osd.2   8       2       2       1       1
 in 3
 avg 8 stddev 0 (0x) (expected 2.3094 0.288675x))
 min osd.0 8
 max osd.0 8
size 0  0
size 1  0
size 2  0
size 3  8
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B 在上面的输出结果中，
.INDENT 7.0
.IP 1. 3
存储池 0 有 8 个归置组，及后面的两张表：
.IP 2. 3
一张表是归置组。每行表示一个归置组，列分别是：
.INDENT 3.0
.IP \(bu 2
归置组 id ，
.IP \(bu 2
acting set ，和
.IP \(bu 2
主 OSD 。
.UNINDENT
.IP 3. 3
一张表是所有的 OSD 。每行表示一个 OSD ，列分别是：
.INDENT 3.0
.IP \(bu 2
映射到此 OSD 的归置组数量，
.IP \(bu 2
此 OSD 是它所属 acting set 的第一个，这样的归置组数量，
.IP \(bu 2
此 OSD 是归置组的主 OSD ，这样的归置组数量，
.IP \(bu 2
此 OSD 的 CRUSH 权重，还有
.IP \(bu 2
此 OSD 的权重。
.UNINDENT
.IP 4. 3
再看是托管着归置组的 OSD 数量，是 3 个。接下来是
.INDENT 3.0
.IP \(bu 2
avarge, stddev （标准偏差）, stddev/average, expected stddev, expected stddev / average
.IP \(bu 2
min and max
.UNINDENT
.IP 5. 3
映射到 n 个 OSD 的归置组数量。在本例中，全部的 8 个归置组都映射到了 3 个不同的 OSD 。
.UNINDENT
.UNINDENT
.sp
在一个均衡得不太好的集群中，我们也许会看到类似如下的归置组分布统计，其标准偏差是 1.41421 :
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#osd    count   first   primary c wt    wt
osd.0   8       5       5       1       1
osd.1   8       1       1       1       1
osd.2   8       2       2       1       1

#osd    count   first    primary c wt    wt
osd.0   33      9        9       0.0145874     1
osd.1   34      14       14      0.0145874     1
osd.2   31      7        7       0.0145874     1
osd.3   31      13       13      0.0145874     1
osd.4   30      14       14      0.0145874     1
osd.5   33      7        7       0.0145874     1
 in 6
 avg 32 stddev 1.41421 (0.0441942x) (expected 5.16398 0.161374x))
 min osd.4 30
 max osd.1 34
size 00
size 10
size 20
size 364
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 使用范围
.sp
\fBosdmaptool\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8),
crushtool(8),
.SH 提纲
.nf
\fBrados\fP [ \-m \fImonaddr\fP ] [ mkpool | rmpool \fIfoo\fP ] [ \-p | \-\-pool
\fIpool\fP ] [ \-s | \-\-snap \fIsnap\fP ] [ \-i \fIinfile\fP ] [ \-o \fIoutfile\fP ]
\fIcommand\fP ...
.fi
.sp
.SH 描述
.sp
\fBrados\fP 工具可操作 Ceph 对象存储集群（ RADOS ），是 Ceph 分布式存储系统的一部分。
.SH 选项
.INDENT 0.0
.TP
.B \-p pool, \-\-pool pool
操作指定的存储池。大多数命令都得指定此参数。
.UNINDENT
.INDENT 0.0
.TP
.B \-s snap, \-\-snap snap
从指定的存储池快照读出。适用于所有与存储池相关的读操作。
.UNINDENT
.INDENT 0.0
.TP
.B \-i infile
指定输入文件，其内容将作为此命令的载荷发送给监视器集群。仅适用于部分监视器命令。
.UNINDENT
.INDENT 0.0
.TP
.B \-o outfile
把监视器集群返回的载荷写入 outfile 。仅适用于某些会返回载荷的监视器命令（如 osd getmap ）。
.UNINDENT
.INDENT 0.0
.TP
.B \-c ceph.conf, \-\-conf=ceph.conf
用指定的 ceph.conf 配置文件而非默认的 /etc/ceph/ceph.conf
来确定监视器的初始地址。
.UNINDENT
.INDENT 0.0
.TP
.B \-m monaddress[:port]
连接指定监视器（而非通过 ceph.conf 查找）。
.UNINDENT
.INDENT 0.0
.TP
.B \-b block_size
设置块尺寸，适用于 put/get/append 操作、及写入压力测试。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-striper
使用 rados 的条带化 API 而非默认的，支持的操作有 stat 、
get 、 put 、 append 、 truncate 、 rm 、 ls 以及所有与
xattr 相关的操作。
.UNINDENT
.SH 全局命令
.INDENT 0.0
.TP
\fBlspools\fP
罗列对象存储池
.TP
\fBdf\fP
显示利用率统计信息，显示整个系统以及各存储池的磁盘空间（字节数）、对象数量。
.TP
\fBmkpool\fP \fIfoo\fP
创建名为 foo 的存储池。
.TP
\fBrmpool\fP \fIfoo\fP [ \fIfoo\fP \-\-yes\-i\-really\-really\-mean\-it ]
删除存储池 foo （以及其内的所有数据）
.TP
\fBlist\-inconsistent\-pg\fP \fIpool\fP
罗列指定存储池内不一致的归置组。
.TP
\fBlist\-inconsistent\-obj\fP \fIpgid\fP
罗列指定 PG 内不一致的对象。
.TP
\fBlist\-inconsistent\-snapset\fP \fIpgid\fP
罗列指定 PG 内不一致的 snapset 。
.UNINDENT
.SH 特定于存储池的命令
.INDENT 0.0
.TP
\fBget\fP \fIname\fP \fIoutfile\fP
从集群读出名为 name 的对象、并把它写入 outfile 。
.TP
\fBput\fP \fIname\fP \fIinfile\fP [\-\-offset offset]
把 infile 的内容写入集群内名为 name 的对象、从偏移量 \fIoffset\fP
（默认为 0 ）处写起。
\fB警告：\fPput 命令创建的是单个 RADOS 对象，尺寸和你的输入文件完全一样。你如果不能保证对象的尺寸合理且一致，最好改用
RGW/S3 、 CephFS 或 RBD ，否则实际运行情况和你期望的会有出入。
.TP
\fBappend\fP \fIname\fP \fIinfile\fP
把 infile 的内容追加给集群内名为 name 的对象。
.TP
\fBrm\fP \fIname\fP
删除名为 name 的对象。
.TP
\fBlistwatchers\fP \fIname\fP
罗列此对象名的关注者。
.TP
\fBls\fP \fIoutfile\fP
罗列指定存储池内的对象，并把名单写入 outfile 文件。
.TP
\fBlssnap\fP
罗列指定存储池的快照。
.TP
\fBclonedata\fP \fIsrcname\fP \fIdstname\fP \-\-object\-locator \fIkey\fP
Clone object byte data from \fIsrcname\fP to \fIdstname\fP\&.  Both objects must be stored with the locator key \fIkey\fP (usually either \fIsrcname\fP or \fIdstname\fP).  Object attributes and omap keys are not copied or cloned.
.TP
\fBmksnap\fP \fIfoo\fP
Create pool snapshot named \fIfoo\fP\&.
.TP
\fBrmsnap\fP \fIfoo\fP
Remove pool snapshot named \fIfoo\fP\&.
.TP
\fBbench\fP \fIseconds\fP \fImode\fP [ \-b \fIobjsize\fP ] [ \-t \fIthreads\fP ]
压力测试 \fIseconds\fP 秒。 \fImode\fP 可以是 \fIwrite\fP 、 \fIseq\fP 或 \fIrand\fP 。 \fIseq\fP 和 \fIrand\fP 分别是顺序读、随机读压力测试，要想做读压力测试，先得加 \fI\-\-no\-cleanup\fP 选项做一次写压力测试。默认对象尺寸是 4 MB ，默认的模拟线程数（并行写操作）为 16 。\fI\-\-run\-name <label>\fP 选项适用于多个客户端并行测试以评估最大载荷。 \fI<label>\fP 表示任意对象名，默认为 "benchmark_last_metadata" ，且作为“读”和“写”操作的底层对象名。
注： \-b \fIobjsize\fP 仅适用于 \fIwrite\fP 模式。
注： \fIwrite\fP 和 \fIseq\fP 必须运行在相同的主机上，否则 \fIwrite\fP 所创建对象的名字不能被 \fIseq\fP 所接受。
.TP
\fBcleanup\fP [ \-\-run\-name \fIrun_name\fP ] [ \-\-prefix \fIprefix\fP ]
清理先前的基准测试操作。
注意：默认的 run\-name 是 \fBbenchmark_last_metadata\fP
.TP
\fBlistxattr\fP \fIname\fP
罗列一个对象的所有扩展属性。
.TP
\fBgetxattr\fP \fIname\fP \fIattr\fP
获取某一对象的扩展属性 \fIattr\fP 的值。
.TP
\fBsetxattr\fP \fIname\fP \fIattr\fP \fIvalue\fP
设置某一对象的扩展属性，把扩展属性 \fIattr\fP 的值设置为
\fIvalue\fP 。
.TP
\fBrmxattr\fP \fIname\fP \fIattr\fP
删除某一对象的扩展属性 \fIattr\fP 。
.TP
\fBstat\fP \fIname\fP
获取指定对象的 stat 信息（即 mtime 、 size ）。
.TP
\fBstat2\fP \fIname\fP
获取指定对象的 stat 信息（与 stat 类似，但是时间精度更高）。
.TP
\fBlistomapkeys\fP \fIname\fP
罗列 name 对象的对象映射图内存储的所有键。
.TP
\fBlistomapvals\fP \fIname\fP
罗列 name 对象的对象映射图内存储的所有键值对。值会被转储为十六进制。
.TP
\fBgetomapval\fP [ \-\-omap\-key\-file \fIfile\fP ] \fIname\fP \fIkey\fP [ \fIout\-file\fP ]
把 name 对象的对象映射图内 key 的值转储为十六进制。如果没有提供可选参数 \fIout\-file\fP ，这个值就会写到标准输出。
.TP
\fBsetomapval\fP [ \-\-omap\-key\-file \fIfile\fP ] \fIname\fP \fIkey\fP [ \fIvalue\fP ]
设置 name 对象的对象映射图内 key 的值。如果没加可选的 \fIvalue\fP
参数，就从标准输入读取。
.TP
\fBrmomapkey\fP [ \-\-omap\-key\-file \fIfile\fP ] \fIname\fP \fIkey\fP
从 name 对象的对象映射图内删除 key 。
.TP
\fBgetomapheader\fP \fIname\fP
把 name 对象的对象映射图头部转储为十六进制。
.TP
\fBsetomapheader\fP \fIname\fP \fIvalue\fP
设置 name 对象的对象映射图头部的值。
.UNINDENT
.SH 实例
.sp
查看集群使用情况：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rados df
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
获取存储池 foo 内的对象列表，并显示在标准输出：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rados \-p foo ls \-
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
写入一个对象：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rados \-p foo put myobject blah.txt
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
创建一个快照：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rados \-p foo mksnap mysnap
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
删除对象：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rados \-p foo rm myobject
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
读取对象的快照内容：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rados \-p foo \-s mysnap get myobject blah.txt.old
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
罗列 PG 0.6 内不一致的对象：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rados list\-inconsistent\-obj 0.6 \-\-format=json\-pretty
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 使用范围
.sp
\fBrados\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8)
.SH 提纲
.nf
\fBradosgw\-admin\fP \fIcommand\fP [ \fIoptions\fP \fI\&...\fP ]
.fi
.sp
.SH 描述
.sp
\fBradosgw\-admin\fP 是 RADOS 网关用户管理工具，可用于创建和修改用户。
.SH 命令
.sp
\fBradosgw\-admin\fP 工具有很多命令，可完成各种管理任务：
.INDENT 0.0
.TP
\fBuser create\fP
创建一个新用户。
.TP
\fBuser modify\fP
修改一个用户。
.TP
\fBuser info\fP
显示用户信息，以及可能存在的子用户和密钥。
.TP
\fBuser rm\fP
删除一个用户。
.TP
\fBuser suspend\fP
暂停某用户。
.TP
\fBuser enable\fP
重新允许暂停的用户。
.TP
\fBuser check\fP
检查用户信息。
.TP
\fBuser stats\fP
显示配额子系统统计的用户状态。
.TP
\fBuser list\fP
罗列出所有用户。
.TP
\fBcaps add\fP
给用户分配能力。
.TP
\fBcaps rm\fP
删除用户能力。
.TP
\fBsubuser create\fP
新建一个子用户（适合使用 Swift API 的客户端）。
.TP
\fBsubuser modify\fP
修改子用户。
.TP
\fBsubuser rm\fP
删除子用户
.TP
\fBkey create\fP
新建访问密钥。
.TP
\fBkey rm\fP
删除访问密钥。
.TP
\fBbucket list\fP
罗列所有桶。
.TP
\fBbucket limit check\fP
显示桶的分片统计信息。
.TP
\fBbucket link\fP
把桶关联到指定用户。
.TP
\fBbucket unlink\fP
取消指定用户和桶的关联。
.TP
\fBbucket stats\fP
返回桶的统计信息。
.TP
\fBbucket rm\fP
删除一个桶。
.TP
\fBbucket check\fP
检查桶的索引信息。
.TP
\fBbucket rewrite\fP
重写指定桶内的所有对象。
.TP
\fBbucket reshard\fP
对桶进行重分片。
.TP
\fBbucket sync disable\fP
禁用桶同步。
.TP
\fBbucket sync enable\fP
允许桶同步。
.TP
\fBbi get\fP
检出桶索引对象条目。
.TP
\fBbi put\fP
存入桶索引对象条目。
.TP
\fBbi list\fP
罗列原始的桶索引条目。
.TP
\fBbi purge\fP
清除桶索引条目。
.TP
\fBobject rm\fP
删除一个对象。
.TP
\fBobject stat\fP
对某一对象执行 stat 操作，查看其元数据。
.TP
\fBobject unlink\fP
从桶索引里去掉对象。
.TP
\fBobject rewrite\fP
重写指定对象。
.TP
\fBobjects expire\fP
启动过期对象的清理。
.TP
\fBperiod rm\fP
删除一个 period 。
.TP
\fBperiod get\fP
查看指定 period 的信息。
.TP
\fBperiod get\-current\fP
查看当前 period 的信息。
.TP
\fBperiod pull\fP
拉取一个 period 。
.TP
\fBperiod push\fP
推送一个 period 。
.TP
\fBperiod list\fP
罗列所有 period 。
.TP
\fBperiod update\fP
更新暂存的 period 。
.TP
\fBperiod commit\fP
提交暂存的 period 。
.TP
\fBquota set\fP
设置配额参数。
.TP
\fBquota enable\fP
启用配额。
.TP
\fBquota disable\fP
禁用配额。
.TP
\fBglobal quota get\fP
查看全局配额参数。
.TP
\fBglobal quota set\fP
配置全局配额参数。
.TP
\fBglobal quota enable\fP
启用全局配额。
.TP
\fBglobal quota disable\fP
禁用全局配额。
.TP
\fBrealm create\fP
新建一个 realm 。
.TP
\fBrealm rm\fP
删除一个 realm 。
.TP
\fBrealm get\fP
显示此 realm 的信息。
.TP
\fBrealm get\-default\fP
查看默认的 realm 名。
.TP
\fBrealm list\fP
罗列所有 realm 。
.TP
\fBrealm list\-periods\fP
罗列所有 realm 的 period 。
.TP
\fBrealm rename\fP
重命名一个 realm 。
.TP
\fBrealm set\fP
设置 realm 信息（需要信息源 infile ）。
.TP
\fBrealm default\fP
把此 realm 设置为默认的。
.TP
\fBrealm pull\fP
拉取一个 realm 、及其当前的 period 。
.TP
\fBzonegroup add\fP
把一个域加入域组。
.TP
\fBzonegroup create\fP
新建一条域组信息。
.TP
\fBzonegroup default\fP
设置默认域组。
.TP
\fBzonegroup rm\fP
删除一条域组信息。
.TP
\fBzonegroup get\fP
显示域组信息。
.TP
\fBzonegroup modify\fP
更改现有域组。
.TP
\fBzonegroup set\fP
设置域组信息（需要信息源 infile ）。
.TP
\fBzonegroup remove\fP
从一域组中删除一个域。
.TP
\fBzonegroup rename\fP
重命名一个域组。
.TP
\fBzonegroup list\fP
罗列此集群内配置的所有域组。
.TP
\fBzonegroup placement list\fP
罗列域组的归置靶。
.TP
\fBzonegroup placement add\fP
把一个归置靶 id 加进一个域组。
.TP
\fBzonegroup placement modify\fP
更改某一特定域组内的一个归置靶。
.TP
\fBzonegroup placement rm\fP
删除一个域组的一个归置靶。
.TP
\fBzonegroup placement default\fP
设置一域组的默认归置靶。
.TP
\fBzone create\fP
新建一个域。
.TP
\fBzone rm\fP
删除一个域。
.TP
\fBzone get\fP
显示区域集群参数。
.TP
\fBzone set\fP
设置区域集群参数（需要输入文件）。
.TP
\fBzone modify\fP
更改现有域。
.TP
\fBzone list\fP
列出本集群内配置的所有区域。
.TP
\fBmetadata sync status\fP
查看元数据同步状态。
.TP
\fBmetadata sync init\fP
初始化元数据同步。
.TP
\fBmetadata sync run\fP
启动元数据同步。
.TP
\fBdata sync status\fP
查看指定源 zone 的数据同步状态。
.TP
\fBdata sync init\fP
初始化指定源 zone 的数据同步。
.TP
\fBdata sync run\fP
启动指定源 zone 的数据同步。
.TP
\fBsync error list\fP
罗列同步错误。
.TP
\fBsync error trim\fP
清理同步错误。
.TP
\fBzone rename\fP
重命名一个 zone 。
.TP
\fBzone placement list\fP
罗列 zone 的归置靶。
.TP
\fBzone placement add\fP
新增一个 zone 归置靶。
.TP
\fBzone placement modify\fP
更改一个 zone 的归置靶。
.TP
\fBzone placement rm\fP
删除一个 zone 的归置靶。
.TP
\fBpool add\fP
增加一个已有存储池用于数据归置。
.TP
\fBpool rm\fP
从数据归置集删除一个已有存储池。
.TP
\fBpools list\fP
罗列归置活跃集。
.TP
\fBpolicy\fP
显示桶或对象相关的策略。
.TP
\fBlog list\fP
罗列日志对象。
.TP
\fBlog show\fP
显示指定对象内（或指定桶、日期、桶标识符）的日志。
（注意：日期格式必须是 YYYY\-MM\-DD\-hh ）
.TP
\fBlog rm\fP
删除日志对象。
.TP
\fBusage show\fP
查看使用率信息（可选选项有用户和数据范围）。
.TP
\fBusage trim\fP
修剪使用率信息（可选选项有用户和数据范围）。
.TP
\fBgc list\fP
显示过期的垃圾回收对象（加 \-\-include\-all 选项罗列所有条目，包括未过期的）。
.TP
\fBgc process\fP
手动处理垃圾。
.TP
\fBlc list\fP
罗列所有桶的生命周期进度。
.TP
\fBlc process\fP
手动处理生命周期。
.TP
\fBmetadata get\fP
读取元数据信息。
.TP
\fBmetadata put\fP
设置元数据信息。
.TP
\fBmetadata rm\fP
删除元数据信息。
.TP
\fBmetadata list\fP
罗列元数据信息。
.TP
\fBmdlog list\fP
罗列元数据日志。
.TP
\fBmdlog trim\fP
裁截元数据日志。
.TP
\fBmdlog status\fP
读取元数据日志状态。
.TP
\fBbilog list\fP
罗列桶索引日志。
.TP
\fBbilog trim\fP
裁截桶索引日志（需要起始标记、结束标记）。
.TP
\fBdatalog list\fP
罗列数据日志。
.TP
\fBdatalog trim\fP
裁截数据日志。
.TP
\fBdatalog status\fP
读取数据日志状态。
.TP
\fBopstate list\fP
罗列含状态操作（需要 client_id 、 op_id 、对象）。
.TP
\fBopstate set\fP
设置条目状态（需指定 client_id 、 op_id 、对象、状态）。
.TP
\fBopstate renew\fP
更新某一条目的状态（需指定 client_id 、 op_id 、对象）。
.TP
\fBopstate rm\fP
删除条目（需指定 client_id 、 op_id 、对象）。
.TP
\fBreplicalog get\fP
读取复制元数据日志条目。
.TP
\fBreplicalog delete\fP
删除复制元数据日志条目。
.TP
\fBorphans find\fP
初始化、并开始检索遗漏的 RADOS 对象。
.TP
\fBorphans finish\fP
清理遗漏 RADOS 对象的检索结果。
.TP
\fBorphans list\-jobs\fP
罗列当前正在进行的遗漏对象检索作业号。
.TP
\fBrole create\fP
新建一个用于 STS 的 AWS 角色。
.TP
\fBrole rm\fP
删除一个角色。
.TP
\fBrole get\fP
获取一个角色。
.TP
\fBrole list\fP
罗列带有指定路径前缀的角色。
.TP
\fBrole modify\fP
修改现有角色的 assume role 策略。
.TP
\fBrole\-policy put\fP
新增、更新角色的权限策略。
.TP
\fBrole\-policy list\fP
罗列与一个角色相关的策略。
.TP
\fBrole\-policy get\fP
获取给定角色内嵌的指定内联策略文档。
.TP
\fBrole\-policy rm\fP
删除与一个角色相关的策略。
.TP
\fBreshard add\fP
安排一个桶进行重分片。
.TP
\fBreshard list\fP
罗列所有正在进行的桶重分片、或已安排准备重分片的作业。
.TP
\fBreshard process\fP
已安排重分片作业的进度。
.TP
\fBreshard status\fP
一个桶的重分片状态。
.TP
\fBreshard cancel\fP
取消一个桶的重分片。
.UNINDENT
.SH 选项
.INDENT 0.0
.TP
.B \-c ceph.conf, \-\-conf=ceph.conf
用指定的 \fBceph.conf\fP 配置文件而非默认的
\fB/etc/ceph/ceph.conf\fP 来确定启动时所需的监视器地址。
.UNINDENT
.INDENT 0.0
.TP
.B \-m monaddress[:port]
连接到指定监视器，而非通过 ceph.conf 查询。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-tenant=<tenant>
租户的名字。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-uid=uid
radosgw 用户的 ID 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-subuser=<name>
子用户名字。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-access\-key=<key>
S3 访问密钥。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-email=email
用户的电子邮件地址。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-secret/\-\-secret\-key=<key>
私钥。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-gen\-access\-key
生成随机访问密钥（给 S3 ）。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-gen\-secret
生成随机私钥。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-key\-type=<type>
密钥类型，可用的有： swift 、 s3 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-temp\-url\-key[\-2]=<key>
临时 URL 密钥。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-buckets
一用户的最大桶数量（ 0 意为不限制，负值意为禁止创建桶）。
默认为 1000 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-access=<access>
为子用户设置访问权限。可用的访问权限有读、写、读写和完全。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-display\-name=<name>
此用户的显示名字（昵称）。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-admin
给用户设置管理标志。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-system
给用户设置系统标识。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bucket=[tenant\-id/]bucket
指定桶名。如果未指定 tenant\-id ，那就用用户（ \-\-uid ）的
tenant\-id 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-pool=<pool>
指定存储池名字。也可以用于 \fIorphans find\fP 指定数据存储池，以扫描泄露的 rados 对象。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-object=object
指定对象名
.UNINDENT
.INDENT 0.0
.TP
.B \-\-date=yyyy\-mm\-dd
格式为 yyyy\-mm\-dd 的日期。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-start\-date=yyyy\-mm\-dd
格式为 yyyy\-mm\-dd 的起始日期。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-end\-date=yyyy\-mm\-dd
格式为 yyyy\-mm\-dd 的终结日期。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bucket\-id=<bucket\-id>
指定桶 id 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bucket\-new\-name=[tenant\-id/]<bucket>
\fIbucket link\fP 命令的可选项，用于重命名一个桶。 tenant\-id/
可加可不加，常规操作一般没必要管。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-shard\-id=<shard\-id>
\fBmdlog list\fP 、 \fBbi list\fP 、 \fBdata sync status\fP 命令的可选项。对 \fBmdlog trim\fP 来说是必需的。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-entries=<entries>
罗列操作的可选参数，用于指定最大条数。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-purge\-data
若加了此选项，删除用户时也一并删除用户的所有数据。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-purge\-keys
若加了此选项，删除子用户时将一起删除其所有密钥。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-purge\-objects
若加了此选项，删除此桶时也一并删除其内所有对象。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-metadata\-key=<key>
用 \fBmetadata get\fP 检索元数据时用的密钥。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-remote=<remote>
远程网关的域或域组 id 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-period=<id>
Period id.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-url=<url>
用于推送、拉取 period 或 realm 的 URL 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-epoch=<number>
Period epoch.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-commit
在执行 \fBperiod update\fP 期间提交此 period 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-staging
查看暂存的 period 信息。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-master
设置为 master 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-master\-zone=<id>
主域的 id 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rgw\-realm=<name>
realm 的名字。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-realm\-id=<id>
realm 的 id 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-realm\-new\-name=<name>
realm 的新名字。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rgw\-zonegroup=<name>
域组的名字。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-zonegroup\-id=<id>
域组的 id 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-zonegroup\-new\-name=<name>
域组的新名字。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rgw\-zone=<zone>
radosgw 所在的区域。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-zone\-id=<id>
域的 id 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-zone\-new\-name=<name>
此域的新名字。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-source\-zone
数据同步的源 zone 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-default
Set the entity (realm, zonegroup, zone) as default.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-read\-only
Set the zone as read\-only when adding to the zonegroup.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-placement\-id
Placement id for the zonegroup placement commands.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-tags=<list>
The list of tags for zonegroup placement add and modify commands.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-tags\-add=<list>
The list of tags to add for zonegroup placement modify command.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-tags\-rm=<list>
The list of tags to remove for zonegroup placement modify command.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-endpoints=<list>
The zone endpoints.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-index\-pool=<pool>
The placement target index pool.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-data\-pool=<pool>
The placement target data pool.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-data\-extra\-pool=<pool>
The placement target data extra (non\-ec) pool.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-placement\-index\-type=<type>
The placement target index type (normal, indexless, or #id).
.UNINDENT
.INDENT 0.0
.TP
.B \-\-tier\-type=<type>
The zone tier type.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-tier\-config=<k>=<v>[,...]
Set zone tier config keys, values.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-tier\-config\-rm=<k>[,...]
Unset zone tier config keys.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-sync\-from\-all[=false]
Set/reset whether zone syncs from all zonegroup peers.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-sync\-from=[zone\-name][,...]
Set the list of zones to sync from.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-sync\-from\-rm=[zone\-name][,...]
Remove the zones from list of zones to sync from.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-fix
除了检查桶索引，还修复它。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-check\-objects
检查桶：根据对象的实际状态重建桶索引。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-format=<format>
为某些操作指定输出格式： xml 、 json 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-sync\-stats
\fBuser stats\fP 的选项。若加了此选项，它就会用当前来自用户桶索引的统计信息更新用户的统计信息。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-show\-log\-entries=<flag>
执行 \fBlog show\fP 时，显示或不显示日志条目。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-show\-log\-sum=<flag>
执行 \fBlog show\fP 时，显示或不显示日志汇总。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-skip\-zero\-entries
让 \fBlog show\fP 只显示数字字段非零的日志。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-infile
设置时指定要读取的文件。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-categories=<list>
逗号分隔的一系列类目，显示使用情况时需要。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-caps=<caps>
能力列表，如 "usage=read, write; user=read" 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-compression=<compression\-algorithm>
归置靶的压缩算法（ lz4|snappy|zlib|zstd ）
.UNINDENT
.INDENT 0.0
.TP
.B \-\-yes\-i\-really\-mean\-it
某些特定操作需要。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-min\-rewrite\-size
指定桶重写时的最小对象尺寸（默认 4M ）。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-rewrite\-size
指定桶重写时的最大对象尺寸（默认 ULLONG_MAX ）。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-min\-rewrite\-stripe\-size
指定对象重写时的最小条带尺寸（默认 0 ）。如果此值设置为 0 ，那么被指定对象被重写后还需重新条带化。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-warnings\-only
进行桶超限检查时若加了此选项，仅罗列出那些当前分片内最大对象数接近或超过的桶。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-bypass\-gc
删除桶时若加了此选项，则跳过 GC 直接触发对象删除。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-inconsistent\-index
删除桶时若加了此选项、且加了 \fB\-\-bypass\-gc\fP 选项，则无视桶索引的一致性。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-concurrent\-ios
进行桶操作时的最大并行 IO 数。影响的操作诸如扫描桶索引，如罗列、删除；还有所有的扫描、搜索操作，比如捡漏或检查桶索引。默认值为 32 。
.UNINDENT
.SH 配额选项
.INDENT 0.0
.TP
.B \-\-max\-objects
指定最大对象数（负数为禁用）。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max\-size
指定最大尺寸（单位为 B/K/M/G/T ，负数为禁用）。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-quota\-scope
配额有效范围（桶、用户）。
.UNINDENT
.SH 捡漏（ ORPHANS ）选项
.INDENT 0.0
.TP
.B \-\-num\-shards
用多少个分片临时保存扫描信息。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-orphan\-stale\-secs
对象被遗漏多久才被当作孤儿，单位是秒。
默认是 86400 （ 24 小时）。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-job\-id
设置作业标识符（适用于 \fBorphans find\fP ）。
.UNINDENT
.SH ORPHANS LIST-JOBS 选项
.INDENT 0.0
.TP
.B \-\-extra\-info
在作业列表中展示额外信息。
.UNINDENT
.SH 角色选项
.INDENT 0.0
.TP
.B \-\-role\-name
要创建角色的名字。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-path
角色的路径。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-assume\-role\-policy\-doc
信任关系策略文档，用于授予一个实体权限，以担任此角色。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-policy\-name
策略文档的名字。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-policy\-doc
权限策略文档。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-path\-prefix
用于过滤角色的路径前缀。
.UNINDENT
.SH 实例
.sp
生成一新用户：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ radosgw\-admin user create \-\-display\-name="johnny rotten" \-\-uid=johnny
{ "user_id": "johnny",
  "rados_uid": 0,
  "display_name": "johnny rotten",
  "email": "",
  "suspended": 0,
  "subusers": [],
  "keys": [
        { "user": "johnny",
          "access_key": "TCICW53D9BQ2VGC46I44",
          "secret_key": "tfm9aHMI8X76L3UdgE+ZQaJag1vJQmE6HDb5Lbrz"}],
  "swift_keys": []}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
删除一用户：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ radosgw\-admin user rm \-\-uid=johnny
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
删除一个用户和与他相关的桶及内容：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ radosgw\-admin user rm \-\-uid=johnny \-\-purge\-data
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
删除一个桶：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ radosgw\-admin bucket rm \-\-bucket=foo
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
把桶链接到指定用户：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ radosgw\-admin bucket link \-\-bucket=foo \-\-bucket_id=<bucket id> \-\-uid=johnny
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
切断桶与指定用户的链接：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ radosgw\-admin bucket unlink \-\-bucket=foo \-\-uid=johnny
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
显示一个桶从 2012 年 4 月 1 日起的日志：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ radosgw\-admin log show \-\-bucket=foo \-\-date=2012\-04\-01\-01 \-\-bucket\-id=default.14193.1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
显示某用户 2012 年 3 月 1 日（不含）到 4 月 1 日期间的使用情况：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ radosgw\-admin usage show \-\-uid=johnny \e
                \-\-start\-date=2012\-03\-01 \-\-end\-date=2012\-04\-01
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
只显示所有用户的使用情况汇总：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ radosgw\-admin usage show \-\-show\-log\-entries=false
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
裁剪掉某用户 2012 年 4 月 1 日之前的使用信息：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ radosgw\-admin usage trim \-\-uid=johnny \-\-end\-date=2012\-04\-01
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 使用范围
.sp
\fBradosgw\-admin\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8)
radosgw(8)
.SH 提纲
.nf
\fBradosgw\fP
.fi
.sp
.SH 描述
.sp
\fBradosgw\fP 是 RADOS 对象存储的一个 HTTP REST 网关，是 Ceph 分布式存储系统的一部分。它是用 libfcgi 实现的一个 FastCGI 模块，可联合任何支持 FastCGI 功能的网页服务器使用。
.SH 选项
.INDENT 0.0
.TP
.B \-c ceph.conf, \-\-conf=ceph.conf
用指定的 \fBceph.conf\fP 配置文件而非默认的 \fB/etc/ceph/ceph.conf\fP 来确定启动时所需的监视器地址。
.UNINDENT
.INDENT 0.0
.TP
.B \-m monaddress[:port]
连接到指定监视器，而非通过 \fBceph.conf\fP 查询。
.UNINDENT
.INDENT 0.0
.TP
.B \-i ID, \-\-id ID
设置 radosgw 名字的 ID 部分。
.UNINDENT
.INDENT 0.0
.TP
.B \-n TYPE.ID, \-\-name TYPE.ID
设置网关的 rados 用户名（如 client.radosgw.gateway ）。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-cluster NAME
设置集群名称（默认： ceph ）
.UNINDENT
.INDENT 0.0
.TP
.B \-d
在前台运行，日志记录到标准错误
.UNINDENT
.INDENT 0.0
.TP
.B \-f
在前台运行，日志记录到正常位置
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rgw\-socket\-path=path
指定 Unix 域套接字的路径
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rgw\-region=region
radosgw 所在 region
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rgw\-zone=zone
radosgw 所在的区域
.UNINDENT
.SH 配置
.sp
先前的 RADOS 网关配置依赖 \fBApache\fP 和 \fBmod_fastcgi\fP ；现在则用 \fBmod_proxy_fcgi\fP 替换了 \fBmod_fastcgi\fP ，因为后者使用了非自由许可证。 \fBmod_proxy_fcgi\fP 不同于传统的 FastCGI 模块，它需要 \fBmod_proxy\fP 模块所支持的 FastCGI 协议。所以，要处理 FastCGI 协议，服务器需同时有 \fBmod_proxy\fP 和 \fBmod_proxy_fcgi\fP 模块。不像 \fBmod_fastcgi\fP ， \fBmod_proxy_fcgi\fP 不能启动应用进程。某些平台提供了 \fBfcgistarter\fP 来实现此功能。然而， FastCGI 应用框架有可能具备外部启动或进程管理功能。
.sp
\fBApache\fP 可以通过本机 TCP 连接或 Unix 域套接字使用 \fBmod_proxy_fcgi\fP 模块。不支持 Unix 域套接字的 \fBmod_proxy_fcgi\fP ，像 Apache 2.2 和 2.4 的早期版本，必需通过本机 TCP 连接。
.INDENT 0.0
.IP 1. 3
更改 \fB/etc/ceph/ceph.conf\fP 文件，让 radosgw 使用 TCP 而非 Unix 域套接字。
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
[client.radosgw.gateway]
host = {hostname}
keyring = /etc/ceph/ceph.client.radosgw.keyring
rgw socket path = ""
log file = /var/log/ceph/client.radosgw.gateway.log
rgw frontends = fastcgi socket_port=9000 socket_host=0.0.0.0
rgw print continue = false
.ft P
.fi
.UNINDENT
.UNINDENT
.IP 2. 3
把下列内容加入网关配置文件：
.sp
在 Debian/Ubuntu 上，加入 \fB/etc/apache2/conf\-available/rgw.conf\fP
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
<VirtualHost *:80>
ServerName localhost
DocumentRoot /var/www/html

ErrorLog /var/log/apache2/rgw_error.log
CustomLog /var/log/apache2/rgw_access.log combined

# LogLevel debug

RewriteEngine On

RewriteRule .* \- [E=HTTP_AUTHORIZATION:%{HTTP:Authorization},L]

SetEnv proxy\-nokeepalive 1

ProxyPass / fcgi://localhost:9000/

</VirtualHost>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
在 CentOS/RHEL 上，加入 \fB/etc/httpd/conf.d/rgw.conf\fP:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
<VirtualHost *:80>
ServerName localhost
DocumentRoot /var/www/html

ErrorLog /var/log/httpd/rgw_error.log
CustomLog /var/log/httpd/rgw_access.log combined

# LogLevel debug

RewriteEngine On

RewriteRule .* \- [E=HTTP_AUTHORIZATION:%{HTTP:Authorization},L]

SetEnv proxy\-nokeepalive 1

ProxyPass / fcgi://localhost:9000/

</VirtualHost>
.ft P
.fi
.UNINDENT
.UNINDENT
.IP 3. 3
对于搭载了支持 Unix 域套接字的 Apache 2.4.9 及更高版的发行版，可使用下列配置：
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
[client.radosgw.gateway]
host = {hostname}
keyring = /etc/ceph/ceph.client.radosgw.keyring
rgw socket path = /var/run/ceph/ceph.radosgw.gateway.fastcgi.sock
log file = /var/log/ceph/client.radosgw.gateway.log
rgw print continue = false
.ft P
.fi
.UNINDENT
.UNINDENT
.IP 4. 3
把下列内容加入网关配置文件中：
.sp
在 CentOS/RHEL 上，加入 \fB/etc/httpd/conf.d/rgw.conf\fP:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
<VirtualHost *:80>
ServerName localhost
DocumentRoot /var/www/html

ErrorLog /var/log/httpd/rgw_error.log
CustomLog /var/log/httpd/rgw_access.log combined

# LogLevel debug

RewriteEngine On

RewriteRule .* \- [E=HTTP_AUTHORIZATION:%{HTTP:Authorization},L]

SetEnv proxy\-nokeepalive 1

ProxyPass / unix:///var/run/ceph/ceph.radosgw.gateway.fastcgi.sock|fcgi://localhost:9000/

</VirtualHost>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
请注意， \fBApache 2.4.7\fP 不支持 Unix 域套接字，所以必须配置成本机 TCP 。 Unix 域套接字支持存在于 \fBApache 2.4.9\fP
及其后续版本中。
.IP 5. 3
给 radosgw 生成一个密钥，用于到集群认证。
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
ceph\-authtool \-C \-n client.radosgw.gateway \-\-gen\-key /etc/ceph/keyring.radosgw.gateway
ceph\-authtool \-n client.radosgw.gateway \-\-cap mon \(aqallow rw\(aq \-\-cap osd \(aqallow rwx\(aq /etc/ceph/keyring.radosgw.gateway
.ft P
.fi
.UNINDENT
.UNINDENT
.IP 6. 3
把密钥导入集群。
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth add client.radosgw.gateway \-\-in\-file=keyring.radosgw.gateway
.ft P
.fi
.UNINDENT
.UNINDENT
.IP 7. 3
启动 Apache 和 radosgw 。
.sp
Debian/Ubuntu:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
sudo /etc/init.d/apache2 start
sudo /etc/init.d/radosgw start
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
CentOS/RHEL:
.INDENT 3.0
.INDENT 3.5
.sp
.nf
.ft C
sudo apachectl start
sudo /etc/init.d/ceph\-radosgw start
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SH 记录使用日志
.sp
\fBradosgw\fP 会异步地维护使用率日志，它会累积用户操作统计并周期性地刷回。可用 \fBradosgw\-admin\fP 访问和管理日志。
.sp
记录的信息包括数据传输总量、操作总量、成功操作总量。这些数据是按小时记录到桶所有者名下的，除非操作是针对服务的（如罗列桶时），这时会记录到操作用户名下。
.sp
下面是个配置实例：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[client.radosgw.gateway]
rgw enable usage log = true
rgw usage log tick interval = 30
rgw usage log flush threshold = 1024
rgw usage max shards = 32
rgw usage max user shards = 1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
碎片总数决定着总共需要多少对象来保存使用日志信息。每用户碎片数确定了为单个用户保存使用信息需多少对象。 tick interval 可配置刷回日志的间隔秒数， flush threshold 决定了保留的日志条数达到多少才调用异步刷回。
.SH 使用范围
.sp
\fBradosgw\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8)
radosgw\-admin(8)
.SH 提纲
.nf
\fBrbd\-fuse\fP [ \-p pool ] [\-c conffile] \fImountpoint\fP [ \fIfuse options\fP ]
.fi
.sp
.SH 描述
.sp
\fBrbd\-fuse\fP 是个 rbd 映像的用户空间文件系统（ FUSE ）客户端。给一个包含 rbd 映像的存储池，它就可以在用户空间把那些映像挂载到 \fBmountpoint\fP 下，并显示为普通文件。
.sp
用下列命令卸载：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
fusermount \-u mountpoint
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
或者向 \fBrbd\-fuse\fP 进程发送 \fBSIGINT\fP 信号。
.SH 选项
.sp
rbd\-fuse 不认识的选项将传递给 libfuse 。
.INDENT 0.0
.TP
.B \-c ceph.conf
用指定的 \fIceph.conf\fP 配置文件、而非默认的 \fB/etc/ceph/ceph.conf\fP 来确定监视器地址，启动时要用。
.UNINDENT
.INDENT 0.0
.TP
.B \-p pool
在 \fIpool\fP 存储池中搜索 rbd 映像，默认为 \fBrbd\fP 。
.UNINDENT
.SH 使用范围
.sp
\fBrbd\-fuse\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
fusermount(8),
rbd(8)
.SH 提纲
.nf
\fBrbd\-ggate\fP [\-\-read\-only] [\-\-exclusive] [\-\-device \fIggate device\fP] map \fIimage\-spec\fP | \fIsnap\-spec\fP
\fBrbd\-ggate\fP unmap \fIggate device\fP
\fBrbd\-ggate\fP list
.fi
.sp
.SH 描述
.sp
\fBrbd\-ggate\fP 是一个 RADOS 块设备（ rbd ）映像的客户端。它会把一个 rbd 映像映射到 ggate （ FreeBSD GEOM 网关类）设备，这样就可以像访问普通的本地块设备一样访问它了。
.SH 命令
.SS map
.sp
派生一个进程用于创建 ggate 设备，然后在 GEOM 网关内核子系统和
RADOS 之间转发 I/O 请求。
.SS unmap
.sp
销毁 ggate 设备，并结束负责它的进程。
.SS list
.sp
罗列已映射的 ggate 设备。
.SH 选项
.INDENT 0.0
.TP
.B \-\-device *ggate device*
指定 ggate 设备路径。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-read\-only
以只读方式映射。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-exclusive
禁止其它客户端写入。
.UNINDENT
.SH 映像和快照格式
.nf
\fIimage\-spec\fP is [\fIpool\-name\fP]/\fIimage\-name\fP
\fIsnap\-spec\fP  is [\fIpool\-name\fP]/\fIimage\-name\fP@\fIsnap\-name\fP
.fi
.sp
.sp
\fIpool\-name\fP 默认为 rbd 。如果一个映像名内包含斜杠（ / ），就必须加 \fIpool\-name\fP 。
.SH 使用范围
.sp
\fBrbd\-ggate\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
rbd(8)
ceph(8)
.SH 提纲
.nf
\fBrbd\-mirror\fP
.fi
.sp
.SH 描述
.sp
\fBrbd\-mirror\fP 是个守护进程，用于在 Ceph 集群间异步地镜像 RADOS 块设备（ rbd ）映像。它可以在远端集群重放本地集群内的映像变更，以实现异地灾备。
.sp
它用 RADOS 协议连接远端集群，需要从默认路径搜索 ceph.conf
配置文件、监视器地址、及其认证信息，即
\fB/etc/ceph/$cluster.conf\fP 、 \fB/etc/ceph/$cluster.keyring\fP
和 \fB/etc/ceph/$cluster.$name.keyring\fP ，其中 \fB$cluster\fP
表示自定义的集群名字、 \fB$name\fP 表示连接时所用的 rados 用户，如 \fBclient.rbd\-mirror\fP 。
.SH 选项
.INDENT 0.0
.TP
.B \-c ceph.conf, \-\-conf=ceph.conf
在启动期间，读取指定的配置文件 \fBceph.conf\fP ，而不是默认的 \fB/etc/ceph/ceph.conf\fP ，并从中提取监视器地址。
.UNINDENT
.INDENT 0.0
.TP
.B \-m monaddress[:port]
连接到指定监视器（而非在 \fBceph.conf\fP 里面找）。
.UNINDENT
.INDENT 0.0
.TP
.B \-i ID, \-\-id ID
为 rbd\-mirror 指定名字的 ID 部分。
.UNINDENT
.INDENT 0.0
.TP
.B \-n TYPE.ID, \-\-name TYPE.ID
设置网关所需的 rados 用户名（如 client.rbd\-mirror ）。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-cluster NAME
指定集群名字（默认为 ceph ）。
.UNINDENT
.INDENT 0.0
.TP
.B \-d
在前台运行，日志显示到 stderr 。
.UNINDENT
.INDENT 0.0
.TP
.B \-f
在前台运行，日志走向不受影响。
.UNINDENT
.SH 使用范围
.sp
\fBrbd\-mirror\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 Ceph 文档 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
rbd(8)
.SH 提纲
.nf
\fBrbd\-nbd\fP [\-c conf] [\-\-read\-only] [\-\-device \fInbd device\fP] [\-\-nbds_max \fIlimit\fP] [\-\-max_part \fIlimit\fP] [\-\-exclusive] map \fIimage\-spec\fP | \fIsnap\-spec\fP
\fBrbd\-nbd\fP unmap \fInbd device\fP
\fBrbd\-nbd\fP list\-mapped
.fi
.sp
.SH 描述
.sp
\fBrbd\-nbd\fP 是个 RADOS 块设备（ rbd ）映像的客户端，与 rbd 内核模块类似。它可以把一个 rbd 映像映射为 nbd （网络块设备）设备，这样就可以当常规的本地块设备使用了。
.SH 选项
.INDENT 0.0
.TP
.B \-c ceph.conf
指定 ceph.conf 配置文件，而不是用默认的 /etc/ceph/ceph.conf
来确定启动时需要的监视器。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-read\-only
以只读方式映射。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-nbds_max *limit*
载入 NBD 内核模块时覆盖其参数，用于限制 nbd 设备数量。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-max_part *limit*
覆盖（内核的）模块参数 nbds_max 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-exclusive
禁止其它客户端写入。
.UNINDENT
.SH 映像名和快照名规则
.nf
\fIimage\-spec\fP is [\fIpool\-name\fP]/\fIimage\-name\fP
\fIsnap\-spec\fP  is [\fIpool\-name\fP]/\fIimage\-name\fP@\fIsnap\-name\fP
.fi
.sp
.sp
\fIpool\-name\fP 的默认值是 "rbd" 。如果映像名里包含字符串斜杠（ / ），那就必须指定 \fIpool\-name\fP 。
.SH 使用范围
.sp
\fBrbd\-nbd\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
rbd(8)
.SH 提纲
.nf
\fBrbd\-replay\-many\fP [ \fIoptions\fP ] \-\-original\-image \fIname\fP \fIhost1\fP [ \fIhost2\fP [ ... ] ] \-\- \fIrbd_replay_args\fP
.fi
.sp
.SH 描述
.sp
\fBrbd\-replay\-many\fP 工具用于在几个客户端上重放 RBD 载荷。虽然所有客户端使用相同的载荷，但它们对单独的映像重放。正像 librbd 的常规用法，其中各原始客户端都是有各自映像的虚拟机。
.sp
配置和重放文件不会自动复制到客户端。重放映像必须存在才能进行重放。
.SH 选项
.INDENT 0.0
.TP
.B \-\-original\-image name
指定最初被追踪映像的名字（和快照），对正确地映射名字是必要的。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-image\-prefix prefix
要进行重放的映像名前缀。指定 \-\-image\-prefix=foo 可使客户端重放 foo\-0 、 foo\-1 等等。默认为最初映像名。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-exec program
rbd\-replay 可执行文件的路径。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-delay seconds
启动各客户端的延时，默认为 0 。
.UNINDENT
.SH 实例
.sp
典型用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd\-replay\-many host\-0 host\-1 \-\-original\-image=image \-\- \-c ceph.conf replay.bin
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
实际上将执行下列的命令：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ssh host\-0 \(aqrbd\-replay\(aq \-\-map\-image \(aqimage=image\-0\(aq \-c ceph.conf replay.bin
ssh host\-1 \(aqrbd\-replay\(aq \-\-map\-image \(aqimage=image\-1\(aq \-c ceph.conf replay.bin
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 使用范围
.sp
\fBrbd\-replay\-many\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
rbd\-replay(8),
rbd(8)
.SH 提纲
.nf
\fBrbd\-replay\-prep\fP [ \-\-window \fIseconds\fP ] [ \-\-anonymize ] \fItrace_dir\fP \fIreplay_file\fP
.fi
.sp
.SH 描述
.sp
\fBrbd\-replay\-prep\fP 可处理原始 RBD 映像跟踪文件，以便用于 \fBrbd\-replay\fP 。
.SH 选项
.INDENT 0.0
.TP
.B \-\-window seconds
请求多于 \(aqseconds\(aq 秒之后被认为是独立的。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-anonymize
匿名化映像和快照名。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-verbose
把所有处理过的事件打印到控制台。
.UNINDENT
.SH 实例
.sp
要预处理 workload1\-trace 以便重放：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd\-replay\-prep workload1\-trace/ust/uid/1000/64\-bit workload1
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 使用范围
.sp
\fBrbd\-replay\-prep\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
rbd\-replay(8),
rbd(8)
.SH 提纲
.nf
\fBrbd\-replay\fP [ \fIoptions\fP ] \fIreplay_file\fP
.fi
.sp
.SH 描述
.sp
\fBrbd\-replay\fP 工具用于重放 RBD 载荷。
.SH 选项
.INDENT 0.0
.TP
.B \-c ceph.conf, \-\-conf ceph.conf
使用 ceph.conf 配置文件而非默认的 /etc/ceph/ceph.conf 来确定启动期间所需的监视器地址。
.UNINDENT
.INDENT 0.0
.TP
.B \-p pool, \-\-pool pool
与指定存储池交互，默认为 \(aqrbd\(aq 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-latency\-multiplier
请求间延时加倍，默认为 1 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-read\-only
只重放非破坏性的请求。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-map\-image rule
增加一条规则把跟踪文件中的映像名映射为重放集群中的映像名。此规则 image1@snap1=image2@snap2 将把 image1 的快照 snap1 映射为 image2 的快照 snap2 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dump\-perf\-counters
\fB实验功能\fP
关闭映像前先把性能计数器转储到标准输出。如果关闭了多个映像或者同一映像被打开、关闭多次，那么性能计数器就可能转储多次。性能计数器及其含义可能因版本而不同。
.UNINDENT
.SH 实例
.sp
尽可能快地重放 workload1:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd\-replay \-\-latency\-multiplier=0 workload1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
重放 workload1 ，并用 test_image 取代 prod_image:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd\-replay \-\-map\-image=prod_image=test_image workload1
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 使用范围
.sp
\fBrbd\-replay\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
rbd\-replay\-prep(8),
rbd(8)
.SH 提纲
.nf
\fBrbd\fP [ \-c \fIceph.conf\fP ] [ \-m \fImonaddr\fP ] [\-\-cluster \fIcluster\-name\fP]
[ \-p | \-\-pool \fIpool\fP ] [ \fIcommand\fP ... ]
.fi
.sp
.SH 描述
.sp
\fBrbd\fP 是个修改 rados 块设备（ RBD ）映像的工具， QEMU/KVM
通过 Linux 内核驱动和 rbd 存储驱动使用 RBD 。 RBD 映像是简单的块设备，它被条带化成小块对象后存储于 RADOS 对象存储集群，条带化后的对象尺寸必须是 2 的幂。
.SH 选项
.INDENT 0.0
.TP
.B \-c ceph.conf, \-\-conf ceph.conf
指定 ceph.conf 配置文件，而不是用默认的 /etc/ceph/ceph.conf
来确定启动时需要的监视器。
.UNINDENT
.INDENT 0.0
.TP
.B \-m monaddress[:port]
连接到指定监视器，无需通过 ceph.conf 查找。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-cluster cluster\-name
使用非默认的集群名字，即不是 \fIceph\fP 的集群名。
.UNINDENT
.INDENT 0.0
.TP
.B \-p pool\-name, \-\-pool pool\-name
在指定存储池下操作，大多数命令都得指定。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-progress
不显示进度（有些命令会默认输出到标准输出）。
.UNINDENT
.SH 参数
.INDENT 0.0
.TP
.B \-\-image\-format format\-id
选择用哪个对象布局，默认为 2 。
.INDENT 7.0
.IP \(bu 2
format 1 \- （已废弃）新建 rbd 映像时使用最初的格式。此格式兼容所有版本的 librbd 和内核模块，但是不支持较新的功能，像克隆。
.IP \(bu 2
format 2 \- 使用第二版 rbd 格式， librbd 和 3.11 版以上内核模块才支持（除非是分拆的模块）。此格式增加了克隆支持，使得扩展更容易，还允许以后增加新功能。
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-s size\-in\-M/G/T, \-\-size size\-in\-M/G/T
指定新 rbd 映像、或是已有 rbd 映像的新尺寸，单位可以是
M/G/T ，没加后缀的话默认为 M 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-object\-size size\-in\-B/K/M
指定对象尺寸，单位可以是 B/K/M 。对象尺寸将被对齐到最接近的
2 的幂；如果不指定后缀，则认为单位是 B 。默认的对象尺寸是
4MB ，最小允许 4K 、最大允许 32M 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-stripe\-unit size\-in\-B/K/M
指定条带单元尺寸，单位可以是 B/K/M ，没加的话默认为 B 。详情见下面的条带化一段。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-stripe\-count num
条带化要至少跨越多少对象才能转回第一个。详情见条带化一节。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-snap snap
某些操作需要指定快照名。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-id username
指定 map 命令要用到的用户名（不含 \fBclient.\fP 前缀）。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-keyring filename
因 map 命令所需，指定一个用户及其密钥文件。如果未指定，从默认密钥环里找。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-keyfile filename
因 map 命令所需，给 \fB\-\-id user\fP 用户指定一个包含密钥的文件。如果同时指定了 \fB\-\-keyring\fP 选项，本选项就会被覆盖。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-shared lock\-tag
\fIlock add\fP 命令的选项，它允许使用同一标签的多个客户端同时锁住同一映像。标签是任意字符串。当某映像必须从多个客户端同时打开时，此选项很有用，像迁移活动虚拟机时、或者在集群文件系统下使用时。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-format format
指定输出格式，默认： plain 、 json 、 xml 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-pretty\-format
使 json 或 xml 格式的输出更易读。
.UNINDENT
.INDENT 0.0
.TP
.B \-o krbd\-options, \-\-options krbd\-options
通过 rbd 内核驱动映射或取消映射某一映像时指定的选项。
krbd\-options 是逗号分隔的一系列选项（类似于 mount(8) 的挂载选项）。详情见下面的内核 rbd (krbd) 选项一段。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-read\-only
以只读方式映射到映像，等价于 \-o ro 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-image\-feature feature\-name
创建格式 2 的 RBD 映像时，指定要启用哪些功能。想要启用多个功能的话，可以多次重复使用此选项。当前支持下列功能：
.INDENT 7.0
.IP \(bu 2
layering: 支持分层
.IP \(bu 2
striping: 支持条带化 v2
.IP \(bu 2
exclusive\-lock: 支持独占锁
.IP \(bu 2
object\-map: 支持对象映射（依赖 exclusive\-lock ）
.IP \(bu 2
fast\-diff: 快速计算差异（依赖 object\-map ）
.IP \(bu 2
deep\-flatten: 支持快照扁平化操作
.IP \(bu 2
journaling: 支持记录 IO 操作（依赖独占锁）
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-image\-shared
指定该映像将被多个客户端同时使用。此选项将禁用那些依赖于独占所有权的功能。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-whole\-object
把 diff 操作范围限定在完整的对象条带级别，而非对象内差异。当某一映像启用了 object\-map 功能时，把 diff 操作限定到对象条带会显著地提高性能，因为通过检查驻留于内存中的对象映射就可以计算出差异，而无需针对映像内的各个对象查询 RADOS 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-limit
指定快照的数量上限。
.UNINDENT
.SH 命令
.INDENT 0.0
.TP
\fBls\fP [\-l | \-\-long] [\fIpool\-name\fP]
列出 rbd_directory 对象中的所有 rbd 映像。加 \-l 选项后也显示快照，并用长格式输出，包括大小、父映像（若是克隆品）、格式等等。
.TP
\fBdu\fP [\-p | \-\-pool \fIpool\-name\fP] [\fIimage\-spec\fP | \fIsnap\-spec\fP]
计算指定存储池内所有映像及其相关快照的磁盘使用量，包括分配的和实际使用的。此命令也可用于单个映像和快照。
.sp
如果 RBD 映像的 fast\-diff 功能没启用，那么这个操作需向多个
OSD 查询此映像涉及的每个对象。
.TP
\fBinfo\fP \fIimage\-spec\fP | \fIsnap\-spec\fP
显示指定 rbd 映像的信息（如大小和对象尺寸）。若映像是克隆品，会显示相关父快照；若指定了快照，会显示是否被保护。
.TP
\fBcreate\fP (\-s | \-\-size \fIsize\-in\-M/G/T\fP) [\-\-image\-format \fIformat\-id\fP] [\-\-object\-size \fIsize\-in\-B/K/M\fP] [\-\-stripe\-unit \fIsize\-in\-B/K/M\fP \-\-stripe\-count \fInum\fP] [\-\-image\-feature \fIfeature\-name\fP]... [\-\-image\-shared] \fIimage\-spec\fP
如要新建 rbd 映像，必须用 \-\-size 指定尺寸。 \-\-strip\-unit 和 \-\-strip\-count 参数是可选项，但必须一起用。
.TP
\fBclone\fP [\-\-object\-size \fIsize\-in\-B/K/M\fP] [\-\-stripe\-unit \fIsize\-in\-B/K/M\fP \-\-stripe\-count \fInum\fP] [\-\-image\-feature \fIfeature\-name\fP] [\-\-image\-shared] \fIparent\-snap\-spec\fP \fIchild\-image\-spec\fP
创建一个父快照的克隆品（写时复制子映像）。若不指定，对象尺寸将与父映像完全一样。尺寸和父快照一样。参数 \-\-stripe\-unit
和 \-\-stripe\-count 是可选的，但必须同时使用。
.sp
父快照必须已被保护（见 \fIrbd snap protect\fP ）。 format 2 格式的映像才支持。
.TP
\fBflatten\fP \fIimage\-spec\fP
如果映像是个克隆品，就从父快照拷贝所有共享块，并使子快照独立于父快照、切断父子快照间的链接。如果没有克隆品引用此父快照了，就可以取消保护并删除。
.sp
只适用于 format 2 。
.TP
\fBgroup create\fP \fIgroup\-spec\fP
创建一个组。
.TP
\fBgroup image add\fP \fIgroup\-spec\fP \fIimage\-spec\fP
把一个映像加入某一组。
.TP
\fBgroup image list\fP \fIgroup\-spec\fP
罗列一个组内的映像。
.TP
\fBgroup image remove\fP \fIgroup\-spec\fP \fIimage\-spec\fP
删除一个组内的对象。
.TP
\fBgroup ls\fP [\-p | \-\-pool \fIpool\-name\fP]
罗列所有 rbd 组。
.TP
\fBgroup rename\fP \fIsrc\-group\-spec\fP \fIdest\-group\-spec\fP
重命名一个组。注意：不支持跨存储池重命名。
.TP
\fBgroup rm\fP \fIgroup\-spec\fP
删除一个组。
.TP
\fBchildren\fP \fIsnap\-spec\fP
列出此映像指定快照的克隆品。它会检查各存储池、并输出存储池名/映像名。
.sp
只适用于 format 2 。
.TP
\fBresize\fP (\-s | \-\-size \fIsize\-in\-M/G/T\fP) [\-\-allow\-shrink] \fIimage\-spec\fP
rbd 大小调整。尺寸参数必须指定； \-\-allow\-shrink 选项允许缩小。
.TP
\fBrm\fP \fIimage\-spec\fP
删除一 rbd 映像，包括所有数据块。如果映像有快照，此命令会失效。
.TP
\fBexport\fP [\-\-export\-format \fIformat (1 or 2)\fP] (\fIimage\-spec\fP | \fIsnap\-spec\fP) [\fIdest\-path\fP]
把映像导出到目的路径，用 \- （短线）输出到标准输出。
\-\-export\-format 现在只认 \(aq1\(aq 或 \(aq2\(aq 。格式 2 不仅允许我们导出映像内容，还可以导出快照和其它属性，如 image_order 、功能标志。
.TP
\fBimport\fP [\-\-export\-format \fIformat (1 or 2)\fP] [\-\-image\-format \fIformat\-id\fP] [\-\-object\-size \fIsize\-in\-B/K/M\fP] [\-\-stripe\-unit \fIsize\-in\-B/K/M\fP \-\-stripe\-count \fInum\fP] [\-\-image\-feature \fIfeature\-name\fP]... [\-\-image\-shared] \fIsrc\-path\fP [\fIimage\-spec\fP]
创建一映像，并从目的路径导入数据，用 \- （短线）从标准输入导入。如果可能的话，导入操作会试着创建稀疏映像。如果从标准输入导入，稀疏化单位将是目标映像的数据块尺寸（即对象尺寸）。
.sp
参数 \-\-stripe\-unit 和 \-\-stripe\-count 是可选的，但必须同时使用。
.sp
\-\-export\-format 现在只认 \(aq1\(aq 或 \(aq2\(aq 。格式 2 不仅允许我们导出映像内容，还可以导出快照和其它属性，如 image_order 、功能标志。
.TP
\fBexport\-diff\fP [\-\-from\-snap \fIsnap\-name\fP] [\-\-whole\-object] (\fIimage\-spec\fP | \fIsnap\-spec\fP) \fIdest\-path\fP
导出一映像的增量差异，用\-导出到标准输出。若给了起始快照，就只包含与此快照的差异部分；否则包含映像的所有数据部分；结束快照用 \-\-snap 选项或 @snap （见下文）指定。此映像的差异格式包含了映像尺寸变更的元数据、起始和结束快照，它高效地表达了被忽略或映像内的全 0 区域。
.TP
\fBmerge\-diff\fP \fIfirst\-diff\-path\fP \fIsecond\-diff\-path\fP \fImerged\-diff\-path\fP
把两个连续的增量差异合并为单个差异。前一个差异的末尾快照必须与后一个差异的起始快照相同。前一个差异可以是标准输入 \- ，合并后的差异可以是标准输出 \- ；这样就可以合并多个差异文件，像这样： \(aqrbd merge\-diff first second \- | rbd merge\-diff \- third result\(aq 。注意，当前此命令只支持 stripe_count == 1 这样的源增量差异。
.TP
\fBimport\-diff\fP \fIsrc\-path\fP \fIimage\-spec\fP
导入一映像的增量差异并应用到当前映像。如果此差异是在起始快照基础上生成的，我们会先校验那个已存在快照再继续；如果指定了结束快照，我们先检查它是否存在、再应用变更，结束后再创建结束快照。
.TP
\fBdiff\fP [\-\-from\-snap \fIsnap\-name\fP] [\-\-whole\-object] \fIimage\-spec\fP | \fIsnap\-spec\fP
打印出从指定快照点起、或从映像创建点起，映像内的变动区域。输出的各行都包含起始偏移量（按字节）、数据块长度（按字节）、还有 zero 或 data ，用来指示此范围以前是 0 还是其它数据。
.TP
\fBcp\fP (\fIsrc\-image\-spec\fP | \fIsrc\-snap\-spec\fP) \fIdest\-image\-spec\fP
把源映像内容复制进新建的目标映像，目标映像和源映像将有相同的尺寸、对象尺寸和格式。
.TP
\fBmv\fP \fIsrc\-image\-spec\fP \fIdest\-image\-spec\fP
映像改名。注：不支持跨存储池。
.TP
\fBimage\-meta list\fP \fIimage\-spec\fP
显示此映像持有的元数据。第一列是关键字、第二列是值。
.TP
\fBimage\-meta get\fP \fIimage\-spec\fP \fIkey\fP
获取关键字对应的元数据值。
.TP
\fBimage\-meta set\fP \fIimage\-spec\fP \fIkey\fP \fIvalue\fP
设置指定元数据关键字的值，会显示在 \fImetadata\-list\fP 中。
.TP
\fBimage\-meta remove\fP \fIimage\-spec\fP \fIkey\fP
删除元数据关键字及其值。
.TP
\fBobject\-map rebuild\fP \fIimage\-spec\fP | \fIsnap\-spec\fP
为指定映像重建无效的对象映射关系。指定映像快照时，将为此快照重建无效的对象映射关系。
.TP
\fBsnap ls\fP \fIimage\-spec\fP
列出一映像内的快照。
.TP
\fBsnap create\fP \fIsnap\-spec\fP
新建一快照。需指定快照名。
.TP
\fBsnap rollback\fP \fIsnap\-spec\fP
把指定映像回滚到快照。此动作会递归整个块阵列，并把数据头内容更新到快照版本。
.TP
\fBsnap rm\fP [\-\-force] \fIsnap\-spec\fP
删除指定快照。
.TP
\fBsnap purge\fP \fIimage\-spec\fP
删除一映像的所有快照。
.TP
\fBsnap protect\fP \fIsnap\-spec\fP
保护快照，防删除，这样才能从它克隆（见 \fIrbd clone\fP ）。做克隆前必须先保护快照，保护意味着克隆出的子快照依赖于此快照。 \fIrbd clone\fP 不能在未保护的快照上操作。
.sp
只适用于 format 2 。
.TP
\fBsnap unprotect\fP \fIsnap\-spec\fP
取消对快照的保护（撤销 \fIsnap protect\fP ）。如果还有克隆出的子快照尚在， \fIsnap unprotect\fP 命令会失效。（注意克隆品可能位于不同于父快照的存储池。）
.sp
只适用于 format 2 。
.TP
\fBsnap limit set\fP [\-\-limit] \fIlimit\fP \fIimage\-spec\fP
设置一个映像所允许的快照数量上限。
.TP
\fBsnap limit clear\fP \fIimage\-spec\fP
清除先前设置的映像所允许的快照数量上限。
.TP
\fBmap\fP [\-o | \-\-options \fIkrbd\-options\fP ] [\-\-read\-only] \fIimage\-spec\fP | \fIsnap\-spec\fP
通过内核 rbd 模块把指定映像映射到某一块设备。
.TP
\fBunmap\fP [\-o | \-\-options \fIkrbd\-options\fP ] \fIimage\-spec\fP | \fIsnap\-spec\fP | \fIdevice\-path\fP
取消通过内核 rbd 模块的映射。
.TP
\fBshowmapped\fP
显示通过内核 rbd 模块映射过的 rbd 映像。
.TP
\fBnbd map\fP [\-\-device \fIdevice\-path\fP] [\-\-read\-only] \fIimage\-spec\fP | \fIsnap\-spec\fP
通过 rbd\-nbd 工具把指定映像映射成一个块设备。
.TP
\fBnbd unmap\fP \fIdevice\-path\fP
取消映射的块设备，之前通过 rbd\-nbd 工具映射好的。
.TP
\fBnbd list\fP
显示用着的 nbd 设备，通过 rbd\-nbd 工具映射的。
.TP
\fBstatus\fP \fIimage\-spec\fP
显示映像状态，包括哪个客户端打开着它。
.TP
\fBfeature disable\fP \fIimage\-spec\fP \fIfeature\-name\fP\&...
禁用指定镜像的某些功能，可以一次指定多个功能。
.TP
\fBfeature enable\fP \fIimage\-spec\fP \fIfeature\-name\fP\&...
启用指定镜像的某些功能，可以一次指定多个功能。
.TP
\fBlock list\fP \fIimage\-spec\fP
显示锁着映像的锁，第一列是 \fIlock remove\fP 可以使用的锁名。
.TP
\fBlock add\fP [\-\-shared \fIlock\-tag\fP] \fIimage\-spec\fP \fIlock\-id\fP
为映像加锁，锁标识是用户一己所好的任意名字。默认加的是互斥锁，也就是说如果已经加过锁的话此命令会失败； \-\-shared 选项会改变此行为。注意，加锁操作本身不影响除加锁之外的任何操作，也不会保护对象、防止它被删除。
.TP
\fBlock remove\fP \fIimage\-spec\fP \fIlock\-id\fP \fIlocker\fP
释放映像上的锁。锁标识和其持有者来自 lock ls 。
.TP
\fBbench\fP \-\-io\-type <read | write | readwrite | rw> [\-\-io\-size \fIsize\-in\-B/K/M/G/T\fP] [\-\-io\-threads \fInum\-ios\-in\-flight\fP] [\-\-io\-total \fIsize\-in\-B/K/M/G/T\fP] [\-\-io\-pattern seq | rand] [\-\-rw\-mix\-read \fIread proportion in readwrite\fP] \fIimage\-spec\fP
向指定映像生成一系列 IO 操作，以此衡量 IO 吞吐量和延时。如果不加后缀， \-\-io\-size 和 \-\-io\-total 的单位就当是 B 。默认参数为 \-\-io\-size 4096 、 \-\-io\-threads 16 、 \-\-io\-total 1G 、 \-\-io\-pattern seq 、 \-\-rw\-mix\-read 50 。
.UNINDENT
.SH 映像名和快照名规则
.nf
\fIimage\-spec\fP is [\fIpool\-name\fP]/\fIimage\-name\fP
\fIsnap\-spec\fP  is [\fIpool\-name\fP]/\fIimage\-name\fP@\fIsnap\-name\fP
\fIgroup\-spec\fP      is [\fIpool\-name\fP/[\fInamespace\-name\fP/]]\fIgroup\-name\fP
\fIgroup\-snap\-spec\fP is [\fIpool\-name\fP/[\fInamespace\-name\fP/]]\fIgroup\-name\fP@\fIsnap\-name\fP
\fIjournal\-spec\fP    is [\fIpool\-name\fP/[\fInamespace\-name\fP/]]\fIjournal\-name\fP
.fi
.sp
.sp
\fIpool\-name\fP 的默认值是 rbd 。如果某个映像名包含斜杠字符（ / ），那么还必须指定 \fIpool\-name\fP 。
.sp
你可以用 \-\-pool 、 \-\-image 和 \-\-snap 选项分别指定各个名字，但是这种用法不普遍，大家还是倾向于上面的规则。
.SH 条带化
.sp
RBD 映像被条带化为很多对象，然后存储到 Ceph 分布式对象存储（ RADOS ）集群中。因此，到此映像的读和写请求会被分布到集群内的很多节点，也因此避免了映像巨大或繁忙时可能出现的单节点瓶颈。
.sp
条带化由三个参数控制：
.INDENT 0.0
.TP
.B object\-size
条带化产生的对象尺寸是 2 的幂，它会被对齐到最接近的 2 的幂。默认对象尺寸是 4MB ，最小是 4K 、最大 32 M 。
.UNINDENT
.INDENT 0.0
.TP
.B stripe_unit
各条带单位是连续的字节，相邻地存储于同一对象，用满再去下一个对象。
.UNINDENT
.INDENT 0.0
.TP
.B stripe_count
我们把 [\fIstripe_unit\fP] 个字节写够 [\fIstripe_count\fP] 个对象后，再转回到第一个对象写另一轮条带，直到达到对象的最大尺寸。此时，我们继续写下一轮 [\fIstripe_count\fP] 个对象。
.UNINDENT
.sp
默认情况下， [\fIstripe_unit\fP] 和对象尺寸相同、且
[\fIstripe_count\fP] 为 1 ；另外指定 [\fIstripe_unit\fP] 需 STRIPINGV2
功能（ Ceph 0.53 起加入）并使用 format 2 格式的映像。
.SH 内核 RBD (KRBD) 选项
.sp
这里的大多数选项主要适用于调试和压力测试。默认值设置于内核中，因此还与所用内核的版本有关。
.sp
每个客户端例程的 \fIrbd map\fP 选项：
.INDENT 0.0
.IP \(bu 2
fsid=aaaaaaaa\-bbbb\-cccc\-dddd\-eeeeeeeeeeee \- 应该由客户端提供的 FSID 。
.IP \(bu 2
ip=a.b.c.d[:p] \- IP 还有客户端可选的端口。
.IP \(bu 2
share \- 允许与其它映射共享客户端例程（默认）。
.IP \(bu 2
noshare \- 禁止与其它映射共享客户端例程。
.IP \(bu 2
crc \- 启用在写入数据时计算 CRC32C 校验值（默认）。
.IP \(bu 2
nocrc \- 在写入数据时不计算 CRC32C 校验值。
.IP \(bu 2
cephx_require_signatures \- 要求对 cephx 消息签名（从 3.19 起默认开启）。
.IP \(bu 2
nocephx_require_signatures \- 不要求对 cephx 消息签名（从 3.19 起）。
.IP \(bu 2
tcp_nodelay \- 在客户端禁用 Nagle\(aqs 算法（从 4.0 起默认开启）。
.IP \(bu 2
notcp_nodelay \- 在客户端启用 Nagle\(aqs 算法（从 4.0 起）。
.IP \(bu 2
cephx_sign_messages \- 启用消息签名（从 4.4 起默认开启）。
.IP \(bu 2
nocephx_sign_messages \- 禁用消息签名（从 4.4 起）。
.IP \(bu 2
mount_timeout=x \- 执行 \fIrbd map\fP 和 \fIrbd unmap\fP 时所涉及的各操作步骤的超时值（默认为 60 秒）。特别是从 4.2 起，与集群间没有连接时，即认为 \fIrbd unmap\fP 操作超时了。
.IP \(bu 2
osdkeepalive=x \- OSD 保持连接的期限（默认为 5 秒）。
.IP \(bu 2
osd_idle_ttl=x \- OSD 闲置 TTL （默认为 60 秒）。
.UNINDENT
.sp
每个映射（块设备）的 \fIrbd map\fP 选项：
.INDENT 0.0
.IP \(bu 2
rw \- 以读写方式映射映像（默认）。
.IP \(bu 2
ro \- 以只读方式映射映像，等价于 \-\-read\-only 。
.IP \(bu 2
queue_depth=x \- 队列深度（从 4.2 起默认为 128 个请求）。
.IP \(bu 2
lock_on_read \- 除写入和 discard 操作外，读取时也要获取独占锁（从 4.9 起）。
.IP \(bu 2
exclusive \- 禁止自动转换互斥锁（从 4.12 起）。
.UNINDENT
.sp
\fIrbd unmap\fP 选项：
.INDENT 0.0
.IP \(bu 2
force \- 让某一已打开的块设备强制取消映射（从 4.9 起支持）。其驱动会等待当前的请求完成之后再 unmap ；在 unmap 初始化之后再发给驱动的请求会失败。
.UNINDENT
.SH 实例
.sp
要新建一 100GB 的 rbd 映像：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd create mypool/myimage \-\-size 102400
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
用个非默认对象尺寸，8 MB：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd create mypool/myimage \-\-size 102400 \-\-object\-size 8M
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
删除一 rbd 映像（谨慎啊！）：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd rm mypool/myimage
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
新建快照：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd snap create mypool/myimage@mysnap
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
创建已保护快照的写时复制克隆：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd clone mypool/myimage@mysnap otherpool/cloneimage
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
查看快照有哪些克隆品：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd children mypool/myimage@mysnap
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
删除快照：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd snap rm mypool/myimage@mysnap
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
启用 cephx 时通过内核映射一映像：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd map mypool/myimage \-\-id admin \-\-keyfile secretfile
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
要通过内核把某一映像映射到没用默认名字 \fIceph\fP 的集群：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd map mypool/myimage \-\-cluster cluster\-name
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
取消映像映射：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd unmap /dev/rbd0
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
创建一映像及其克隆品：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd import \-\-image\-format 2 image mypool/parent
rbd snap create mypool/parent@snap
rbd snap protect mypool/parent@snap
rbd clone mypool/parent@snap otherpool/child
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
新建一 stripe_unit 较小的映像（在某些情况下可更好地分布少量写）：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd create mypool/myimage \-\-size 102400 \-\-stripe\-unit 65536B \-\-stripe\-count 16
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
更改一映像的格式，先导出、再导入为期望格式：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd export mypool/myimage@snap /tmp/img
rbd import \-\-image\-format 2 /tmp/img mypool/myimage2
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
互斥地锁住一映像：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd lock add mypool/myimage mylockid
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
释放锁：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd lock remove mypool/myimage mylockid client.2485
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 使用范围
.sp
\fBrbd\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
ceph(8),
rados(8)
.SH 提纲
.nf
\fBrbdmap map\fP
\fBrbdmap unmap\fP
.fi
.sp
.SH 描述
.sp
\fBrbdmap\fP 是个 shell 脚本，用于自动化一到多个 RBD (RADOS
Block Device) 映像的 \fBrbd map\fP 和 \fBrbd unmap\fP 操作，同时这个脚本也可以由系统管理员随时手动运行，但主要的用途还是把启动时 RBD 映像的映射、挂载（还有关机时的卸载、取消映射）操作自动化，由 init 系统（一个 systemd 的 unit 文件，为此
ceph\-common 软件包打包了 \fBrbdmap.service\fP ）触发。
.sp
此脚本只需一个参数，可以是 map 或 unmap 。运行时，脚本会分析配置文件（默认为 \fB/etc/ceph/rbdmap\fP ，但可以用环境变量
\fBRBDMAPFILE\fP 覆盖），配置文件的每行对应一个要映射、或取消映射的 RBD 映像。
.sp
配置文件格式为：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
IMAGESPEC RBDOPTS
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
其中， \fBIMAGESPEC\fP 的格式应该是 \fBPOOLNAME/IMAGENAME\fP （存储池名、一个斜线、和映像名），或只有 \fBIMAGENAME\fP ，此时
\fBPOOLNAME\fP 默认为 rbd 。 \fBRBDOPTS\fP 是可选项列表，包含要传入底层 \fBrbd map\fP 命令的参数，这些参数及其取值应该是逗号分隔的字符串：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
PARAM1=VAL1,PARAM2=VAL2,...,PARAMN=VALN
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
此配置会让脚本执行如下的 \fBrbd map\fP 命令：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd map POOLNAME/IMAGENAME \-\-PARAM1 VAL1 \-\-PARAM2 VAL2
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
（ \fBrbd\fP 命令的可用选项请参考其手册页。）
.sp
运行 \fBrbdmap map\fP 时，此脚本先分析配置文件，对于每个配置了的 RBD 映像，首先尝试映射它（用 \fBrbd map\fP 命令），然后，尝试挂载此映像。
.sp
运行 \fBrbdmap unmap\fP 时，罗列在配置文件内的映像会被依次卸载、取消映射。
.sp
\fBrbdmap unmap\-all\fP 尝试卸载、然后取消当前映射的所有 RBD 映像，不管它们是否在配置文件里。
.sp
如果操作成功， \fBrbd map\fP 操作会把映像映射到类似
\fB/dev/rbdX\fP 的设备，此时，会触发 udev 规则来创建友好的设备名符号链接，如 \fB/dev/rbd/POOLNAME/IMAGENAME\fP ，链接到映射的真实设备。
.sp
挂载、卸载功能要正常运行的话，友好的设备名在 \fB/etc/fstab\fP
里面还必须有相应配置。
.sp
在 \fB/etc/fstab\fP 里面写 RBD 映像的配置条目时，最好加上
noauto （或者 nofail ）挂载选项。这样可防止 init 系统过早地挂载设备——甚至早于相应设备存在时。（正因为 \fBrbdmap.service\fP
是执行 shell 脚本的，所以在引导过程中都触发得很晚。）
.SH 实例
.sp
配置实例 \fB/etc/ceph/rbdmap\fP 内含两个 RBD 映像，分别名为
bar1 和 bar2 ，都在 foopool 存储池内：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
foopool/bar1    id=admin,keyring=/etc/ceph/ceph.client.admin.keyring
foopool/bar2    id=admin,keyring=/etc/ceph/ceph.client.admin.keyring
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
此文件的每一行都有两种字符串：映像说明、和传递给 \fBrbd map\fP
的选项。这两行将被转换为如下的命令：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rbd map foopool/bar1 \-\-id admin \-\-keyring /etc/ceph/ceph.client.admin.keyring
rbd map foopool/bar2 \-\-id admin \-\-keyring /etc/ceph/ceph.client.admin.keyring
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
假设这些映像上的文件系统为 XFS ，其对应的 \fB/etc/fstab\fP 配置可能如下：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/dev/rbd/foopool/bar1 /mnt/bar1 xfs noauto 0 0
/dev/rbd/foopool/bar2 /mnt/bar2 xfs noauto 0 0
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
创建好映像、并写好 \fB/etc/ceph/rbdmap\fP 配置文件后，只需启用这个 unit 就可让映像在启动时自动映射和挂载：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
systemctl enable rbdmap.service
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 选项
.sp
无
.SH 使用范围
.sp
\fBrbdmap\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%http://ceph.com/docs\fP 。
.SH 参考
.sp
rbd(8),
.SH AUTHOR
unknown
.SH COPYRIGHT
2016, Red Hat, Inc, and contributors. Licensed under Creative Commons Attribution Share Alike 3.0 (CC-BY-SA-3.0)
.\" Generated by docutils manpage writer.
.
