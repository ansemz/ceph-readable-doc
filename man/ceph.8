.\" Man page generated from reStructuredText.
.
.TH "CEPH" "8" "Jan 11, 2022" "dev" "Ceph"
.SH NAME
ceph \- ceph administration tool
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH 提纲
.nf
\fBceph\fP \fBauth\fP [ \fIadd\fP | \fIcaps\fP | \fIdel\fP | \fIexport\fP | \fIget\fP | \fIget\-key\fP | \fIget\-or\-create\fP | \fIget\-or\-create\-key\fP | \fIimport\fP | \fIlist\fP | \fIprint\-key\fP | \fIprint_key\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBcompact\fP
.fi
.sp
.nf
\fBceph\fP \fBconfig\fP [ \fIdump\fP | \fIls\fP | \fIhelp\fP | \fIget\fP | \fIshow\fP | \fIshow\-with\-defaults\fP | \fIset\fP | \fIrm\fP | \fIlog\fP | \fIreset\fP | \fIassimilate\-conf\fP | \fIgenerate\-minimal\-conf\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBconfig\-key\fP [ \fIrm\fP | \fIexists\fP | \fIget\fP | \fIls\fP | \fIdump\fP | \fIset\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBdaemon\fP \fI<name>\fP | \fI<path>\fP \fI<command>\fP ...
.fi
.sp
.nf
\fBceph\fP \fBdaemonperf\fP \fI<name>\fP | \fI<path>\fP [ \fIinterval\fP [ \fIcount\fP ] ]
.fi
.sp
.nf
\fBceph\fP \fBdf\fP \fI{detail}\fP
.fi
.sp
.nf
\fBceph\fP \fBfs\fP [ \fIls\fP | \fInew\fP | \fIreset\fP | \fIrm\fP | \fIauthorize\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBfsid\fP
.fi
.sp
.nf
\fBceph\fP \fBhealth\fP \fI{detail}\fP
.fi
.sp
.nf
\fBceph\fP \fBinjectargs\fP \fI<injectedargs>\fP [ \fI<injectedargs>\fP\&... ]
.fi
.sp
.nf
\fBceph\fP \fBlog\fP \fI<logtext>\fP [ \fI<logtext>\fP\&... ]
.fi
.sp
.nf
\fBceph\fP \fBmds\fP [ \fIcompat\fP | \fIfail\fP | \fIrm\fP | \fIrmfailed\fP | \fIset_state\fP | \fIstat\fP | \fIrepaired\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBmon\fP [ \fIadd\fP | \fIdump\fP | \fIgetmap\fP | \fIremove\fP | \fIstat\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBosd\fP [ \fIblocklist\fP | \fIblocked\-by\fP | \fIcreate\fP | \fInew\fP | \fIdeep\-scrub\fP | \fIdf\fP | \fIdown\fP | \fIdump\fP | \fIerasure\-code\-profile\fP | \fIfind\fP | \fIgetcrushmap\fP | \fIgetmap\fP | \fIgetmaxosd\fP | \fIin\fP | \fIls\fP | \fIlspools\fP | \fImap\fP | \fImetadata\fP | \fIok\-to\-stop\fP | \fIout\fP | \fIpause\fP | \fIperf\fP | \fIpg\-temp\fP | \fIforce\-create\-pg\fP | \fIprimary\-affinity\fP | \fIprimary\-temp\fP | \fIrepair\fP | \fIreweight\fP | \fIreweight\-by\-pg\fP | \fIrm\fP | \fIdestroy\fP | \fIpurge\fP | \fIsafe\-to\-destroy\fP | \fIscrub\fP | \fIset\fP | \fIsetcrushmap\fP | \fIsetmaxosd\fP  | \fIstat\fP | \fItree\fP | \fIunpause\fP | \fIunset\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBosd\fP \fBcrush\fP [ \fIadd\fP | \fIadd\-bucket\fP | \fIcreate\-or\-move\fP | \fIdump\fP | \fIget\-tunable\fP | \fIlink\fP | \fImove\fP | \fIremove\fP | \fIrename\-bucket\fP | \fIreweight\fP | \fIreweight\-all\fP | \fIreweight\-subtree\fP | \fIrm\fP | \fIrule\fP | \fIset\fP | \fIset\-tunable\fP | \fIshow\-tunables\fP | \fItunables\fP | \fIunlink\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBosd\fP \fBpool\fP [ \fIcreate\fP | \fIdelete\fP | \fIget\fP | \fIget\-quota\fP | \fIls\fP | \fImksnap\fP | \fIrename\fP | \fIrmsnap\fP | \fIset\fP | \fIset\-quota\fP | \fIstats\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBosd\fP \fBpool\fP \fBapplication\fP [ \fIdisable\fP | \fIenable\fP | \fIget\fP | \fIrm\fP | \fIset\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBosd\fP \fBtier\fP [ \fIadd\fP | \fIadd\-cache\fP | \fIcache\-mode\fP | \fIremove\fP | \fIremove\-overlay\fP | \fIset\-overlay\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBpg\fP [ \fIdebug\fP | \fIdeep\-scrub\fP | \fIdump\fP | \fIdump_json\fP | \fIdump_pools_json\fP | \fIdump_stuck\fP | \fIgetmap\fP | \fIls\fP | \fIls\-by\-osd\fP | \fIls\-by\-pool\fP | \fIls\-by\-primary\fP | \fImap\fP | \fIrepair\fP | \fIscrub\fP | \fIstat\fP ] ...
.fi
.sp
.nf
\fBceph\fP \fBquorum_status\fP
.fi
.sp
.nf
\fBceph\fP \fBreport\fP { \fI<tags>\fP [ \fI<tags>...\fP ] }
.fi
.sp
.nf
\fBceph\fP \fBstatus\fP
.fi
.sp
.nf
\fBceph\fP \fBsync\fP \fBforce\fP {\-\-yes\-i\-really\-mean\-it} {\-\-i\-know\-what\-i\-am\-doing}
.fi
.sp
.nf
\fBceph\fP \fBtell\fP \fI<name (type.id)> <command> [options...]\fP
.fi
.sp
.nf
\fBceph\fP \fBversion\fP
.fi
.sp
.SH 描述
.sp
\fBceph\fP 是个控制工具，可用于手动部署和维护 Ceph 集群。
它提供的多种工具可用于部署监视器、
OSD 、归置组、 MDS 和维护、管理整个集群。
.SH 命令
.SS auth
.sp
管理认证密钥。用于给某个具体实体（如监视器或 OSD ）
增加、删除、导出或更新认证密钥。
还需额外加子命令。
.sp
子命令 \fBadd\fP 用于为特定实体增加认证信息，这些信息可从文件读入，
若未在命令行指定密钥（和、或此密钥的能力）将生成随机密钥。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth add <entity> {<caps> [<caps>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBcaps\fP 把 \fBname\fP 的能力更新为命令行中指定的。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth caps <entity> <caps> [<caps>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdel\fP 删除 \fBname\fP 的所有能力。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth del <entity>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBexport\fP 把指定实体写入密钥环，若未指定则写入主密钥环。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth export {<entity>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBget\fP 把请求到的密钥写入密钥环文件。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth get <entity>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBget\-key\fP 显示所请求的密钥。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth get\-key <entity>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBget\-or\-create\fP 用于为特定实体增加认证信息，
这些信息可从文件读入，若未在命令行指定密钥（和、或此密钥的能力）
将生成随机密钥。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth get\-or\-create <entity> {<caps> [<caps>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBget\-or\-create\-key\fP 根据命令行指定的系统、能力对，
为 \fBname\fP 获取或创建密钥。若密钥已存在，
任何指定的能力必须与当前已有能力一致。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth get\-or\-create\-key <entity> {<caps> [<caps>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBimport\fP 从输入文件读入密钥环。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth import
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\fP 罗列认证状态。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth ls
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBprint\-key\fP 显示请求的密钥。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth print\-key <entity>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBprint_key\fP 显示请求的密钥。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph auth print_key <entity>
.ft P
.fi
.UNINDENT
.UNINDENT
.SS compact
.sp
让监视器压缩其 leveldb 存储。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph compact
.ft P
.fi
.UNINDENT
.UNINDENT
.SS config
.sp
用于配置集群。默认情况下， Ceph 的各个守护进程和客户端在启动时从监视器获取配置，
在运行时，如果发现跟踪的选项有任何变化还会更新。
它还有下面这些子命令。
.sp
子命令 \fBdump\fP 倒尽集群的所有选项。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config dump
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\fP 罗列出集群的所有选项名。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config ls
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBhelp\fP 详述指定的配置选项。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config help <option>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBget\fP 倒尽指定实体的选项。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config get <who> {<option>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBshow\fP 展示指定实体上正在运行的配置。
请注意，不像 \fBget\fP 只展示监视器管理着的选项，
\fBshow\fP 展示当下起作用的所有配置。
这些选项有多个来源，例如，编译时的默认值、
监视器的配置数据库、主机上的 \fBceph.conf\fP 文件。
这些选项在运行时还能被覆盖；因此，
\fBshow\fP 显示的配置选项有可能和 \fBget\fP 显示的不同。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config show {<who>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBshow\-with\-defaults\fP 显示指定实体在运行的配置、
还有编译的默认值。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config show {<who>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\fP 给指定的一或多个实体设置一个选项。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config set <who> <option> <value> {\-\-force}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrm\fP 给一或多个实体清除一个选项。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config rm <who> <option>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBlog\fP 显示最近的配置变更历史。
如果没加 \fIcount\fP 选项，默认显示 10 条。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config log {<count>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBreset\fP 把配置恢复到指定的历史版本。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config reset <version>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBassimilate\-conf\fP 从标准输入接收配置选项，
并返回一个新的、最小化的配置文件。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config assimilate\-conf \-i <input\-config\-path> > <output\-config\-path>
ceph config assimilate\-conf < <input\-config\-path>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBgenerate\-minimal\-conf\fP 生成一个最小化的 \fBceph.conf\fP 文件，
可以用于自举引导一个守护进程或者客户端。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config generate\-minimal\-conf > <minimal\-config\-path>
.ft P
.fi
.UNINDENT
.UNINDENT
.SS config\-key
.sp
管理配置密钥。 config\-key 是监视器提供的一个通用键值服务，
主要是让 Ceph 工具和守护进程永久存储各种配置；其中，
ceph\-mgr 的各模块也用它存储它们的选项。
需额外指定子命令。
.sp
子命令 \fBrm\fP 用于删除配置键名。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config\-key rm <key>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBexists\fP 用于检查配置密钥是否存在。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config\-key exists <key>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBget\fP 用于获取配置密钥。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config\-key get <key>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\fP 罗列配置密钥。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config\-key ls
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdump\fP 倒出配置中的所有键及其值。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config\-key dump
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\fP 上传配置密钥及其内容。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph config\-key set <key> {<val>}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS daemon
.sp
向 admin\-socket 提交命令。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph daemon {daemon_name|socket_path} {command} ...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
实例：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph daemon osd.0 help
.ft P
.fi
.UNINDENT
.UNINDENT
.SS daemonperf
.sp
盯着某一 Ceph 守护进程的性能计数器。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph daemonperf {daemon_name|socket_path} [{interval} [{count}]]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS df
.sp
显示集群空闲空间状态。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph df {detail}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS features
.sp
查看所有已连接守护进程、以及连入集群的各客户端的版本号及其功能，
还有各功能、版本号集合对应的（守护进程、客户端）数量。
Ceph 的各个版本都有不同的功能集，以功能位掩码表示。
新集群功能要求客户端也支持这些功能，否则不允许它们连接这些新功能。
因为新功能或能力是系统升级后才启用的，（新集群）会阻止老客户端连接。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph features
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fs
.sp
用于管理 cephfs 文件系统，需额外加子命令。
.sp
子命令 \fBls\fP 用于罗列文件系统。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph fs ls
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBnew\fP 用指定的存储池 <metadata> 和 <data> 创建新文件系统。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph fs new <fs_name> <metadata> <data>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBreset\fP 仅适用于灾难恢复：重置成单 MDS 运行图。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph fs reset <fs_name> {\-\-yes\-i\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrm\fP 用于禁用指定文件系统。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph fs rm <fs_name> {\-\-yes\-i\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBauthorize\fP 创建一个新客户端，
并把 \fB<fs_name>\fP 路径授权给它；传入 \fB/\fP 可以授权整个文件系统。
下面的 \fB<perms>\fP 可以是 \fBr\fP 、 \fBrw\fP 或 \fBrwp\fP 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph fs authorize <fs_name> client.<client_id> <path> <perms> [<path> <perms>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS fsid
.sp
显示集群的 FSID/UUID 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph fsid
.ft P
.fi
.UNINDENT
.UNINDENT
.SS health
.sp
显示集群健康状况。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph health {detail}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS heap
.sp
显示堆栈使用信息（编译时启用了 tcmalloc 支持才可用）
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph tell <name (type.id)> heap dump|start_profiler|stop_profiler|stats
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrelease\fP 让 TCMalloc 把不再使用的内存立即释放给内核。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph tell <name (type.id)> heap release
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fB(get|set)_release_rate\fP 查看或设置 TCMalloc 内存释放速率。
TCMalloc 逐步向内核释放不再使用的内存，这个速率控制着释放得多快。
增大此值让 TCMalloc 更频繁地返回不用的内存； 0 的意思是永不返回给系统，
1 表示攒够 1000 个页再向系统释放。默认是 \fB1.0\fP 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph tell <name (type.id)> heap get_release_rate|set_release_rate {<val>}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS injectargs
.sp
向监视器注入配置参数。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph injectargs <injected_args> [<injected_args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS log
.sp
把指定文本记录到监视器日志中。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph log <logtext> [<logtext>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS mds
.sp
用于元数据服务器的配置和管理，需额外指定子命令。
.sp
子命令 \fBcompat\fP 管理兼容功能，需额外指定子命令。
.sp
子命令 \fBrm_compat\fP 可删除兼容功能。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds compat rm_compat <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrm_incompat\fP 可删除不兼容的功能。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds compat rm_incompat <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBshow\fP 可查看 mds 的兼容性选项。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds compat show
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBfail\fP 强制把 mds 状态设置为失效。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds fail <role|gid>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrm\fP 用于删除不活跃的 mds 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds rm <int[0\-]> <name> (type.id)>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrmfailed\fP 用于删除失效的 mds 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds rmfailed <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset_state\fP 把 mds 状态从 <gid> 改为 <numeric\-state> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds set_state <int[0\-]> <int[0\-20]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBstat\fP 显示 MDS 状态。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds stat
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrepaired\fP 把损坏的 MDS rank 标记为不再是损坏的。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mds repaired <role>
.ft P
.fi
.UNINDENT
.UNINDENT
.SS mon
.sp
用于监视器的配置和管理，需额外指定子命令。
.sp
子命令 \fBadd\fP 新增名为 <name> 的监视器，地址为 <addr> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mon add <name> <IPaddr[:port]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdump\fP 转储格式化的 monmap ， epoch 号可选。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mon dump {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBgetmap\fP 用于获取 monmap 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mon getmap {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBremove\fP 用于删除名为 <name> 的监视器。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mon remove <name>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBstat\fP 汇总监视器状态。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mon stat
.ft P
.fi
.UNINDENT
.UNINDENT
.SS mgr
.sp
Ceph 管理器守护进程的配置和管理。
.sp
子命令 \fBdump\fP 转储最新的 MgrMap ，其中有活跃的和备用的管理器守护进程。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mgr dump
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBfail\fP 可把一个管理器守护进程标记为已失效，
并把它从管理器运行图中删掉。如果它是活跃管理器，
将会有一个备机顶替它。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mgr fail <name>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBmodule ls\fP 可罗列当前已启用的管理器模块（插件）。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mgr module ls
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBmodule enable\fP 可启用一个管理器模块。可用模块在
MgrMap 内，可以用 \fBmgr dump\fP 查看。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mgr module enable <module>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBmodule disable\fP 可禁用当前活跃的管理器模块。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mgr module disable <module>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBmetadata\fP 可显示所有管理器守护进程的元数据；如果指定了名字，就只显示它的。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mgr metadata [name]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBversions\fP 可显示所有在运行守护进程的版本个数。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mgr versions
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBcount\-metadata\fP 可显示任意守护进程的元数据字段个数。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph mgr count\-metadata <field>
.ft P
.fi
.UNINDENT
.UNINDENT
.SS osd
.sp
用于配置和管理 OSD ，需额外指定子命令。
.sp
子命令 \fBblocklist\fP 用于管理客户端黑名单，需额外加子命令。
.sp
子命令 \fBadd\fP 用于把 <addr> 加入黑名单（可指定时间，从现在起 <expire> 秒）。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd blocklist add <EntityAddr> {<float[0.0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\fP 列出进黑名单的客户端。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd blocklist ls
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrm\fP 从黑名单里删除 <addr> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd blocklist rm <EntityAddr>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBblocked\-by\fP 用于罗列哪些 OSD 在阻塞互联。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd blocked\-by
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBcreate\fP 用于新建 OSD ， UUID 和 ID 是可选的。
.sp
从 Luminous 版起，此命令已\fB废弃\fP，未来会删除。
.sp
请改用 \fBnew\fP 子命令。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd create {<uuid>} {<id>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBnew\fP 可用来创建新 OSD 或者重新创建之前销毁的已经分配过 \fIid\fP 的 OSD ；这个新 OSD 会用指定的 \fIuuid\fP ，此命令还需指定一个 JSON 文件，其内有认证实体 \fIclient.osd.<id>\fP 的
base64 编码 cephx 密钥；还有些可选项，如访问 dm\-crypt 密码箱的
base64 编码 cephx 密钥、和一个 dm\-crypt 密钥。指定 dm\-crypt
密钥时，还必须同时指定密码箱的 cephx 密钥。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd new {<uuid>} {<id>} \-i {<params.json>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
JSON 文件内的参数是可选的，但是如果设置了，就必须遵守下面的几种格式之一：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "cephx_secret": "AQBWtwhZdBO5ExAAIDyjK2Bh16ZXylmzgYYEjg==",
    "crush_device_class": "myclass"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
或者：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "cephx_secret": "AQBWtwhZdBO5ExAAIDyjK2Bh16ZXylmzgYYEjg==",
    "cephx_lockbox_secret": "AQDNCglZuaeVCRAAYr76PzR1Anh7A0jswkODIQ==",
    "dmcrypt_key": "<dm\-crypt key>",
    "crush_device_class": "myclass"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
或者：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{
    "crush_device_class": "myclass"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBcrush_device_class\fP 属性是可选的；指定后，它将是新 OSD 的初始 CRUSH 设备类。
.sp
子命令 \fBcrush\fP 用于 CRUSH 管理，需额外指定子命令。
.sp
子命令 \fBadd\fP 可用于新增或更新 <name> 的 crushmap 位置及权重，
权重改为 <weight> 、位置为 <args> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush add <osdname (id|osd.id)> <float[0.0\-]> <args> [<args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBadd\-bucket\fP 可新增没有父级（可能是 root ）、类型为 <type> 、
名为 <name> 的 crush 桶。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush add\-bucket <name> <type>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBcreate\-or\-move\fP 用于创建名为 <name> 、权重为 <weight> 的条目并放置到 <args> ，若已存在则移动到指定位置 <args> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush create\-or\-move <osdname (id|osd.id)> <float[0.0\-]>
<args> [<args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdump\fP 用于转储 crush 图。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush dump
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBget\-tunable\fP 用于获取 CRUSH 可调值 straw_calc_version 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush get\-tunable straw_calc_version
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBlink\fP 用于把已存在条目 <name> 链接到 <args> 位置下。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush link <name> <args> [<args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBmove\fP 可把已有条目 <name> 移动到 <args> 位置。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush move <name> <args> [<args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBremove\fP 把 crush 图中（任意位置，或 <ancestor> 之下的）的 <name> 删掉。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush remove <name> {<ancestor>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrename\-bucket\fP 可把桶 <srcname> 重命名为 <dstname> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rename\-bucket <srcname> <dstname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBreweight\fP 把 crush 图中 <name> 的权重改为 <weight> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush reweight <name> <float[0.0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBreweight\-all\fP 重新计算树的权重，
以确保权重之和没算错。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush reweight\-all
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBreweight\-subtree\fP 用于把 CRUSH 图内 <name> 之下的所有叶子条目的权重改为 <weight> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush reweight\-subtree <name> <weight>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrm\fP 把 crush 图中（任意位置，或 <ancestor> 之下的）的
<name> 删掉。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rm <name> {<ancestor>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrule\fP 用于创建 crush 规则，需额外加子命令。
.sp
子命令 \fBcreate\-erasure\fP 可为纠删码存储池（用 <profile> 创建的））创建名为 <name> 的 crush 规则，默认为 default 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rule create\-erasure <name> {<profile>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBcreate\-simple\fP 创建从 <root> 开始、名为 <name> 的 crush 规则，
副本将跨 <type> 类型进行散布，选择模式为 <firstn|indep> （默认 firstn ，
indep 更适合纠删码存储池）。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rule create\-simple <name> <root> <type> {firstn|indep}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdump\fP 转储名为 <name> 的 crush 规则，默认全部转储。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rule dump {<name>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\fP 罗列 crush 规则。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rule ls
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrm\fP 删除 crush 规则 <name> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush rule rm <name>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\fP 单独使用，把输入文件设置为 crush 图。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush set
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\fP 为 osdname 或 osd.id 更新 crush 图的位置和权重信息，
把名为 <name> 的 OSD 权重设置为 <weight> 、位置设置为 <args> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush set <osdname (id|osd.id)> <float[0.0\-]> <args> [<args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\-tunable\fP 把可调值 <tunable> 设置为 <value> 。唯一能设置的可调值是 straw_calc_version 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush set\-tunable straw_calc_version <value>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBshow\-tunables\fP 显示当前的 crush 可调值。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush show\-tunables
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBtree\fP 用树状视图显示各 crush 桶、及各条目。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush tree
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBtunables\fP 设置 <profile> 中的 crush 可调值。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush tunables legacy|argonaut|bobtail|firefly|hammer|optimal|default
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBunlink\fP 从 crush 图中解链接出 <name> （任意位置，或 <ancestor> 之下的）。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd crush unlink <name> {<ancestor>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdf\fP 用于显示 OSD 利用率。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd df {plain|tree}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdeep\-scrub\fP 可启动指定 OSD 的深度洗刷。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd deep\-scrub <who>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdown\fP 把 osd(s) <id> [<id>...] 状态设置为 down 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd down <ids> [<ids>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdump\fP 打印 OSD 图汇总。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd dump {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBerasure\-code\-profile\fP 用于管理纠删码配置，
需额外加子命令。
.sp
子命令 \fBget\fP 读取纠删码配置 <name> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd erasure\-code\-profile get <name>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\fP 罗列所有纠删码配置。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd erasure\-code\-profile ls
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrm\fP 删除纠删码配置 <name> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd erasure\-code\-profile rm <name>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\fP 用给定的参数 [<key[=value]> ...] 创建纠删码配置 <name> 。末尾加 \-\-force 可覆盖已有配置（慎用）。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd erasure\-code\-profile set <name> {<profile> [<profile>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBfind\fP 从 CRUSH 图中找到 osd <id> 并显示其位置。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd find <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBgetcrushmap\fP 获取 CRUSH 图。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd getcrushmap {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBgetmap\fP 获取 OSD 图。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd getmap {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBgetmaxosd\fP 显示最大 OSD 惟一标识符。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd getmaxosd
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBin\fP 把给出的 OSD <id> [<id>...] 标识为 in 状态。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd in <ids> [<ids>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBlost\fP 把 OSD 标识为永久丢失。如果没有多个副本，此命令会导致数据丢失，慎用。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd lost <int[0\-]> {\-\-yes\-i\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\fP 显示所有 OSD 的惟一标识符。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd ls {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBlspools\fP 罗列存储池。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd lspools {<int>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBmap\fP 在 <pool> 存储池中找 <object> 对象所在的归置组号码。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd map <poolname> <objectname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBmetadata\fP 为 osd <id> 取出元数据。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd metadata {int[0\-]} (default all)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBout\fP 把指定 OSD <id> [<id>...] 的状态设置为 out 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd out <ids> [<ids>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBok\-to\-stop\fP 用于检查一些 OSD 是否能停止，而不会马上让其数据不可用。也就是说，尽管在降级模式（但还活跃着）下由于某些 PG 的失效导致数据冗余性降低了，所有数据仍然可读、可写。如果可以停止这些 OSD ，它就会返回一个成功代码；如果不行或者现在对于如何描述还没头绪，就返回一个错误代码和提示性消息。加上 \fB\-\-max <num>\fP 参数时，将会返回最多 <num> 个 OSD ID（会包括指定的 OSD 们），它们都可以同时停机。这样，只需指定一个起始 OSD 和一个最大值，就能轻松生成更大的可停机 OSD 集合。其它的 OSD 会从 CRUSH 层次结构的临近位置勾勒出来。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd ok\-to\-stop <id> [<ids>...] [\-\-max <num>]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBpause\fP 暂停 osd 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pause
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBperf\fP 打印 OSD 的性能统计摘要。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd perf
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBpg\-temp\fP 设置 pg_temp 映射 pgid:[<id> [<id>...]] ，适用于开发者。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pg\-temp <pgid> {<id> [<id>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBforce\-create\-pg\fP 可强行创建 pg <pgid> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd force\-create\-pg <pgid>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBpool\fP 用于管理数据存储池，
需额外加子命令。
.sp
子命令 \fBcreate\fP 创建存储池。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool create <poolname> {<int[0\-]>} {<int[0\-]>} {replicated|erasure}
{<erasure_code_profile>} {<rule>} {<int>} {\-\-autoscale\-mode=<on,off,warn>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdelete\fP 删除存储池。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool delete <poolname> {<poolname>} {\-\-yes\-i\-really\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBget\fP 获取存储池参数 <var> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool get <poolname> size|min_size|pg_num|pgp_num|crush_rule|write_fadvise_dontneed
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
以下命令只适用于分层存储池：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool get <poolname> hit_set_type|hit_set_period|hit_set_count|hit_set_fpp|
target_max_objects|target_max_bytes|cache_target_dirty_ratio|cache_target_dirty_high_ratio|
cache_target_full_ratio|cache_min_flush_age|cache_min_evict_age|
min_read_recency_for_promote|hit_set_grade_decay_rate|hit_set_search_last_n
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
以下命令只适用于纠删码存储池：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool get <poolname> erasure_code_profile
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
用 \fBall\fP 获取所有此类存储池应用的参数：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool get <poolname> all
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBget\-quota\fP 获取存储池的对象或字节数限额。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool get\-quota <poolname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\fP 用于罗列存储池。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool ls {detail}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBmksnap\fP 拍下存储池 <pool> 的快照 <snap> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool mksnap <poolname> <snap>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrename\fP 把存储池 <srcpool> 重命名为 <destpool> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool rename <poolname> <poolname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrmsnap\fP 删除存储池 <pool> 的快照 <snap> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool rmsnap <poolname> <snap>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\fP 把存储池参数 <var> 的值设置为 <val> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool set <poolname> size|min_size|pg_num|
pgp_num|crush_rule|hashpspool|nodelete|nopgchange|nosizechange|
hit_set_type|hit_set_period|hit_set_count|hit_set_fpp|debug_fake_ec_pool|
target_max_bytes|target_max_objects|cache_target_dirty_ratio|
cache_target_dirty_high_ratio|
cache_target_full_ratio|cache_min_flush_age|cache_min_evict_age|
min_read_recency_for_promote|write_fadvise_dontneed|hit_set_grade_decay_rate|
hit_set_search_last_n
<val> {\-\-yes\-i\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\-quota\fP 设置存储池的对象或字节数限额。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool set\-quota <poolname> max_objects|max_bytes <val>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBstats\fP 获取所有或指定存储池的统计信息。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool stats {<name>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBapplication\fP 用于向指定存储池添加注释。
默认情况下，可选的应用有对象、块、和文件存储
（对应的 app 名字分别是 rgw 、 rbd 、 cephfs ）。
但是也可以有其他应用。根据不同的应用，
会有、或没有相应的处理。
.sp
子命令 \fBdisable\fP 禁用指定存储池上的指定应用。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool application disable <pool\-name> <app> {\-\-yes\-i\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBenable\fP 向指定存储池增加一个注释，
就是提到的应用。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool application enable <pool\-name> <app> {\-\-yes\-i\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBget\fP 显示指定存储池上的指定应用的某个键名的值。
不传递可选参数将显示所有存储池上、
所有应用的所有键值对。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool application get {<pool\-name>} {<app>} {<key>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrm\fP 从指定存储池上的指定应用中删除键名所指的键值对。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool application rm <pool\-name> <app> <key>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\fP 关联或更新（如果已经存在）指定存储池上的指定应用中的键值对。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd pool application set <pool\-name> <app> <key> <value>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBprimary\-affinity\fP 设置主 OSD 亲和性，
有效值范围 0.0 <= <weight> <= 1.0
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd primary\-affinity <osdname (id|osd.id)> <float[0.0\-1.0]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBprimary\-temp\fP 设置 primary_temp 映射 pgid:<id>|\-1 ，
适用于开发者。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd primary\-temp <pgid> <id>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrepair\fP 让指定 OSD 开始修复。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd repair <who>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBreweight\fP 把 OSD 权重改为 0.0 < <weight> < 1.0 之间的值。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
osd reweight <int[0\-]> <float[0.0\-1.0]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBreweight\-by\-pg\fP 按归置组分布情况调整 OSD 的权重
（考虑的过载百分比，默认 120 ）。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd reweight\-by\-pg {<int[100\-]>} {<poolname> [<poolname...]}
{\-\-no\-increasing}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBreweight\-by\-utilization\fP 按利用率调整 OSD 的权重。它只调整利用率超过平均值的那些 OSD 们，例如，默认情况下，
给那些超过平均值 20% 的 OSD 们最多调整 120% 。
[overload\-threshold, 默认值 120 [max_weight_change, 默认值 0.05
[max_osds_to_adjust, 默认值 4]]]
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd reweight\-by\-utilization {<int[100\-]> {<float[0.0\-]> {<int[0\-]>}}}
{\-\-no\-increasing}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrm\fP 删除 OSD 运行图中的 OSD ，其编号为 <id> [<id>...] 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd rm <ids> [<ids>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdestroy\fP 把 OSD \fIid\fP 标记为 \fIdestroyed （已销毁）\fP，并删除与之对应的的 cephx 密钥、以及 dm\-crypt 配置、和守护进程私有的配置条目。
.sp
此命令不会从 crush 中删除这个 OSD ，也不会从 OSD 运行图中删除它；而是，一旦此命令正确无误地执行完，这个 OSD 的状态就是被标记为 \fIdestroyed\fP 。
.sp
要把一个 OSD 标记为已销毁，它必须先被标记为
\fBlost （丢失）\fP。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd destroy <id> {\-\-yes\-i\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBpurge\fP 执行的是 \fBosd destroy\fP 、 \fBosd rm\fP 和
\fBosd crush remove\fP 命令的合体。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd purge <id> {\-\-yes\-i\-really\-mean\-it}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBsafe\-to\-destroy\fP 会检查在不降低整体数据冗余度或持久性的前提下，删除或销毁一个 OSD 是否安全。
如果绝对安全，它会返回成功码；
如果不是、或者现在还不能断定，它会返回错误码和提示消息。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd safe\-to\-destroy <id> [<ids>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBscrub\fP 让指定 OSD 开始洗刷。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd scrub <who>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\fP 通过更新 OSD 运行图来设置集群范围的 <flag> 。\fBfull\fP 标记从 Mimic 版起已不再起作用，而 Octopus 版则不支持
\fBceph osd set full\fP 了。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd set pause|noup|nodown|noout|noin|nobackfill|
norebalance|norecover|noscrub|nodeep\-scrub|notieragent
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBsetcrushmap\fP 把输入文件设置为 CRUSH 图。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd setcrushmap
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBsetmaxosd\fP 设置最大 OSD 数值。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd setmaxosd <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\-require\-min\-compat\-client\fP 强制集群向后兼容，使之与指定的客户端版本相兼容。用这个子命令无需做破坏当前配置的更改（如 crush 可调值、或使用新功能）。请注意，如果存在与指定版本 <version> 的功能不兼容的已连接守护进程或客户端，这个子命令会失败。要查看已连入集群的所有客户端的功能和版本，请看 \fI\%ceph features\fP 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd set\-require\-min\-compat\-client <version>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBstat\fP 打印 OSD 图摘要。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd stat
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBtier\fP 用于管理（存储池）分级，需额外加子命令。
.sp
子命令 \fBadd\fP 把 <tierpool> （第二个）加到基础存储池 <pool>
（第一个）之前。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tier add <poolname> <poolname> {\-\-force\-nonempty}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBadd\-cache\fP 把尺寸为 <size> 的缓存存储池 <tierpool>
（第二个）加到现有存储池 <pool> （第一个）之前。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tier add\-cache <poolname> <poolname> <int[0\-]>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBcache\-mode\fP 设置缓存存储池 <pool> 的缓存模式。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tier cache\-mode <poolname> writeback|readproxy|readonly|none
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBremove\fP 删掉基础存储池 <pool> （第一个）的马甲存储池
<tierpool> （第二个）。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tier remove <poolname> <poolname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBremove\-overlay\fP 删除基础存储池 <pool> 的马甲存储池。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tier remove\-overlay <poolname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBset\-overlay\fP 把 <overlaypool> 设置为基础存储池 <pool>
的马甲存储池。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tier set\-overlay <poolname> <poolname>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBtree\fP 打印 OSD 树。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd tree {<int[0\-]>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBunpause\fP 取消 osd 暂停。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd unpause
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBunset\fP 通过更新 OSD 运行图来取消集群范围的 <flag> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph osd unset pause|noup|nodown|noout|noin|nobackfill|
norebalance|norecover|noscrub|nodeep\-scrub|notieragent
.ft P
.fi
.UNINDENT
.UNINDENT
.SS pg
.sp
用于管理 OSD 内的归置组，需额外加子命令。
.sp
子命令 \fBdebug\fP 可显示归置组的调试信息。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg debug unfound_objects_exist|degraded_pgs_exist
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdeep\-scrub\fP 开始深度洗刷归置组 <pgid> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg deep\-scrub <pgid>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdump\fP 可显示归置组图的人类可读版本（显示为纯文本时只有 \(aqall\(aq 合法）。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg dump {all|summary|sum|delta|pools|osds|pgs|pgs_brief} [{all|summary|sum|delta|pools|osds|pgs|pgs_brief...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdump_json\fP 只以 json 格式显示归置组图的人类可读版本。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg dump_json {all|summary|sum|delta|pools|osds|pgs|pgs_brief} [{all|summary|sum|delta|pools|osds|pgs|pgs_brief...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdump_pools_json\fP 只以 json 格式显示归置组存储池信息［译者：存疑］。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg dump_pools_json
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBdump_stuck\fP 显示卡顿归置组的信息。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg dump_stuck {inactive|unclean|stale|undersized|degraded [inactive|unclean|stale|undersized|degraded...]}
{<int>}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBgetmap\fP 获取二进制归置组图，保存到 \-o/stdout 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg getmap
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\fP 可根据指定存储池、 OSD 、状态罗列对应的归置组。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg ls {<int>} {<pg\-state> [<pg\-state>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\-by\-osd\fP 用于罗列指定 OSD 上的归置组。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg ls\-by\-osd <osdname (id|osd.id)> {<int>}
{<pg\-state> [<pg\-state>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\-by\-pool\fP 用于罗列存储池 [poolname] 内的归置组。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg ls\-by\-pool <poolstr> {<int>} {<pg\-state> [<pg\-state>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBls\-by\-primary\fP 可罗列主 OSD 为 [osd] 的归置组。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg ls\-by\-primary <osdname (id|osd.id)> {<int>}
{<pg\-state> [<pg\-state>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBmap\fP 显示归置组到 OSD 的映射关系。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg map <pgid>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBrepair\fP 开始修复归置组 <pgid> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg repair <pgid>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBscrub\fP 开始洗刷归置组 <pgid> 。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg scrub <pgid>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
子命令 \fBstat\fP 显示归置组状态。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph pg stat
.ft P
.fi
.UNINDENT
.UNINDENT
.SS quorum
.sp
让监视器加入或退出法定人数。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph tell mon.<id> quorum enter|exit
.ft P
.fi
.UNINDENT
.UNINDENT
.SS quorum_status
.sp
报告监视器法定人数状态。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph quorum_status
.ft P
.fi
.UNINDENT
.UNINDENT
.SS report
.sp
报告集群的全部状态，标签字符串可选。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph report {<tags> [<tags>...]}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS status
.sp
显示集群状态。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph status
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tell
.sp
发命令给指定守护进程。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph tell <name (type.id)> <args> [<args>...]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
罗列所有可用的命令。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph tell <name (type.id)> help
.ft P
.fi
.UNINDENT
.UNINDENT
.SS version
.sp
显示监视器守护进程的版本。
.sp
用法：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ceph version
.ft P
.fi
.UNINDENT
.UNINDENT
.SH 选项
.INDENT 0.0
.TP
.B \-i infile
指定一个输入文件，它将作为载荷与命令一起传递给监视器集群。
仅用于某些特定的监视器命令。
.UNINDENT
.INDENT 0.0
.TP
.B \-o outfile
把响应中监视器集群返回的载荷写入 outfile 文件。
只有某些特定的监视器命令（如 psd getmap ）会返回载荷。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-setuser user
给 \fB\-o\fP 选项指定的文件设置合适的用户所有权。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-setgroup group
给 \fB\-o\fP 选项指定的文件设置合适的组所有权。
.UNINDENT
.INDENT 0.0
.TP
.B \-c ceph.conf, \-\-conf=ceph.conf
用 ceph.conf 配置文件而非默认的 \fB/etc/ceph/ceph.conf\fP 来确定启动时所用的监视器地址。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-id CLIENT_ID, \-\-user CLIENT_ID
用于认证的客户端 ID 。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-name CLIENT_NAME, \-n CLIENT_NAME
用于认证的客户端名字。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-cluster CLUSTER
Ceph 集群名字。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-admin\-daemon ADMIN_SOCKET, daemon DAEMON_NAME
提交管理套接字命令。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-admin\-socket ADMIN_SOCKET_NOPE
你也许想要的是 \-\-admin\-daemon 。
.UNINDENT
.INDENT 0.0
.TP
.B \-s, \-\-status
显示集群状态。
.UNINDENT
.INDENT 0.0
.TP
.B \-w, \-\-watch
盯着默认的、 cluster 信道的实时状态变更。
.UNINDENT
.INDENT 0.0
.TP
.B \-W, \-\-watch\-channel
盯着任意信道上（ cluster 、 audit 、 cephadm 、 * 表示所有）、集群的实时变化。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-watch\-debug
盯着调试事件。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-watch\-info
盯着一般信息事件。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-watch\-sec
盯着安全事件。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-watch\-warn
盯着告警事件。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-watch\-error
盯着错误事件。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-version, \-v
显示版本号。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-verbose
使输出更详细。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-concise
使输出简洁些。
.UNINDENT
.INDENT 0.0
.TP
.B \-f {json,json\-pretty,xml,xml\-pretty,plain}, \-\-format
输出格式。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-connect\-timeout CLUSTER_TIMEOUT
设置连接集群的超时值。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-increasing
\fB\-\-no\-increasing\fP 默认是关闭的，所以 \fBreweight\-by\-utilization\fP
或 \fBtest\-reweight\-by\-utilization\fP 命令可以增加 osd 权重。如果运行这些命令时加上这个选项，即使 osd 利用率偏低它也不会增加 osd 权重。
.UNINDENT
.INDENT 0.0
.TP
.B \-\-block
完成前一直阻塞（仅适用于 scrub 和 deep\-scrub ）
.UNINDENT
.SH 使用范围
.sp
\fBceph\fP 是 Ceph 的一部分，这是个伸缩力强、开源、分布式的存储系统，更多信息参见 \fI\%https://docs.ceph.com\fP 。
.SH 参考
.sp
ceph\-mon(8),
ceph\-osd(8),
ceph\-mds(8)
.SH COPYRIGHT
2010-2014, Inktank Storage, Inc. and contributors. Licensed under Creative Commons Attribution Share Alike 3.0 (CC-BY-SA-3.0)
.\" Generated by docutils manpage writer.
.
